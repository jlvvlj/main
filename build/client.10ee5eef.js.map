{"version":3,"file":"client.10ee5eef.js","sources":["webpack:///./shared/api.js","webpack:///./shared/dayjs-convert.js","webpack:///./shared/sentryHelpers.js","webpack:///./src/app.js","webpack:///./src/client.js","webpack:///./src/components/account-settings-overlay/index.js","webpack:///./src/components/account-settings-overlay/password-settings.js","webpack:///./src/components/account-settings-overlay/styles.styl","webpack:///./src/components/account-settings-overlay/two-factor-settings.js","webpack:///./src/components/animation-container/animations.styl","webpack:///./src/components/animation-container/index.js","webpack:///./src/components/arrow/index.js","webpack:///./src/components/badges/badge.js","webpack:///./src/components/badges/badge.styl","webpack:///./src/components/banners/super-user.js","webpack:///./src/components/banners/super-user.styl","webpack:///./src/components/buttons/button.js","webpack:///./src/components/buttons/button.styl","webpack:///./src/components/buttons/checkbox-button.js","webpack:///./src/components/buttons/checkbox-button.styl","webpack:///./src/components/buttons/segmented-buttons.js","webpack:///./src/components/buttons/segmented-buttons.styl","webpack:///./src/components/buttons/sign-in-button.js","webpack:///./src/components/buttons/tracked-button-group.js","webpack:///./src/components/buttons/tracked-button.js","webpack:///./src/components/buttons/transparent-button.js","webpack:///./src/components/collection/add-collection-project-pop.js","webpack:///./src/components/collection/collection-item-small.js","webpack:///./src/components/collection/collection-item.js","webpack:///./src/components/collection/collection-item.styl","webpack:///./src/components/collection/collection-options-pop.js","webpack:///./src/components/collection/collection-result-item.js","webpack:///./src/components/collection/collection-result-item.styl","webpack:///./src/components/collection/container.js","webpack:///./src/components/collection/container.styl","webpack:///./src/components/collection/create-collection-pop.js","webpack:///./src/components/collection/create-collection-pop.styl","webpack:///./src/components/collection/defaultAvatar.js","webpack:///./src/components/collection/edit-collection-color-pop.js","webpack:///./src/components/collection/edit-collection-color-pop.styl","webpack:///./src/components/collection/note.js","webpack:///./src/components/collection/note.styl","webpack:///./src/components/collections-list/index.js","webpack:///./src/components/collections-list/more-collections.js","webpack:///./src/components/collections-list/styles.styl","webpack:///./src/components/containers/cover-container.js","webpack:///./src/components/containers/cover-container.styl","webpack:///./src/components/containers/expander.js","webpack:///./src/components/containers/expander.styl","webpack:///./src/components/containers/grid.js","webpack:///./src/components/containers/grid.styl","webpack:///./src/components/containers/profile/index.js","webpack:///./src/components/containers/profile/project.js","webpack:///./src/components/containers/profile/styles.styl","webpack:///./src/components/containers/profile/team.js","webpack:///./src/components/containers/profile/user.js","webpack:///./src/components/containers/projects-list.js","webpack:///./src/components/containers/projects-list.styl","webpack:///./src/components/containers/results-list.js","webpack:///./src/components/containers/results-list.styl","webpack:///./src/components/containers/row.js","webpack:///./src/components/containers/row.styl","webpack:///./src/components/containers/visually-hidden.js","webpack:///./src/components/create-team-pop/index.js","webpack:///./src/components/create-team-pop/styles.styl","webpack:///./src/components/data-loader/index.js","webpack:///./src/components/deleted-projects/deleted-projects.styl","webpack:///./src/components/deleted-projects/index.js","webpack:///./src/components/error-boundary.js","webpack:///./src/components/errors/not-found.js","webpack:///./src/components/errors/not-found.styl","webpack:///./src/components/fields/auth-description.js","webpack:///./src/components/fields/collection-name-input.js","webpack:///./src/components/fields/hidden-checkbox.js","webpack:///./src/components/fields/hidden-checkbox.styl","webpack:///./src/components/fields/optimistic-markdown-input.js","webpack:///./src/components/fields/optimistic-text-input.js","webpack:///./src/components/fields/optimistic-wrapping-text-input.js","webpack:///./src/components/fields/progress.js","webpack:///./src/components/fields/progress.styl","webpack:///./src/components/fields/team-fields.js","webpack:///./src/components/fields/team-fields.styl","webpack:///./src/components/fields/use-optimistic-value.js","webpack:///./src/components/fields/use-passively-trimmed-input.js","webpack:///./src/components/fields/user-login-input.js","webpack:///./src/components/fields/user-name-input.js","webpack:///./src/components/footer/footer.styl","webpack:///./src/components/footer/index.js","webpack:///./src/components/global.styl","webpack:///./src/components/header/header.styl","webpack:///./src/components/header/index.js","webpack:///./src/components/header/logo.js","webpack:///./src/components/header/new-project-pop.js","webpack:///./src/components/header/new-project-pop.styl","webpack:///./src/components/images/avatar.js","webpack:///./src/components/images/avatar.styl","webpack:///./src/components/images/emoji.js","webpack:///./src/components/images/emoji.styl","webpack:///./src/components/images/image.js","webpack:///./src/components/images/mask-image.js","webpack:///./src/components/images/mask-image.styl","webpack:///./src/components/inputs/color.js","webpack:///./src/components/inputs/color.styl","webpack:///./src/components/inputs/input-error-icon.js","webpack:///./src/components/inputs/input-error-message.js","webpack:///./src/components/inputs/input-error-message.styl","webpack:///./src/components/inputs/markdown-input.js","webpack:///./src/components/inputs/markdown-input.styl","webpack:///./src/components/inputs/text-area.js","webpack:///./src/components/inputs/text-area.styl","webpack:///./src/components/inputs/text-input.js","webpack:///./src/components/inputs/text-input.styl","webpack:///./src/components/inputs/wrapping-text-input.js","webpack:///./src/components/layout/auth-layout.js","webpack:///./src/components/layout/auth-layout.styl","webpack:///./src/components/layout/index.js","webpack:///./src/components/layout/styles.styl","webpack:///./src/components/link/index.js","webpack:///./src/components/link/tracked-external-link.js","webpack:///./src/components/link/wrapping-link.js","webpack:///./src/components/loader/index.js","webpack:///./src/components/loader/loader.styl","webpack:///./src/components/more-ideas/index.js","webpack:///./src/components/more-ideas/more-ideas.styl","webpack:///./src/components/new-password-input/index.js","webpack:///./src/components/new-password-input/new-password-input.styl","webpack:///./src/components/new-password-input/password-strength.js","webpack:///./src/components/new-password-input/password-strength.styl","webpack:///./src/components/new-stuff/index.js","webpack:///./src/components/new-stuff/new-stuff-article.js","webpack:///./src/components/new-stuff/new-stuff-article.styl","webpack:///./src/components/new-stuff/new-stuff-prompt.js","webpack:///./src/components/new-stuff/new-stuff-prompt.styl","webpack:///./src/components/new-stuff/new-stuff-pup.js","webpack:///./src/components/new-stuff/styles.styl","webpack:///./src/components/notification/index.js","webpack:///./src/components/notification/styles.styl","webpack:///./src/components/overlays/index.js","webpack:///./src/components/overlays/overlays.styl","webpack:///./src/components/popover/base.js","webpack:///./src/components/popover/container.js","webpack:///./src/components/popover/dialog.js","webpack:///./src/components/popover/index.js","webpack:///./src/components/popover/search.js","webpack:///./src/components/popover/styles.styl","webpack:///./src/components/private-badge/index.js","webpack:///./src/components/private-badge/styles.styl","webpack:///./src/components/profile-list/index.js","webpack:///./src/components/profile-list/profile-list.styl","webpack:///./src/components/project/add-project-to-collection-pop.js","webpack:///./src/components/project/embed.js","webpack:///./src/components/project/embed.styl","webpack:///./src/components/project/featured-project-options-pop.js","webpack:///./src/components/project/featured-project.js","webpack:///./src/components/project/featured-project.styl","webpack:///./src/components/project/popover.styl","webpack:///./src/components/project/project-actions.js","webpack:///./src/components/project/project-embed.js","webpack:///./src/components/project/project-embed.styl","webpack:///./src/components/project/project-item-small.js","webpack:///./src/components/project/project-item.js","webpack:///./src/components/project/project-item.styl","webpack:///./src/components/project/project-options-pop.js","webpack:///./src/components/project/project-result-item.js","webpack:///./src/components/project/project-result-item.styl","webpack:///./src/components/questions/index.js","webpack:///./src/components/questions/item.js","webpack:///./src/components/questions/questions.styl","webpack:///./src/components/recent-projects/index.js","webpack:///./src/components/recent-projects/styles.styl","webpack:///./src/components/related-projects/index.js","webpack:///./src/components/related-projects/styles.styl","webpack:///./src/components/report-abuse-pop/index.js","webpack:///./src/components/report-abuse-pop/styles.styl","webpack:///./src/components/search-form/autocomplete.js","webpack:///./src/components/search-form/autocomplete.styl","webpack:///./src/components/search-form/index.js","webpack:///./src/components/search-form/search-form.styl","webpack:///./src/components/search-result-cover-bar/index.js","webpack:///./src/components/search-result-cover-bar/search-result-cover-bar.styl","webpack:///./src/components/search-results/index.js","webpack:///./src/components/search-results/search-results.styl","webpack:///./src/components/search/starter-kit-result.js","webpack:///./src/components/search/starter-kit-result.styl","webpack:///./src/components/sign-in-pop/index.js","webpack:///./src/components/sign-in-pop/styles.styl","webpack:///./src/components/sign-in/styles.styl","webpack:///./src/components/sign-in/two-factor-form.js","webpack:///./src/components/team-analytics/index.js","webpack:///./src/components/team-analytics/styles.styl","webpack:///./src/components/team-analytics/team-analytics-activity.js","webpack:///./src/components/team-analytics/team-analytics-project-details.js","webpack:///./src/components/team-analytics/team-analytics-project-pop.js","webpack:///./src/components/team-analytics/team-analytics-referrers.js","webpack:///./src/components/team-analytics/team-analytics-summary.js","webpack:///./src/components/team-analytics/team-analytics-time-pop.js","webpack:///./src/components/team-users/add-team-user.js","webpack:///./src/components/team-users/index.js","webpack:///./src/components/team-users/styles.styl","webpack:///./src/components/team-users/team-user-info.js","webpack:///./src/components/team/add-team-project-pop.js","webpack:///./src/components/team/delete-team-pop.js","webpack:///./src/components/team/team-item.js","webpack:///./src/components/team/team-item.styl","webpack:///./src/components/text/heading.js","webpack:///./src/components/text/heading.styl","webpack:///./src/components/text/markdown.js","webpack:///./src/components/text/markdown.styl","webpack:///./src/components/text/text.js","webpack:///./src/components/text/text.styl","webpack:///./src/components/thanks/index.js","webpack:///./src/components/thanks/thanks.styl","webpack:///./src/components/tooltips/tooltip-container.js","webpack:///./src/components/tooltips/tooltip.styl","webpack:///./src/components/user-options-pop/index.js","webpack:///./src/components/user-options-pop/styles.styl","webpack:///./src/components/user/user-item.js","webpack:///./src/components/user/user-item.styl","webpack:///./src/components/verified-badge/index.js","webpack:///./src/components/verified-badge/styles.styl","webpack:///./src/components/visibility-container/index.js","webpack:///./src/components/whitelisted-domain/index.js","webpack:///./src/components/whitelisted-domain/styles.styl","webpack:///./src/hooks/use-debounced-value.js","webpack:///./src/hooks/use-unique-id.js","webpack:///./src/models/collection.js","webpack:///./src/models/project.js","webpack:///./src/models/team.js","webpack:///./src/models/user.js","webpack:///./src/models/words.js","webpack:///./src/polyfills.js","webpack:///./src/presenters/featured-collections.js","webpack:///./src/presenters/featured-embed.js","webpack:///./src/presenters/featured.js","webpack:///./src/presenters/overlays/overlay-video.js","webpack:///./src/presenters/pages/category.js","webpack:///./src/presenters/pages/collection.js","webpack:///./src/presenters/pages/error.js","webpack:///./src/presenters/pages/error.styl","webpack:///./src/presenters/pages/index.js","webpack:///./src/presenters/pages/join-team.js","webpack:///./src/presenters/pages/login.js","webpack:///./src/presenters/pages/project.js","webpack:///./src/presenters/pages/project.styl","webpack:///./src/presenters/pages/questions.js","webpack:///./src/presenters/pages/reset-password.js","webpack:///./src/presenters/pages/reset-password.styl","webpack:///./src/presenters/pages/router.js","webpack:///./src/presenters/pages/search.js","webpack:///./src/presenters/pages/secret.js","webpack:///./src/presenters/pages/secret.styl","webpack:///./src/presenters/pages/signin.js","webpack:///./src/presenters/pages/signin.styl","webpack:///./src/presenters/pages/team-or-user.js","webpack:///./src/presenters/pages/team.js","webpack:///./src/presenters/pages/team.styl","webpack:///./src/presenters/pages/two-factor-code.js","webpack:///./src/presenters/pages/user.js","webpack:///./src/presenters/pages/user.styl","webpack:///./src/presenters/pages/vscode-auth.js","webpack:///./src/presenters/pages/vscode-auth.styl","webpack:///./src/state/api.js","webpack:///./src/state/collection.js","webpack:///./src/state/current-user.js","webpack:///./src/state/dev-toggles.js","webpack:///./src/state/error-handlers.js","webpack:///./src/state/local-storage.js","webpack:///./src/state/notifications.js","webpack:///./src/state/offline-notice.js","webpack:///./src/state/project-options.js","webpack:///./src/state/project.js","webpack:///./src/state/search.js","webpack:///./src/state/segment-analytics.js","webpack:///./src/state/team.js","webpack:///./src/state/uploader.js","webpack:///./src/state/user-prefs.js","webpack:///./src/state/user.js","webpack:///./src/utils/abuse-reporting.js","webpack:///./src/utils/assets.js","webpack:///./src/utils/color.js","webpack:///./src/utils/models.js","webpack:///./src/utils/progress-promise.js","webpack:///./src/utils/s3-uploader.js","webpack:///./src/utils/sentry.js"],"sourcesContent":["const Sentry = require('@sentry/minimal');\n\n/// Api helper functions\n\nconst joinIdsToQueryString = (ids) => {\n  return ids.map((id) => `id=${id}`).join('&');\n};\n\nconst getFromApi = async (api, url) => {\n  const { data } = await api.get(url);\n  return data;\n};\n\nconst getSingleItem = async (api, url, key) => {\n  // The api is case insensitive when getting by url/login\n  // but it'll return an object keyed using the correct case\n  // so do a case insensitive lookup in the dict it returns\n  const data = await getFromApi(api, url);\n  if (data[key]) {\n    return data[key];\n  }\n  const realKey = Object.keys(data).find((dataKey) => dataKey.toLowerCase() === key.toLowerCase());\n  if (realKey) {\n    return data[realKey];\n  }\n  return null;\n};\n\nconst getAllPages = async (api, url) => {\n  let hasMore = true;\n  let results = [];\n  while (hasMore) {\n    const data = await getFromApi(api, url);\n    results.push(...data.items);\n    if (data.hasMore && !data.lastOrderValue) {\n      Sentry.captureBreadcrumb(`Broken api pagination hasMore=${data.hasMore} lastOrderValue=${data.lastOrderValue}`);\n      Sentry.captureMessage(`The rest api responded with hasMore but no lastOrderValue for url ${url}`);\n      return results;\n    }\n    hasMore = data.hasMore;\n    url = data.nextPage;\n  }\n  return results;\n};\n\n// like Promise.all but with an object instead of an array, e.g.\n// `let { user, projects } = await allByKeys({ user: getUser(id), projects: getProjects(id) })`\nconst allByKeys = async (objOfPromises) => {\n  const keys = Object.keys(objOfPromises);\n  const values = await Promise.all(Object.values(objOfPromises));\n  return keys.reduce((result, key, i) => {\n    result[key] = values[i];\n    return result;\n  }, {});\n};\n\nmodule.exports = {\n  joinIdsToQueryString,\n  getFromApi,\n  getSingleItem,\n  getAllPages,\n  allByKeys,\n};\n","module.exports = function convertPlugin(option, dayjsClass, dayjsFactory) {\n  dayjsFactory.convert = (amount, from, to) => {\n    const now = dayjsFactory();\n    return now.add(amount, from).diff(now, to);\n  };\n};","const productionDomains = ['community', 'community-staging'];\nconst onProductionSite = (projectDomain, apiEnvironment) => productionDomains.includes(projectDomain) && apiEnvironment === 'production';\n\nconst filterSecrets = function(jsonEvent) {\n  const secrets = ['\\\\w+Token', 'email', 'password'];\n  secrets.forEach((secret) => {\n    const regexp = new RegExp(`(\"${secret}\":\\\\s*)\"[^\"]+\"`, 'g');\n    jsonEvent = jsonEvent.replace(regexp, '$1\"****\"');\n  });\n  return jsonEvent;\n};\n\nconst ignoreErrors = ['Network Error', 'timeout', 'status code 401'];\n\nconst beforeSend = function(projectDomain, apiEnv, event) {\n  if (!onProductionSite(projectDomain, apiEnv)) {\n    return null;\n  }\n\n  const json = filterSecrets(JSON.stringify(event));\n  return JSON.parse(json);\n};\n\nconst beforeBreadcrumb = function(breadcrumb) {\n  if (breadcrumb.category === 'console' && breadcrumb.data) {\n    const extras = JSON.stringify(breadcrumb.data.extra);\n    const filteredExtras = filterSecrets(extras);\n    breadcrumb.data.extra = filteredExtras; // eslint-disable-line no-param-reassign\n  }\n  if (typeof breadcrumb.message === 'string') {\n    breadcrumb.message = filterSecrets(breadcrumb.message);\n  }\n  return breadcrumb;\n};\n\nmodule.exports = {\n  ignoreErrors,\n  beforeSend,\n  beforeBreadcrumb,\n};\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { LiveAnnouncer } from 'react-aria-live';\n\nimport { AnalyticsContext } from 'State/segment-analytics';\nimport { CurrentUserProvider } from 'State/current-user';\nimport { APIContextProvider } from 'State/api';\nimport { LocalStorageProvider } from 'State/local-storage';\nimport { ProjectContextProvider } from 'State/project';\nimport { CollectionContextProvider } from 'State/collection';\nimport { NotificationsProvider } from 'State/notifications';\nimport OfflineNotice from 'State/offline-notice';\nimport SuperUserBanner from 'Components/banners/super-user';\nimport ErrorBoundary from 'Components/error-boundary';\n\nimport Router from './presenters/pages/router';\n\nconst App = () => (\n  <ErrorBoundary fallback=\"Something went very wrong, try refreshing?\">\n    <BrowserRouter>\n      <NotificationsProvider>\n        <LocalStorageProvider>\n          <LiveAnnouncer>\n            <AnalyticsContext context={{ groupId: '0' }}>\n              <CurrentUserProvider>\n                <APIContextProvider>\n                  <ProjectContextProvider>\n                    <CollectionContextProvider>\n                      <>\n                        <SuperUserBanner />\n                        <OfflineNotice />\n                        <Router />\n                      </>\n                    </CollectionContextProvider>\n                  </ProjectContextProvider>\n                </APIContextProvider>\n              </CurrentUserProvider>\n            </AnalyticsContext>\n          </LiveAnnouncer>\n        </LocalStorageProvider>\n      </NotificationsProvider>\n    </BrowserRouter>\n  </ErrorBoundary>\n);\n\nexport default App;\n","/* globals EDITOR_URL */\n\nimport './polyfills';\n\n// Init our dayjs plugins\nimport dayjs from 'dayjs';\nimport relativeTimePlugin from 'dayjs/plugin/relativeTime';\n\nimport React from 'react';\nimport { render } from 'react-dom';\nimport convertPlugin from '../shared/dayjs-convert';\nimport { captureException, configureScope } from './utils/sentry';\nimport App from './app';\n\ndayjs.extend(relativeTimePlugin);\ndayjs.extend(convertPlugin);\n\n// This function is used in index.ejs to set up the app\nwindow.bootstrap = () => {\n  if (location.hash.startsWith('#!/')) {\n    // eslint-disable-line no-restricted-globals\n    window.location.replace(EDITOR_URL + window.location.hash);\n    return;\n  }\n  // Mark that bootstrapping has occurred,\n  // ..and more importantly, use this as an excuse\n  // to call into Sentry so that its initialization\n  // happens early in our JS bundle.\n  configureScope((scope) => {\n    scope.setTag('bootstrap', 'true');\n  });\n\n  const dom = document.createElement('div');\n  document.body.appendChild(dom);\n  render(<App />, dom);\n};\n\n// Make sure react exists because that's an issue that is happening\ntry {\n  if (!React.Component) {\n    throw new Error('React.Component is not defined?');\n  }\n} catch (error) {\n  captureException(error);\n}\n","import React, { useState } from 'react';\n\nimport Text from 'Components/text/text';\nimport Emoji from 'Components/images/emoji';\nimport Button from 'Components/buttons/button';\nimport { Overlay, OverlaySection, OverlayTitle, OverlayBackground } from 'Components/overlays';\nimport PopoverContainer from 'Components/popover/container';\nimport { useCurrentUser } from 'State/current-user';\n\nimport PasswordSettings from './password-settings';\nimport TwoFactorSettings from './two-factor-settings';\nimport styles from './styles.styl';\n\nconst AccountSettingsTab = ({ name, children, currentPage, setPage }) => (\n  <Button size=\"small\" onClick={() => setPage(name)} active={name === currentPage}>\n    {children}\n  </Button>\n);\n\nconst AccountSettingsOverlay = () => {\n  const { currentUser } = useCurrentUser();\n\n  const [page, setPage] = useState('password');\n\n  const primaryEmail = currentUser.emails.find((email) => email.primary);\n\n  return (\n    <Overlay className=\"account-settings-overlay\">\n      <OverlaySection type=\"info\">\n        <OverlayTitle>\n          Account Settings <Emoji name=\"key\" />\n        </OverlayTitle>\n      </OverlaySection>\n\n      <OverlaySection type=\"actions\">\n        <div className={styles.accountSettings}>\n          <div className={styles.accountSettingsActions}>\n            <AccountSettingsTab name=\"password\" currentPage={page} setPage={setPage}>\n              Password\n            </AccountSettingsTab>\n            <AccountSettingsTab name=\"2fa\" currentPage={page} setPage={setPage}>\n              Two-Factor Authentication\n            </AccountSettingsTab>\n          </div>\n          <div className={styles.accountSettingsContent}>\n            {page === 'password' ? <PasswordSettings /> : null}\n            {page === '2fa' ? <TwoFactorSettings /> : null}\n          </div>\n        </div>\n      </OverlaySection>\n      {!!primaryEmail && (\n        <OverlaySection type=\"info\">\n          <Text>\n            Email notifications are sent to <b>{primaryEmail.email}</b>\n          </Text>\n        </OverlaySection>\n      )}\n    </Overlay>\n  );\n};\n\nconst AccountSettingsContainer = ({ children }) => {\n  const renderOuter = ({ visible, openPopover }) => (\n    <>\n      {children(openPopover)}\n      {visible && <OverlayBackground />}\n    </>\n  );\n  return (\n    <PopoverContainer outer={renderOuter}>\n      {({ visible }) => visible ? <AccountSettingsOverlay /> : null}\n    </PopoverContainer>\n  );\n};\n\nexport default AccountSettingsContainer;\n","import React, { useState } from 'react';\n\nimport Heading from 'Components/text/heading';\nimport Button from 'Components/buttons/button';\nimport TextInput from 'Components/inputs/text-input';\nimport Notification from 'Components/notification';\nimport NewPasswordInput from 'Components/new-password-input';\nimport { useAPI } from 'State/api';\nimport { useCurrentUser } from 'State/current-user';\nimport { captureException } from 'Utils/sentry';\n\nimport styles from './styles.styl';\n\nconst ResetPassword = () => {\n  const { currentUser } = useCurrentUser();\n  const api = useAPI();\n\n  const [status, setStatus] = React.useState({});\n  const primaryEmail = currentUser.emails.find((email) => email.primary);\n  const resetPassword = async (event) => {\n    event.preventDefault();\n    setStatus({ working: true });\n    try {\n      await api.post('email/sendResetPasswordEmail', {\n        emailAddress: primaryEmail.email,\n      });\n      setStatus({ done: true });\n    } catch (error) {\n      console.error(error);\n      captureException(error);\n      setStatus({ error: true });\n    }\n  };\n\n  return (\n    <>\n      <Heading tagName=\"h2\">Reset Password</Heading>\n      <Button type=\"tertiary\" size=\"small\" disabled={status.working} onClick={resetPassword}>Send Reset Password Email</Button>\n      {status.done && <Notification type=\"success\" persistent>Sent a reset code to {primaryEmail.email}</Notification>}\n      {status.error && <Notification type=\"error\" persistent>Something went wrong, check your inbox?</Notification>}\n    </>\n  );\n};\n\nconst PasswordSettings = () => {\n  const api = useAPI();\n  const { currentUser, reload } = useCurrentUser();\n\n  const [oldPassword, setOldPassword] = useState('');\n  const [newPassword, setNewPassword] = useState(null);\n  const [passwordVersion, setPasswordVersion] = useState(1);\n\n  const [status, setStatus] = useState({});\n  const andClearState = (func) => (...args) => {\n    func(...args);\n    setStatus({});\n  };\n\n  const updatePassword = async (event) => {\n    event.preventDefault();\n    setStatus({ working: true });\n    try {\n      await api.post('user/updatePassword', {\n        oldPassword,\n        newPassword,\n      });\n      setStatus({ done: true });\n      setOldPassword('');\n      setPasswordVersion((v) => v + 1);\n      await reload();\n    } catch (error) {\n      console.error(error);\n      setStatus({ error: true });\n    }\n  };\n\n  const canSubmit = !status.working && !!newPassword && (!!oldPassword || !currentUser.passwordEnabled);\n\n  return (\n    <>\n      <Heading tagName=\"h2\">{currentUser.passwordEnabled ? 'Change Password' : 'Set Password'}</Heading>\n\n      <form className={styles.accountSettingsForm} onSubmit={updatePassword}>\n        {currentUser.passwordEnabled && (\n          <TextInput type=\"password\" labelText=\"current password\" placeholder=\"current password\" value={oldPassword} disabled={status.working} onChange={setOldPassword} />\n        )}\n\n        <NewPasswordInput key={passwordVersion} disabled={status.working} onChange={andClearState(setNewPassword)} />\n\n        <Button type=\"tertiary\" size=\"small\" disabled={!canSubmit} submit>\n          Set Password\n        </Button>\n\n        {status.done && <Notification type=\"success\" persistent>Successfully set new password</Notification>}\n        {status.error && <Notification type=\"error\" persistent>We couldn't set the password</Notification>}\n      </form>\n\n      {currentUser.passwordEnabled && <ResetPassword />}\n    </>\n  );\n};\n\nexport default PasswordSettings;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"accountSettings\":\"styles__accountSettings___3Zs7C\",\"accountSettingsActions\":\"styles__accountSettingsActions___3x86S\",\"accountSettingsContent\":\"styles__accountSettingsContent___9eCuc\",\"accountSettingsForm\":\"styles__accountSettingsForm___2YVRF\",\"backupCodes\":\"styles__backupCodes___3cYsx\",\"backupCode\":\"styles__backupCode___3IUfH\"};","import React, { useState } from 'react';\nimport QRCode from 'qrcode';\n\nimport Heading from 'Components/text/heading';\nimport Text from 'Components/text/text';\nimport TextInput from 'Components/inputs/text-input';\nimport Button from 'Components/buttons/button';\nimport Loader from 'Components/loader';\nimport Notification from 'Components/notification';\n\nimport { useAPI } from 'State/api';\nimport { useCurrentUser } from 'State/current-user';\n\nimport styles from './styles.styl';\n\nconst TwoFactorSettings = () => {\n  const { currentUser, reload } = useCurrentUser();\n  const { twoFactorEnabled } = currentUser;\n\n  const api = useAPI();\n  const [working, setWorking] = useState(false);\n  const [secret, setSecret] = useState(undefined);\n  const [code, setCode] = useState('');\n  const [done, setDone] = useState(false);\n  const [backupCodes, setBackupCodes] = useState(null);\n\n  const disableTwoFactor = async (evt) => {\n    evt.preventDefault();\n    setDone(false);\n    setWorking(true);\n    try {\n      await api.post('user/tfa/disable');\n      await reload();\n      setDone(true);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setWorking(false);\n    }\n  };\n\n  const generateSecret = async (evt) => {\n    evt.preventDefault();\n    setDone(false);\n    setWorking(true);\n    try {\n      const response = await api.post('user/tfa/generateSecret');\n      const qrcode = await QRCode.toDataURL(response.data.twoFactorKeyUri);\n      setSecret(qrcode);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setWorking(false);\n    }\n  };\n\n  const verifyCode = async (evt) => {\n    evt.preventDefault();\n    setWorking(true);\n    try {\n      await api.post('user/tfa/verifyInitialCode', { code });\n      await reload();\n      setSecret(undefined);\n      setCode('');\n      setDone(true);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setWorking(false);\n    }\n  };\n\n  const getBackupCodes = async () => {\n    if (twoFactorEnabled) {\n      const { data } = await api.get(`users/${currentUser.id}/tfa/backupCodes?cache=${Date.now()}`);\n      setBackupCodes(data.backupCodes);\n    } else {\n      setBackupCodes(null);\n    }\n  };\n  React.useEffect(() => {\n    getBackupCodes();\n  }, [currentUser.id, twoFactorEnabled]);\n\n  const resetBackupCodes = async () => {\n    setBackupCodes(null);\n    await api.post('user/tfa/resetBackupCodes');\n    await getBackupCodes();\n  };\n\n  return (\n    <>\n      <Heading tagName=\"h2\">Two-Factor Authentication</Heading>\n      <Text>Protect your account with an additional layer of security.</Text>\n      {twoFactorEnabled ? (\n        <>\n          {done && <Notification type=\"success\" persistent>Successfully enabled two-factor authentication</Notification>}\n          <Button type=\"tertiary\" size=\"small\" disabled={working} onClick={disableTwoFactor}>Disable Authenticator App</Button>\n          <Heading tagName=\"h3\">Backup Codes</Heading>\n          <Text>Keep these somewhere safe in case you lose your authenticator</Text>\n          {backupCodes ? (\n            <>\n              {backupCodes.length > 0 && (\n                <ul className={styles.backupCodes}>\n                  {backupCodes.map((backupCode) => (\n                    <li className={styles.backupCode} key={backupCode}>\n                      {backupCode}\n                    </li>\n                  ))}\n                </ul>\n              )}\n              <Button type=\"tertiary\" size=\"small\" onClick={resetBackupCodes}>Generate New Codes</Button>\n            </>\n          ) : <Loader />}\n        </>\n      ) : (\n        <>\n          {done && <Notification type=\"success\" persistent>Successfully disabled two-factor authentication</Notification>}\n          <Button type=\"tertiary\" size=\"small\" disabled={!!secret || working} onClick={generateSecret}>Enable Authenticator App</Button>\n          {secret &&\n            <form className={styles.accountSettingsForm} onSubmit={verifyCode}>\n              <img alt=\"QR Code\" src={secret} />\n              <TextInput labelText=\"Enter Authenticator Code\" placeholder=\"Enter Authenticator Code\" maxLength={6} value={code} disabled={working} onChange={setCode} />\n              <Button type=\"tertiary\" size=\"small\" disabled={code.length < 6 || working} submit>Verify Initial Code</Button>\n            </form>\n          }\n        </>\n      )}\n    </>\n  );\n};\n\nexport default TwoFactorSettings;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slideUp\":\"animations__slideUp___2dAEU\",\"slideDown\":\"animations__slideDown___3pKDT\"};","import React, { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport styles from './animations.styl';\n\nconst types = ['slideDown', 'slideUp'];\n\n/* Usage:\n<AnimationContainer type=\"slideDown\" onAnimationEnd={(id) => deleteProject(id)}>\n  {(animateOutAndDeleteProject) => (\n    <Button onClick={() => animateOutAndDeleteProject(id)}>Delete Project</Button>\n  )}\n</AnimationContainer>\n*/\nconst AnimationContainer = ({ type, children, className, onAnimationEnd }) => {\n  const [state, setState] = useState({ active: false, handlerArgs: [] });\n  const ref = useRef();\n\n  return (\n    <div\n      ref={ref}\n      className={classnames(className, state.active && styles[type])}\n      onAnimationEnd={(event) => {\n        if (event.target === ref.current) {\n          onAnimationEnd(...state.handlerArgs);\n        }\n      }}\n    >\n      {children((...handlerArgs) => setState({ active: true, handlerArgs }))}\n    </div>\n  );\n};\n\nAnimationContainer.propTypes = {\n  type: PropTypes.oneOf(types).isRequired,\n  children: PropTypes.func.isRequired,\n  onAnimationEnd: PropTypes.func.isRequired,\n  className: PropTypes.string,\n};\n\nAnimationContainer.defaultProps = {\n  className: '',\n};\n\nexport default AnimationContainer;\n","import React from 'react';\n\nexport default () => <span aria-hidden=\"true\">→</span>;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\n\nimport styles from './badge.styl';\n\nconst cx = classNames.bind(styles);\n\nexport const TYPES = ['success', 'warning', 'error', 'private'];\n\n/**\n * Badge Component\n */\nconst Badge = ({ type, children }) => {\n  const className = cx({ badge: true, [type]: true });\n  return <div className={className}>{children}</div>;\n};\n\nBadge.propTypes = {\n  /** element(s) to display in the tag */\n  children: PropTypes.node.isRequired,\n  type: PropTypes.oneOf(TYPES),\n};\n\nBadge.defaultProps = {\n  type: null,\n};\n\nexport default Badge;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"badge\":\"badge__badge___9Jjg-\",\"success\":\"badge__success___1ahl_\",\"warning\":\"badge__warning___1SXSL\",\"error\":\"badge__error___20vRu\",\"private\":\"badge__private___-sncy\"};","import React from 'react';\nimport { useCurrentUser } from 'State/current-user';\nimport Button from 'Components/buttons/button';\nimport styles from './super-user.styl';\n\nconst SuperUserBanner = () => {\n  const { superUserHelpers } = useCurrentUser();\n  const { superUserFeature, toggleSuperUser } = superUserHelpers;\n\n  if (!superUserFeature) {\n    return null;\n  }\n\n  const expirationDate = superUserFeature && new Date(superUserFeature.expiresAt).toLocaleString();\n  const displayText = `SUPER USER MODE ENABLED UNTIL: ${expirationDate} `;\n  return (\n    <div className={styles.container}>\n      {displayText}\n      <Button onClick={toggleSuperUser}>Click to disable</Button>\n    </div>\n  );\n};\n\nexport default SuperUserBanner;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"super-user__container___2Z0dk\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport Emoji from 'Components/images/emoji';\nimport Link from 'Components/link';\nimport styles from './button.styl';\n\nconst cx = classNames.bind(styles);\n\nexport const TYPES = ['tertiary', 'cta', 'dangerZone', 'dropDown'];\nexport const SIZES = ['small'];\n\n/**\n * Button Component\n */\n\nconst Button = React.forwardRef(({\n  onClick, href, disabled, type, size, submit, matchBackground, hover, children, active, decorative, newTab, image, imagePosition, emoji,\n}, ref) => {\n  const className = cx({\n    btn: true,\n    cta: type === 'cta',\n    small: size === 'small' || type === 'dangerZone', // we want to demphasize dangerous actions, so we make them small\n    tertiary: ['tertiary', 'dangerZone'].includes(type),\n    dangerZone: type === 'dangerZone',\n    unstyled: type === 'dropDown',\n    hasImage: emoji || image,\n    hasNarrowEmoji: ['balloon', 'index', 'policeOfficer'].includes(emoji),\n    hasSunglassesEmoji: emoji === 'sunglasses',\n    padLeft: (image || emoji) && imagePosition === 'left',\n    matchBackground: matchBackground === true,\n    active,\n    hover,\n    decorative,\n  });\n\n  const content = (\n    <>\n      {children}\n      {emoji && <ButtonEmoji emoji={emoji} position={imagePosition} />}\n      {image && <ButtonImage image={image} position={imagePosition} />}\n    </>\n  );\n\n  if (href) {\n    let targetProps = {};\n    if (newTab) {\n      targetProps = {\n        target: '_blank',\n        rel: 'noopener noreferrer',\n      };\n    }\n    return (\n      <Link to={href} ref={ref} onClick={onClick} className={className} {...targetProps}>\n        {content}\n      </Link>\n    );\n  }\n\n  if (decorative) {\n    return (\n      <span className={className} disabled={disabled}>\n        {content}\n      </span>\n    );\n  }\n\n  return (\n    <button ref={ref} onClick={onClick} className={className} disabled={disabled} type={submit ? 'submit' : 'button'}>\n      {content}\n    </button>\n  );\n});\n\nButton.propTypes = {\n  /** element(s) to display in the button */\n  children: PropTypes.node.isRequired,\n  /** callback when button clicked */\n  onClick: (props, propName, componentName) => {\n    if (!props.onClick && !props.href && !props.decorative && !props.submit) {\n      return new Error(`One of props 'onClick', 'href', 'decorative', 'submit' was not specified in '${componentName}'.`);\n    }\n    return null;\n  },\n  /** OR link when button clicked */\n  href: (props, propName, componentName) => {\n    if (!props.onClick && !props.href && !props.decorative && !props.submit) {\n      return new Error(`One of props 'href', 'onClick', 'decorative', 'submit' was not specified in '${componentName}'.`);\n    }\n    return null;\n  },\n  /** OR its decorative, because its inside a larger button/link */\n  decorative: PropTypes.bool,\n  /** button disabled */\n  disabled: PropTypes.bool,\n  /** type of button */\n  type: PropTypes.oneOf(TYPES),\n  /** size of button */\n  size: PropTypes.oneOf(SIZES),\n  /** button submits a form */\n  submit: PropTypes.bool,\n  /** whether or not the button's hover state should be active */\n  hover: PropTypes.bool,\n  /** whether or not the button should match its background */\n  matchBackground: PropTypes.bool,\n  /** whether the button is active or not */\n  active: PropTypes.bool,\n  /** whether the link opens in a new tab or the same window */\n  newTab: PropTypes.bool,\n  /** an image node to display within the button */\n  image: PropTypes.node,\n  /** Whether Emoji is to left or right of other content */\n  imagePosition: PropTypes.oneOf(['left', 'right']),\n  /** emoji name */\n  emoji: PropTypes.string,\n};\n\nButton.defaultProps = {\n  onClick: null,\n  href: null,\n  disabled: false,\n  type: null,\n  size: null,\n  submit: false,\n  hover: false,\n  matchBackground: false,\n  active: false,\n  decorative: false,\n  newTab: false,\n  image: null,\n  imagePosition: 'right',\n  emoji: null,\n};\n\nconst ButtonImage = ({ image, position, up1 }) => {\n  const className = cx({\n    imageContainer: true,\n    alignLeft: position === 'left',\n    up1,\n  });\n\n  return <span className={className}>{image}</span>;\n};\n\nButtonImage.propTypes = {\n  image: PropTypes.node.isRequired,\n  position: PropTypes.oneOf(['right', 'left']).isRequired,\n  up1: PropTypes.bool,\n};\n\nButtonImage.defaultProps = {\n  up1: false,\n};\n\nconst ButtonEmoji = ({ emoji, ...props }) => (\n  <ButtonImage image={<Emoji name={emoji} />} up1={['bentoBox', 'bomb', 'clapper', 'herb', 'dogFace', 'framedPicture'].includes(emoji)} {...props} />\n);\n\nButtonEmoji.propTypes = {\n  emoji: PropTypes.string.isRequired,\n};\n\nexport default Button;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"button__btn___1ah9Q\",\"matchBackground\":\"button__matchBackground___2_I_h\",\"hasImage\":\"button__hasImage___3TOxb\",\"padLeft\":\"button__padLeft___TQRZ5\",\"hasSunglassesEmoji\":\"button__hasSunglassesEmoji___1rMsg\",\"imageContainer\":\"button__imageContainer___3mHPw\",\"dangerZone\":\"button__dangerZone___nVHk8\",\"active\":\"button__active___SZtfB\",\"cta\":\"button__cta___bknWm\",\"small\":\"button__small___2n4Dl\",\"alignLeft\":\"button__alignLeft___3Dh5V\",\"hasNarrowEmoji\":\"button__hasNarrowEmoji___33QMm\",\"tertiary\":\"button__tertiary___2uHa4\",\"unstyled\":\"button__unstyled___4HScI\",\"transparentButton\":\"button__transparentButton___i5Rew\",\"decorative\":\"button__decorative___3Qq2H\",\"up1\":\"button__up1___2PEkP\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport useUniqueId from '../../hooks/use-unique-id';\n\nimport styles from './button.styl';\nimport checkboxStyles from './checkbox-button.styl';\n\nconst CheckboxButton = React.forwardRef(({ children, onChange, value, matchBackground, type }, ref) => {\n  const id = useUniqueId();\n  const className = classNames(\n    { [styles.matchBackground]: matchBackground, [styles.tertiary]: type === 'tertiary' },\n    styles.btn,\n    styles.small,\n    checkboxStyles.label,\n  );\n  return (\n    <label className={className} htmlFor={id}>\n      <input id={id} className={checkboxStyles.input} type=\"checkbox\" checked={value} onChange={(evt) => onChange(evt.target.checked)} ref={ref} />\n      {children}\n    </label>\n  );\n});\n\nCheckboxButton.propTypes = {\n  children: PropTypes.node.isRequired,\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.bool.isRequired,\n  matchBackground: PropTypes.bool,\n  type: PropTypes.string,\n};\n\nCheckboxButton.defaultProps = {\n  matchBackground: false,\n  type: null,\n};\n\nexport default CheckboxButton;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"checkbox-button__label___3bhNC\",\"input\":\"checkbox-button__input___18qWk\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './segmented-buttons.styl';\nimport Button from './button';\n\nconst SegmentedButtons = ({ value, buttons, onChange }) => (\n  <div className={styles.segmentedButtons}>\n    {buttons.map((button) => (\n      <Button key={button.name} type=\"tertiary\" active={button.name === value} onClick={() => onChange(button.name)}>\n        {button.contents}\n      </Button>\n    ))}\n  </div>\n);\n\nSegmentedButtons.propTypes = {\n  buttons: PropTypes.arrayOf(\n    PropTypes.shape({\n      /** name: the filter name, passed back to onChange */\n      name: PropTypes.string.isRequired,\n      contents: PropTypes.node.isRequired,\n    }),\n  ).isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default SegmentedButtons;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"segmentedButtons\":\"segmented-buttons__segmentedButtons___3ZU35\",\"active\":\"segmented-buttons__active___30ccn\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from 'Components/buttons/button';\n\n/* global FACEBOOK_CLIENT_ID, GITHUB_CLIENT_ID, APP_URL, API_URL */\n\nfunction facebookAuthLink() {\n  const params = new URLSearchParams();\n  params.append('client_id', FACEBOOK_CLIENT_ID);\n  params.append('scope', 'email');\n  params.append('redirect_uri', `${APP_URL}/login/facebook`);\n  return `https://www.facebook.com/v2.9/dialog/oauth?${params}`;\n}\n\nfunction githubAuthLink() {\n  const params = new URLSearchParams();\n  params.append('client_id', GITHUB_CLIENT_ID);\n  params.append('scope', 'user:email');\n  params.append('redirect_uri', `${APP_URL}/login/github`);\n  return `https://github.com/login/oauth/authorize?${params}`;\n}\n\nfunction googleAuthLink() {\n  const params = new URLSearchParams();\n  const callbackURL = `${APP_URL}/login/google`;\n  params.append('callbackURL', callbackURL);\n  return `${API_URL}/auth/google?${params}`;\n}\n\nfunction slackAuthLink() {\n  const params = new URLSearchParams();\n  const callbackURL = `${APP_URL}/login/slack`;\n  params.append('callbackURL', callbackURL);\n  return `${API_URL}/auth/slack?${params}`;\n}\n\nconst companies = {\n  facebook: {\n    name: 'Facebook',\n    emoji: 'facebook',\n    href: facebookAuthLink(),\n  },\n  github: {\n    name: 'GitHub',\n    emoji: 'octocat',\n    href: githubAuthLink(),\n  },\n  google: {\n    name: 'Google',\n    emoji: 'google',\n    href: googleAuthLink(),\n  },\n  slack: {\n    name: 'Slack',\n    emoji: 'slack',\n    href: slackAuthLink(),\n  },\n};\n\nconst SignInButton = ({ company, onClick }) => {\n  const { name, emoji, href } = companies[company];\n\n  return (\n    <div style={{ marginBottom: '10px' }}>\n      <Button href={href} onClick={onClick} size=\"small\" emoji={emoji}>\n        Sign in with {name}\n      </Button>\n    </div>\n  );\n};\n\nSignInButton.propTypes = {\n  company: PropTypes.oneOf(Object.keys(companies)).isRequired,\n};\n\nexport default SignInButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TrackedButton from 'Components/buttons/tracked-button';\n\nconst TrackedButtonGroup = ({ actions }) =>\n  Object.entries(actions)\n    .filter(([, onClick]) => onClick)\n    .map(([label, onClick]) => (\n      <TrackedButton key={label} size=\"small\" type=\"tertiary\" label={label} onClick={onClick}>\n        {label}\n      </TrackedButton>\n    ));\n\nTrackedButtonGroup.propTypes = {\n  actions: PropTypes.object.isRequired,\n};\n\nexport default TrackedButtonGroup;\n","import React from 'react';\nimport Button from 'Components/buttons/button';\nimport { useTrackedFunc } from 'State/segment-analytics';\n\nconst TrackedButton = ({ children, label, onClick, ...props }) => {\n  const trackedOnClick = useTrackedFunc(onClick, label);\n  return (\n    <Button {...props} onClick={trackedOnClick}>\n      {children}\n    </Button>\n  );\n};\n\nexport default TrackedButton;\n","import React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport styles from './button.styl';\n\n/**\nTransparent buttons are useful for making a whole container clickable, without breaking accessibility.\nIf you're using this for an icon button, be sure to also include an accessible label.\n*/\n\nconst TransparentButton = forwardRef(({ children, onClick, className }, ref) => (\n  <button type=\"button\" onClick={onClick} className={classnames(styles.transparentButton, className)} ref={ref}>\n    {children}\n  </button>\n));\n\nTransparentButton.propTypes = {\n  children: PropTypes.node.isRequired,\n  onClick: PropTypes.func.isRequired,\n  className: PropTypes.string,\n};\n\nTransparentButton.defaultProps = {\n  className: '',\n};\n\nexport default TransparentButton;\n","import React, { useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { partition, uniqBy } from 'lodash';\n\nimport { getAllPages } from 'Shared/api';\nimport { PopoverWithButton, PopoverDialog, PopoverSearch, PopoverInfo, InfoDescription } from 'Components/popover';\nimport Emoji from 'Components/images/emoji';\nimport ProjectResultItem from 'Components/project/project-result-item';\nimport { AddProjectToCollectionMsg } from 'Components/notification';\nimport { useTrackedFunc } from 'State/segment-analytics';\nimport { createAPIHook } from 'State/api';\nimport { useCurrentUser } from 'State/current-user';\nimport { useAlgoliaSearch } from 'State/search';\nimport { useNotifications } from 'State/notifications';\nimport useDebouncedValue from 'Hooks/use-debounced-value';\n\nfunction parseQuery(query) {\n  query = query.trim();\n  try {\n    const queryUrl = new URL(query);\n    if (queryUrl.href.includes('me') && !queryUrl.href.includes('~')) {\n      // https://add-to-alexa.glitch.me/\n      return queryUrl.hostname.substring(0, queryUrl.hostname.indexOf('.'));\n    }\n    // https://glitch.com/~add-to-alexa\n    return queryUrl.pathname.substring(queryUrl.pathname.indexOf('~') + 1);\n  } catch (e) {\n    return query;\n  }\n}\n\nconst useTeamProjects = createAPIHook(async (api, teamId) => {\n  if (teamId > 0) {\n    const projects = await getAllPages(api, `/v1/teams/by/id/projects?limit=100&orderKey=updatedAt&orderDirection=ASC&id=${teamId}`);\n    return projects;\n  }\n  return null;\n});\n\nfunction AddCollectionProjectPop({ collection, togglePopover, addProjectToCollection }) {\n  const [query, setQuery] = useState('');\n  const parsedQuery = parseQuery(query);\n  const debouncedQuery = useDebouncedValue(query, 200);\n  const { topResults, project: retrievedProjects, status } = useAlgoliaSearch(\n    debouncedQuery,\n    {\n      notSafeForKids: false,\n      filterTypes: ['project'],\n    },\n    [],\n  );\n\n  const { value: teamProjects } = useTeamProjects(collection.teamId);\n  const { currentUser } = useCurrentUser();\n  const initialProjects = teamProjects || currentUser.projects;\n\n  const { createNotification } = useNotifications();\n\n  const onClick = useTrackedFunc(\n    async (project) => {\n      togglePopover();\n      // add project to page if successful & show notification\n      await addProjectToCollection(project, collection);\n      createNotification(<AddProjectToCollectionMsg projectDomain={project.domain} />, { type: 'success' });\n    },\n    'Project Added to Collection',\n    { origin: 'Add Project collection' },\n  );\n\n  /* eslint-disable no-shadow */\n  const { visibleProjects, excludingExactMatch } = useMemo(\n    () => {\n      const projects = parsedQuery.length ? uniqBy(topResults.concat(retrievedProjects), (p) => p.id) : initialProjects;\n\n      const idsOfProjectsInCollection = new Set(collection.projects.map((p) => p.id));\n      const [projectsAlreadyInCollection, newProjectsToAdd] = partition(projects, (project) => idsOfProjectsInCollection.has(project.id));\n\n      const visibleProjects = newProjectsToAdd.slice(0, 10);\n      const excludingExactMatch = projectsAlreadyInCollection.some((p) => p.domain === parsedQuery);\n      return { visibleProjects, excludingExactMatch };\n    },\n    [parsedQuery, initialProjects, topResults, retrievedProjects],\n  );\n\n  return (\n    <PopoverDialog wide align=\"left\">\n      <PopoverSearch\n        value={query}\n        onChange={setQuery}\n        results={visibleProjects}\n        labelText=\"Project name or URL\"\n        placeholder=\"Search by project name or URL\"\n        status={status}\n        renderItem={\n          ({ item: project, active }) => <ProjectResultItem project={project} active={active} onClick={() => onClick(project)} />\n        }\n      />\n      {status === 'ready' && excludingExactMatch && (\n        <PopoverInfo>\n          <InfoDescription>\n            {parsedQuery} is already in this collection <Emoji name=\"sparkles\" />\n          </InfoDescription>\n        </PopoverInfo>\n      )}\n    </PopoverDialog>\n  );\n}\n\nAddCollectionProjectPop.propTypes = {\n  collection: PropTypes.object.isRequired,\n  addProjectToCollection: PropTypes.func.isRequired,\n  togglePopover: PropTypes.func.isRequired,\n};\n\nconst AddCollectionProject = ({ collection, addProjectToCollection }) => (\n  <PopoverWithButton buttonText=\"Add Project\">\n    {({ togglePopover }) => (\n      <AddCollectionProjectPop collection={collection} addProjectToCollection={addProjectToCollection} togglePopover={togglePopover} />\n    )}\n  </PopoverWithButton>\n);\n\nAddCollectionProject.propTypes = {\n  collection: PropTypes.object.isRequired,\n  addProjectToCollection: PropTypes.func.isRequired,\n};\n\nexport default AddCollectionProject;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Pluralize from 'react-pluralize';\nimport classnames from 'classnames';\n\nimport Markdown from 'Components/text/markdown';\nimport Button from 'Components/buttons/button';\nimport { ProfileItem } from 'Components/profile-list';\nimport { CollectionAvatar } from 'Components/images/avatar';\nimport VisibilityContainer from 'Components/visibility-container';\nimport Arrow from 'Components/arrow';\nimport { PrivateIcon } from 'Components/private-badge';\nimport { isDarkColor } from 'Models/collection';\nimport { useCollectionCurator } from 'State/collection';\n\nimport styles from './collection-item.styl';\n\nconst collectionColorStyles = (collection) => ({\n  backgroundColor: collection.coverColor,\n  border: collection.coverColor,\n});\n\nconst CollectionCurator = ({ collection }) => {\n  const { value: curator } = useCollectionCurator(collection);\n  return <ProfileItem {...curator} />;\n};\n\nconst CollectionCuratorLoader = ({ collection }) => (\n  <VisibilityContainer>\n    {({ wasEverVisible }) => (wasEverVisible ? <CollectionCurator collection={collection} /> : <ProfileItem />)}\n  </VisibilityContainer>\n);\n\nconst CollectionLink = ({ collection, children }) => (\n  <a href={`/@${collection.fullUrl}`} className={styles.smallCollectionLink}>\n    {children}\n  </a>\n);\n\nconst CollectionItemSmall = ({ collection, showCurator }) => (\n  <div className={styles.smallContainer}>\n    {showCurator && (\n      <div className={styles.curator}>\n        <CollectionCuratorLoader collection={collection} />\n      </div>\n    )}\n    <CollectionLink collection={collection}>\n      <div\n        className={classnames(styles.bubbleContainer, styles.smallNameDescriptionArea, showCurator && styles.showCurator)}\n        style={collectionColorStyles(collection)}\n      >\n        <div className={styles.nameArea}>\n          <div className={styles.collectionAvatarContainer}>\n            <CollectionAvatar collection={collection} />\n          </div>\n          <div className={styles.collectionNameWrap}>\n            <div className={styles.itemButtonWrap}>\n              <Button decorative image={collection.private ? <PrivateIcon inButton isPrivate /> : null} imagePosition=\"left\">\n                <div className={styles.collectionName}>{collection.name}</div>\n              </Button>\n            </div>\n          </div>\n        </div>\n        <div\n          className={styles.description}\n          style={{\n            color: isDarkColor(collection.coverColor) ? 'white' : '',\n          }}\n        >\n          <Markdown length={80}>{collection.description || ' '}</Markdown>\n        </div>\n      </div>\n      <div className={styles.smallProjectCount}>\n        <Pluralize count={collection.projects.length} singular=\"project\" /> <Arrow />\n      </div>\n    </CollectionLink>\n  </div>\n);\n\nCollectionItemSmall.propTypes = {\n  collection: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    coverColor: PropTypes.string.isRequired,\n    user: PropTypes.object,\n    team: PropTypes.object,\n  }).isRequired,\n  showCurator: PropTypes.bool,\n};\n\nCollectionItemSmall.defaultProps = {\n  showCurator: false,\n};\n\nexport default CollectionItemSmall;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Pluralize from 'react-pluralize';\nimport classNames from 'classnames';\n\nimport Markdown from 'Components/text/markdown';\nimport Button from 'Components/buttons/button';\nimport Text from 'Components/text/text';\nimport Emoji from 'Components/images/emoji';\nimport { ProfileItem } from 'Components/profile-list';\nimport Loader from 'Components/loader/';\nimport { CollectionLink } from 'Components/link';\nimport Row from 'Components/containers/row';\nimport ProjectItemSmall from 'Components/project/project-item-small';\nimport AnimationContainer from 'Components/animation-container';\nimport { CollectionAvatar } from 'Components/images/avatar';\nimport VisibilityContainer from 'Components/visibility-container';\nimport Arrow from 'Components/arrow';\nimport { isDarkColor } from 'Models/collection';\nimport { useCollectionProjects, useCollectionCurator } from 'State/collection';\n\nimport CollectionOptions from './collection-options-pop';\n\nimport styles from './collection-item.styl';\n\nconst collectionColorStyles = (collection) => ({\n  backgroundColor: collection.coverColor,\n  border: collection.coverColor,\n});\n\nconst ProjectsLoading = () => (\n  <div className={classNames(styles.projectsContainer, styles.empty)}>\n    <Loader />\n  </div>\n);\n\nconst CollectionProjects = ({ collection, isAuthorized }) => {\n  const { value: projects } = useCollectionProjects(collection);\n\n  if (!projects) return <ProjectsLoading />;\n\n  if (projects.length === 0 && isAuthorized) {\n    return (\n      <div className={classNames(styles.projectsContainer, styles.empty)}>\n        <Text>\n          This collection is empty – add some projects <Emoji name=\"index\" />\n        </Text>\n      </div>\n    );\n  }\n  if (projects.length === 0 && !isAuthorized) {\n    return (\n      <div className={classNames(styles.projectsContainer, styles.empty)}>\n        <Text>No projects to see in this collection just yet.</Text>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className={styles.projectsContainer}>\n        <Row className={styles.projectsList} items={projects} count={3}>\n          {(project) => <ProjectItemSmall project={project} />}\n        </Row>\n      </div>\n      <CollectionLink collection={collection} className={styles.footerLink}>\n        {`View ${projects.length >= 3 ? 'all' : ''} `}\n        <Pluralize count={projects.length} singular=\"project\" /> <Arrow />\n      </CollectionLink>\n    </>\n  );\n};\n\nconst CollectionProjectsLoader = ({ collection, isAuthorized }) => (\n  <VisibilityContainer>\n    {({ wasEverVisible }) => (wasEverVisible ? <CollectionProjects collection={collection} isAuthorized={isAuthorized} /> : <ProjectsLoading />)}\n  </VisibilityContainer>\n);\n\nconst CollectionCurator = ({ collection }) => {\n  const { value: curator } = useCollectionCurator(collection);\n  return <ProfileItem {...curator} />;\n};\n\nexport const CollectionCuratorLoader = ({ collection }) => (\n  <VisibilityContainer>\n    {({ wasEverVisible }) => (wasEverVisible ? <CollectionCurator collection={collection} /> : <ProfileItem />)}\n  </VisibilityContainer>\n);\n\nconst CollectionItem = ({ collection, deleteCollection, isAuthorized, showCurator }) => (\n  <AnimationContainer type=\"slideDown\" onAnimationEnd={deleteCollection}>\n    {(animateAndDeleteCollection) => (\n      <div className={styles.collectionItem}>\n        {(showCurator || isAuthorized) && (\n          <div className={styles.header}>\n            <div className={styles.curator}>{showCurator && <CollectionCuratorLoader collection={collection} />}</div>\n            {isAuthorized && <CollectionOptions collection={collection} deleteCollection={animateAndDeleteCollection} />}\n          </div>\n        )}\n        <CollectionLink\n          collection={collection}\n          className={classNames(styles.linkBody, { [styles.showCurator]: showCurator })}\n          style={collectionColorStyles(collection)}\n        >\n          <div className={styles.avatarContainer}>\n            <CollectionAvatar collection={collection} />\n          </div>\n          <div className={styles.nameDescriptionContainer}>\n            <div className={styles.itemButtonWrap}>\n              <Button decorative>{collection.name}</Button>\n            </div>\n            <div className={styles.description} style={{ color: isDarkColor(collection.coverColor) ? 'white' : '' }}>\n              <Markdown length={100}>{collection.description || ' '}</Markdown>\n            </div>\n          </div>\n        </CollectionLink>\n\n        <CollectionProjectsLoader collection={collection} isAuthorized={isAuthorized} />\n      </div>\n    )}\n  </AnimationContainer>\n);\n\nCollectionItem.propTypes = {\n  collection: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    coverColor: PropTypes.string.isRequired,\n  }).isRequired,\n  deleteCollection: PropTypes.func,\n  isAuthorized: PropTypes.bool,\n  showCurator: PropTypes.bool,\n};\n\nCollectionItem.defaultProps = {\n  deleteCollection: () => {},\n  isAuthorized: false,\n  showCurator: false,\n};\n\nexport default CollectionItem;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"collection-item__header____QZHO\",\"curator\":\"collection-item__curator___3URlX\",\"collectionItem\":\"collection-item__collectionItem___30Q-4\",\"linkBody\":\"collection-item__linkBody___2Vx_b\",\"showCurator\":\"collection-item__showCurator___2IPz2\",\"avatarContainer\":\"collection-item__avatarContainer___p3urz\",\"nameDescriptionContainer\":\"collection-item__nameDescriptionContainer___3-aTi\",\"itemButtonWrap\":\"collection-item__itemButtonWrap___15CEu\",\"projectsContainer\":\"collection-item__projectsContainer___2Vi2w\",\"empty\":\"collection-item__empty___3mIWV\",\"projectsList\":\"collection-item__projectsList___kPG_n\",\"footerLink\":\"collection-item__footerLink___fhplC\",\"smallContainer\":\"collection-item__smallContainer___1myYR\",\"smallCollectionLink\":\"collection-item__smallCollectionLink___2LfiZ\",\"bubbleContainer\":\"collection-item__bubbleContainer___2uo0O\",\"nameArea\":\"collection-item__nameArea___2dlyZ\",\"collectionNameWrap\":\"collection-item__collectionNameWrap___3OhsM\",\"description\":\"collection-item__description___17Pi7\",\"collectionAvatarContainer\":\"collection-item__collectionAvatarContainer___340V0\",\"smallProjectCount\":\"collection-item__smallProjectCount___-uzse\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { PopoverMenu, PopoverMenuButton, PopoverDialog, PopoverActions } from 'Components/popover';\n\nexport default function CollectionOptions({ deleteCollection, collection }) {\n  if (!deleteCollection) {\n    return null;\n  }\n  function confirmThenDelete() {\n    if (!window.confirm('Are you sure you want to delete your collection?')) {\n      return;\n    }\n    deleteCollection(collection.id);\n  }\n\n  return (\n    <PopoverMenu>\n      {() => (\n        <PopoverDialog focusOnDialog align=\"right\">\n          <PopoverActions type=\"dangerZone\">\n            <PopoverMenuButton onClick={confirmThenDelete} label=\"Delete Collection\" emoji=\"bomb\" />\n          </PopoverActions>\n        </PopoverDialog>\n      )}\n    </PopoverMenu>\n  );\n}\n\nCollectionOptions.propTypes = {\n  collection: PropTypes.object.isRequired,\n  deleteCollection: PropTypes.func,\n};\n\nCollectionOptions.defaultProps = {\n  deleteCollection: null,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Markdown from 'Components/text/markdown';\nimport { ProfileItem } from 'Components/profile-list';\nimport { ResultItem, ResultInfo, ResultName, ResultDescription } from 'Components/containers/results-list';\nimport VisibilityContainer from 'Components/visibility-container';\nimport VisuallyHidden from 'Components/containers/visually-hidden';\nimport { CollectionAvatar } from 'Components/images/avatar';\nimport { useCollectionCurator } from 'State/collection';\n\nimport styles from './collection-result-item.styl';\n\nconst ProfileItemWithData = ({ collection }) => {\n  const { value: curator } = useCollectionCurator(collection);\n  return (\n    <>\n      {curator ? (<VisuallyHidden>by</VisuallyHidden>) : null}\n      <ProfileItem {...curator} size=\"small\" />\n    </>\n  );\n};\n\nconst ProfileItemWrap = ({ collection }) => (\n  <div className={styles.profileItemWrap}>\n    <VisibilityContainer>\n      {({ wasEverVisible }) => (\n        wasEverVisible ? <ProfileItemWithData collection={collection} /> : <ProfileItem size=\"small\" />\n      )}\n    </VisibilityContainer>\n  </div>\n);\n\nconst CollectionResultItem = ({ onClick, collection, active }) => (\n  <ResultItem\n    active={active}\n    onClick={onClick}\n    href={`/@${collection.fullUrl}`}\n  >\n    <div className={styles.avatarWrap}>\n      <CollectionAvatar collection={collection} />\n    </div>\n    <ResultInfo>\n      <VisuallyHidden>Add to collection</VisuallyHidden>\n      <ResultName>{collection.name}</ResultName>\n      {collection.description.length > 0 && (\n        <ResultDescription>\n          <VisuallyHidden>with description</VisuallyHidden>\n          <Markdown renderAsPlaintext>{collection.description}</Markdown>\n        </ResultDescription>\n      )}\n      <ProfileItemWrap collection={collection} />\n    </ResultInfo>\n  </ResultItem>\n);\n\nCollectionResultItem.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  collection: PropTypes.object.isRequired,\n  active: PropTypes.bool,\n};\n\nCollectionResultItem.defaultProps = {\n  active: false,\n};\n\nexport default CollectionResultItem;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatarWrap\":\"collection-result-item__avatarWrap___3avRg\",\"profileItemWrap\":\"collection-result-item__profileItemWrap___1CC3k\"};","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Pluralize from 'react-pluralize';\nimport { partition, sampleSize } from 'lodash';\nimport classnames from 'classnames';\n\nimport { isDarkColor } from 'Models/collection';\nimport Text from 'Components/text/text';\nimport Image from 'Components/images/image';\nimport FeaturedProject from 'Components/project/featured-project';\nimport { ProfileItem } from 'Components/profile-list';\nimport ProjectsList from 'Components/containers/projects-list';\nimport CollectionNameInput from 'Components/fields/collection-name-input';\nimport AddCollectionProject from 'Components/collection/add-collection-project-pop';\nimport EditCollectionColor from 'Components/collection/edit-collection-color-pop';\nimport AuthDescription from 'Components/fields/auth-description';\nimport { CollectionAvatar } from 'Components/images/avatar';\nimport { CollectionLink } from 'Components/link';\nimport Arrow from 'Components/arrow';\nimport { useCollectionCurator } from 'State/collection';\n\nimport styles from './container.styl';\n\nconst CollectionContainer = ({ collection, showFeaturedProject, isAuthorized, preview, funcs }) => {\n  const { value: curator } = useCollectionCurator(collection);\n  const [previewProjects, setPreviewProjects] = useState(sampleSize(collection.projects, 3));\n  useEffect(() => {\n    setPreviewProjects(sampleSize(collection.projects, 3));\n  }, [collection]);\n  const collectionHasProjects = collection.projects.length > 0;\n  let featuredProject = null;\n  let { projects } = collection;\n  if (preview) {\n    projects = previewProjects;\n  }\n  if (showFeaturedProject && collection.featuredProjectId) {\n    [[featuredProject], projects] = partition(collection.projects, (p) => p.id === collection.featuredProjectId);\n  }\n\n  let collectionName = collection.name;\n  if (isAuthorized) {\n    collectionName = <CollectionNameInput name={collection.name} onChange={funcs.onNameChange} />;\n  } else if (preview) {\n    collectionName = <CollectionLink collection={collection}>{collection.name}</CollectionLink>;\n  }\n\n  const enableSorting = isAuthorized && projects.length > 1;\n\n  return (\n    <article className={classnames(styles.container, isDarkColor(collection.coverColor) && styles.dark, preview && styles.preview)}>\n      <header className={styles.collectionHeader} style={{ backgroundColor: collection.coverColor }}>\n        <div className={styles.imageContainer}>\n          {collection.avatarUrl ? <Image src={collection.avatarUrl} alt=\"\" /> : <CollectionAvatar collection={collection} />}\n        </div>\n\n        <div className={styles.collectionInfo}>\n          <h1 className={styles.name}>{collectionName}</h1>\n\n          <div className={styles.owner}>\n            <ProfileItem hasLink {...curator} glitchTeam={collection.glitchTeam} />\n          </div>\n\n          <div className={styles.description}>\n            <AuthDescription\n              authorized={isAuthorized}\n              description={collection.description}\n              update={funcs.updateDescription}\n              placeholder=\"Tell us about your collection\"\n            />\n          </div>\n\n          {!preview && (\n            <div className={styles.projectCount}>\n              <Text>\n                <Pluralize count={collection.projects.length} singular=\"Project\" />\n              </Text>\n            </div>\n          )}\n\n          {isAuthorized && funcs.updateColor && <EditCollectionColor update={funcs.updateColor} initialColor={collection.coverColor} />}\n        </div>\n      </header>\n\n      <div className={styles.collectionContents}>\n        <div className={styles.collectionProjectContainerHeader}>\n          {isAuthorized && funcs.addProjectToCollection && (\n            <AddCollectionProject addProjectToCollection={funcs.addProjectToCollection} collection={collection} />\n          )}\n        </div>\n        {!collectionHasProjects && isAuthorized && (\n          <div className={styles.emptyCollectionHint}>\n            <Image src=\"https://cdn.glitch.com/1afc1ac4-170b-48af-b596-78fe15838ad3%2Fpsst-pink.svg?1541086338934\" alt=\"psst\" width=\"\" height=\"\" />\n            <Text>You can add any project, created by any user</Text>\n          </div>\n        )}\n        {!collectionHasProjects && !isAuthorized && <div className={styles.emptyCollectionHint}>No projects to see in this collection just yet.</div>}\n        {featuredProject && (\n          <FeaturedProject\n            isAuthorized={isAuthorized}\n            featuredProject={featuredProject}\n            unfeatureProject={funcs.unfeatureProject}\n            addProjectToCollection={funcs.addProjectToCollection}\n            collection={collection}\n            displayNewNote={funcs.displayNewNote}\n            updateNote={funcs.updateNote}\n            hideNote={funcs.hideNote}\n          />\n        )}\n        {collectionHasProjects && (\n          <ProjectsList\n            layout={preview ? 'row' : 'gridCompact'}\n            projects={projects}\n            collection={collection}\n            enableSorting={enableSorting}\n            onReorder={funcs.updateProjectOrder}\n            noteOptions={{\n              hideNote: funcs.hideNote,\n              updateNote: funcs.updateNote,\n              isAuthorized,\n            }}\n            projectOptions={{ ...funcs, collection }}\n          />\n        )}\n        {enableSorting && (\n          <Text>Drag to reorder, or move focus to a project and press space. Move it with the arrow keys and press space again to save.</Text>\n        )}\n        {preview && (\n          <CollectionLink collection={collection} className={styles.viewAll}>\n            View all <Pluralize count={collection.projects.length} singular=\"project\" /> <Arrow />\n          </CollectionLink>\n        )}\n      </div>\n    </article>\n  );\n};\n\nCollectionContainer.propTypes = {\n  collection: PropTypes.shape({\n    projects: PropTypes.array.isRequired,\n    coverColor: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    featuredProjectId: PropTypes.string,\n  }).isRequired,\n  showFeaturedProject: PropTypes.bool,\n  isAuthorized: PropTypes.bool,\n  preview: PropTypes.bool,\n  funcs: PropTypes.object,\n};\nCollectionContainer.defaultProps = {\n  showFeaturedProject: false,\n  isAuthorized: false,\n  preview: false,\n  funcs: {},\n};\n\nexport default CollectionContainer;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"container__container___2PglQ\",\"collectionHeader\":\"container__collectionHeader___2S9lR\",\"preview\":\"container__preview___23oGd\",\"dark\":\"container__dark___2gENH\",\"collectionContents\":\"container__collectionContents___FOCm0\",\"imageContainer\":\"container__imageContainer___180ZI\",\"name\":\"container__name___3gNuK\",\"owner\":\"container__owner___2Sw6T\",\"description\":\"container__description___2Dlsk\",\"projectCount\":\"container__projectCount___2cSLI\",\"collectionProjectContainerHeader\":\"container__collectionProjectContainerHeader___2nUY7\",\"emptyCollectionHint\":\"container__emptyCollectionHint___28amB\",\"viewAll\":\"container__viewAll___21OGj\"};","// create-collection-pop.jsx -> add a project to a new user or team collection\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { kebabCase, orderBy } from 'lodash';\nimport { withRouter } from 'react-router-dom';\nimport Select from 'react-select';\n\nimport Loader from 'Components/loader';\nimport { UserAvatar, TeamAvatar } from 'Components/images/avatar';\nimport TextInput from 'Components/inputs/text-input';\nimport { AddProjectToCollectionMsg } from 'Components/notification';\nimport { PopoverDialog, MultiPopoverTitle, PopoverActions, PopoverWithButton } from 'Components/popover';\nimport Button from 'Components/buttons/button';\nimport { createCollection } from 'Models/collection';\nimport { useTracker } from 'State/segment-analytics';\nimport { useAPI, createAPIHook } from 'State/api';\nimport { useCurrentUser } from 'State/current-user';\nimport { useNotifications } from 'State/notifications';\nimport { getAllPages } from 'Shared/api';\n\nimport styles from './create-collection-pop.styl';\n\nconst Dropdown = ({ selection, options, onUpdate }) => (\n  <Select\n    autoWidth\n    value={selection}\n    options={options}\n    className={styles.userOrTeamToggle}\n    classNamePrefix=\"dropdown\"\n    onChange={onUpdate}\n    isSearchable={false}\n  />\n);\n\n// Format in { value: teamId, label: html elements } format for react-select\nconst getUserOption = (currentUser) => ({\n  value: null,\n  label: (\n    <span>\n      <UserAvatar user={currentUser} hideTooltip /> myself\n    </span>\n  ),\n});\n\nconst getTeamOption = (team) => ({\n  value: team.id,\n  label: (\n    <span id={team.id}>\n      <TeamAvatar team={team} hideTooltip /> {team.name}\n    </span>\n  ),\n});\n\nfunction getOptions(currentUser) {\n  const orderedTeams = orderBy(currentUser.teams, (team) => team.name.toLowerCase());\n  const teamOptions = orderedTeams.map(getTeamOption);\n  return [getUserOption(currentUser), ...teamOptions];\n}\n\nconst useCollections = createAPIHook((api, teamId, currentUser) => {\n  if (teamId) {\n    return getAllPages(api, `/v1/teams/by/id/collections?id=${teamId}&limit=100`);\n  }\n  return getAllPages(api, `/v1/users/by/id/collections?id=${currentUser.id}&limit=100`);\n});\n\nfunction CreateCollectionPopBase({ align, title, onSubmit, options }) {\n  const api = useAPI();\n  const { createNotification } = useNotifications();\n  const { currentUser } = useCurrentUser();\n\n  const [loading, setLoading] = useState(false);\n  // TODO: should this be pre-populated with a friendly name?\n  const [collectionName, setCollectionName] = useState('');\n\n  const [selection, setSelection] = useState(options[0]);\n  // determine if entered name already exists for selected user / team\n  const { value: collections } = useCollections(selection.value, currentUser);\n  const hasQueryError = (collections || []).some((c) => c.url === kebabCase(collectionName));\n  const error = hasQueryError ? 'You already have a collection with this name' : '';\n\n  const submitDisabled = loading || collectionName.length === 0;\n\n  async function handleSubmit(event) {\n    if (submitDisabled) return;\n    event.preventDefault();\n    setLoading(true);\n    const collection = await createCollection(api, collectionName, selection.value, createNotification);\n    const team = currentUser.teams.find((t) => t.id === selection.value);\n    collection.fullUrl = `${team ? team.url : currentUser.login}/${collection.url}`;\n    onSubmit(collection);\n  }\n\n  return (\n    <PopoverDialog wide align={align}>\n      {title}\n\n      <PopoverActions>\n        <form onSubmit={handleSubmit}>\n          <div className={styles.inputWrap}>\n            <TextInput\n              value={collectionName}\n              onChange={setCollectionName}\n              error={error}\n              placeholder=\"New Collection Name\"\n              labelText=\"New Collection Name\"\n            />\n          </div>\n\n          {options.length > 1 && (\n            <div>\n              {'for '}\n              <Dropdown options={options} selection={selection} onUpdate={(value) => setSelection(value)} />\n            </div>\n          )}\n\n          {loading ? (\n            <Loader />\n          ) : (\n            <Button size=\"small\" onClick={handleSubmit} disabled={submitDisabled}>\n              Create\n            </Button>\n          )}\n        </form>\n      </PopoverActions>\n    </PopoverDialog>\n  );\n}\n\nexport function CreateCollectionWithProject({ project, addProjectToCollection }) {\n  const { createNotification } = useNotifications();\n  const { currentUser } = useCurrentUser();\n  const options = getOptions(currentUser);\n  const track = useTracker('Create Collection clicked', (inherited) => ({\n    ...inherited,\n    origin: `${inherited.origin} project`,\n  }));\n  const onSubmit = async (collection) => {\n    track();\n    if (!collection || !collection.id) return;\n\n    try {\n      await addProjectToCollection(project, collection);\n\n      const content = <AddProjectToCollectionMsg projectDomain={project.domain} collectionName={collection.name} url={`/@${collection.fullUrl}`} />;\n      createNotification(content, { type: 'success' });\n    } catch (e) {\n      createNotification('Unable to add project to collection.', { type: 'error' });\n    }\n  };\n  const title = <MultiPopoverTitle>{`Add ${project.domain} to a new collection`}</MultiPopoverTitle>;\n\n  return <CreateCollectionPopBase align=\"right\" title={title} options={options} onSubmit={onSubmit} />;\n}\n\nCreateCollectionWithProject.propTypes = {\n  project: PropTypes.object.isRequired,\n  addProjectToCollection: PropTypes.func.isRequired,\n};\n\nconst CreateCollectionPop = withRouter(({ team, history }) => {\n  const { currentUser } = useCurrentUser();\n  const options = team ? [getTeamOption(team)] : [getUserOption(currentUser)];\n  const track = useTracker('Create Collection clicked');\n  const onSubmit = (collection) => {\n    track();\n    if (collection) {\n      history.push(`/@${collection.fullUrl}`);\n    }\n  };\n\n  return (\n    <PopoverWithButton buttonText=\"Create Collection\">\n      {() => <CreateCollectionPopBase align=\"left\" options={options} onSubmit={onSubmit} />}\n    </PopoverWithButton>\n  );\n});\n\nCreateCollectionPop.propTypes = {\n  team: PropTypes.object,\n};\nCreateCollectionPop.defaultProps = {\n  team: null,\n};\n\nexport default CreateCollectionPop;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputWrap\":\"create-collection-pop__inputWrap___1W5yM\",\"userOrTeamToggle\":\"create-collection-pop__userOrTeamToggle___3Ufku\",\"user-avatar\":\"create-collection-pop__user-avatar___2lIgE\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst DefaultAvatar = ({ backgroundFillColor }) => (\n  <svg width={159} height={147} viewBox=\"0 0 159 147\" role=\"presentation\">\n    <g data-svg=\"collection-avatar\">\n      <polygon data-svg=\"frame\" fill=\"#FFFB98\" points=\"0 147 159 147 159 16 0 16\" />\n      <polygon data-svg=\"sky\" fill={backgroundFillColor} points=\"17 132 141 132 141 30 17 30\" />\n      <path d=\"M21,34 L21,128 L137,128 L137,34 L21,34 Z M17,30 L141,30 L141,132 L17,132 L17,30 Z\" data-svg=\"inner-frame\" fill=\"#222222\" />\n      <path\n        d=\"M68.3951106,15.06 L92.8773227,15.06 C91.7177318,9.99988 86.6693227,6.18 80.6362167,6.18 C74.6031106,6.18 69.5561712,9.99988 68.3951106,15.06 M95.3331864,19.5 L65.939247,19.5 C64.7208682,19.5 63.7347015,18.50692 63.7347015,17.28 C63.7347015,8.7108 71.3168682,1.74 80.6362167,1.74 C89.9555652,1.74 97.5377318,8.7108 97.5377318,17.28 C97.5377318,18.50692 96.5515652,19.5 95.3331864,19.5\"\n        data-svg=\"handle\"\n        fill=\"#222222\"\n      />\n      <g data-svg=\"corners\" transform=\"translate(0.000000, 16.000000)\" fill=\"#222222\">\n        <polygon points=\"155.900868 130.683984 136.321565 114.551984 139.113989 111.115424 158.693292 127.247424\" />\n        <polygon points=\"140.496387 18 138 14.8389049 155.503613 0 158 3.16109514\" />\n        <polygon points=\"17.5036132 18 0 3.16109514 2.49638681 0 20 14.8389049\" />\n        <polygon points=\"2.74602549 131 0 127.487672 19.2539745 111 22 114.512328\" />\n      </g>\n      <path\n        d=\"M19.79,94.8593842 C44.8648958,101.507816 67.0872396,101.059896 86.4570312,93.515625 C98.7421875,87.9834818 108.882161,83.9138203 116.876953,81.3066406 C128.869141,77.395871 137.031484,77.3828125 138.51,78.2841797 C138.51,78.2841797 138.509596,95.4257813 138.508789,129.708984 L19.7919922,129.855469 L19.79,94.8593842 Z\"\n        data-svg=\"grass\"\n        stroke=\"#222222\"\n        strokeWidth={4}\n        fill=\"#05D458\"\n      />\n      <circle data-svg=\"sun\" stroke=\"#000000\" strokeWidth={4} fill=\"#E8DE1B\" cx=\"40.8486328\" cy=\"59.6357422\" r=\"16\" />\n      <path\n        d=\"M60.3348254,77.5704551 C58.9993547,80.6825277 55.8689424,82.8666205 52.2201169,82.8666205 C51.0942738,82.8666205 50.017785,82.6586888 49.0281483,82.2797234 C47.8967722,83.2670781 46.4079181,83.8666205 44.7767575,83.8666205 C41.2366977,83.8666205 38.3669121,81.042731 38.3669121,77.5592868 C38.3669121,74.362029 40.7845266,71.7204047 43.9190364,71.3079336 C44.4206293,69.9153121 45.2738944,68.6864115 46.3737706,67.7246127 C46.0662734,66.8112197 45.8994141,65.8316421 45.8994141,64.8125 C45.8994141,59.8419373 49.8685147,55.8125 54.7646484,55.8125 C58.4425588,55.8125 61.5973616,58.0862365 62.9395833,61.3246338 C63.8172067,61.0552858 64.7505289,60.9101562 65.7182989,60.9101562 C70.8661431,60.9101562 75.0392954,65.0165679 75.0392954,70.0820833 C75.0392954,75.1475988 70.8661431,79.2540104 65.7182989,79.2540104 C63.7128485,79.2540104 61.8553227,78.6307987 60.3348254,77.5704551 Z\"\n        stroke=\"#000000\"\n        strokeWidth={4}\n        fill=\"#FFFFFF\"\n      />\n      <path\n        d=\"M121.554267,48.9330178 C121.561107,48.9330067 121.567948,48.9330011 121.57479,48.9330011 C128.315872,48.9330011 133.780598,54.3103309 133.780598,60.9436034 C133.780598,67.5768759 128.315872,72.9542057 121.57479,72.9542057 C118.736067,72.9542057 116.123683,72.0006337 114.050407,70.4012578 C112.497386,71.7531025 110.455645,72.5736517 108.21914,72.5736517 C103.3565,72.5736517 99.4145508,68.6947458 99.4145508,63.9098727 C99.4145508,62.7888762 99.6309116,61.7176053 100.024784,60.7342885 C98.6643533,59.5776974 97.8034355,57.8676186 97.8034355,55.9596774 C97.8034355,52.4762332 100.673221,49.6523438 104.213281,49.6523438 C104.670308,49.6523438 105.116163,49.69941 105.546114,49.7888854 C106.871499,46.5129316 110.045383,44.2060547 113.75,44.2060547 C117.122846,44.2060547 120.055763,46.1182434 121.554267,48.9330178 Z\"\n        stroke=\"#000000\"\n        strokeWidth={4}\n        fill=\"#FFFFFF\"\n      />\n      <path\n        d=\"M82.3606089,42.5137208 C86.0065614,42.5895456 88.9384448,45.5215419 88.9384448,49.1273647 C88.9384448,52.7808104 85.928606,55.7425133 82.2157816,55.7425133 C79.6428183,55.7425133 77.4074568,54.3201849 76.2774254,52.2309783 C75.8404163,52.3576604 75.3778461,52.425639 74.8991407,52.425639 C72.2100723,52.425639 70.0301517,50.2805815 70.0301517,47.634519 C70.0301517,44.9884565 72.2100723,42.843399 74.8991407,42.843399 C75.2392876,42.843399 75.5712879,42.8777207 75.8917602,42.9430366 C76.3155392,41.4927371 77.63826,40.4348278 79.2043688,40.4348278 C80.6113173,40.4348278 81.8218341,41.2886374 82.3606089,42.5137208 Z\"\n        stroke=\"#000000\"\n        strokeWidth={4}\n        fill=\"#FFFFFF\"\n      />\n      <path d=\"M4.0,20 L4,143 L155,143 L155,20 L4,20 Z M0,16 L159,16 L159,147 L0,147 L0,16 Z\" data-svg=\"outer-frame\" fill=\"#222222\" />\n    </g>\n  </svg>\n);\n\nDefaultAvatar.propTypes = {\n  backgroundFillColor: PropTypes.string,\n};\nDefaultAvatar.defaultProps = {\n  backgroundFillColor: '#45C1F7',\n};\n\nexport default DefaultAvatar;\n","import React, { useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport randomColor from 'randomcolor';\nimport { throttle } from 'lodash';\n\nimport { getContrastWithDarkText, getContrastWithLightText } from 'Models/collection';\nimport TextInput from 'Components/inputs/text-input';\nimport ColorInput from 'Components/inputs/color';\nimport Button from 'Components/buttons/button';\nimport { PopoverWithButton, PopoverDialog, PopoverInfo, PopoverActions } from 'Components/popover';\nimport styles from './edit-collection-color-pop.styl';\n\nconst formatAndValidateHex = (hex) => {\n  if (!hex) return null;\n  hex = hex.trim();\n  if (!hex.startsWith('#')) {\n    hex = `#${hex}`;\n  }\n  // #ff00ff\n  if (/^#?[0-9A-Fa-f]{6}$/.test(hex)) {\n    return hex;\n  }\n  // #f0f\n  if (/^#?[0-9A-Fa-f]{3}$/.test(hex)) {\n    const [, r, g, b] = hex.split('');\n    return ['#', r, r, g, g, b, b].join('');\n  }\n  return null;\n};\n\nconst isGoodColorContrast = (hex) => getContrastWithDarkText(hex) >= 4.5 || getContrastWithLightText(hex) >= 4.5;\n\nfunction EditCollectionColorPop({ initialColor, updateColor, togglePopover }) {\n  const [color, setColor] = useState(initialColor);\n  const [hex, setHex] = useState(initialColor);\n  const [error, setError] = useState(false);\n\n  const changeColor = (value) => {\n    setColor(value);\n    setHex(value);\n    updateColor(value);\n  };\n\n  const setRandomColor = () => {\n    const newColor = randomColor({ luminosity: 'light' });\n    if (isGoodColorContrast(newColor)) {\n      changeColor(newColor);\n      return;\n    }\n    setRandomColor();\n  };\n\n  const onChangeColorPicker = useMemo(() => throttle(changeColor, 100), []);\n\n  const onChangeHex = (value) => {\n    setHex(value);\n\n    const formatted = formatAndValidateHex(value);\n    if (!formatted) {\n      setError('Invalid Hex');\n      return;\n    }\n\n    const hexIsGoodColorContrast = isGoodColorContrast(value);\n    if (!hexIsGoodColorContrast) {\n      setError('This color might make text hard to read. Try another!');\n      return;\n    }\n\n    setColor(formatted);\n    updateColor(formatted);\n    setError(false);\n  };\n\n  const keyPress = (e) => {\n    if (e.key === 'Enter') {\n      togglePopover();\n    } else {\n      setError(false);\n    }\n  };\n\n  return (\n    <PopoverDialog align=\"left\" className={styles.container}>\n      <PopoverInfo>\n        <div className={styles.colorFormWrap}>\n          <ColorInput value={color} onChange={onChangeColorPicker} />\n          <div className={styles.hexWrap}>\n            <TextInput\n              autoFocus\n              opaque\n              value={hex}\n              onChange={onChangeHex}\n              onKeyPress={keyPress}\n              placeholder=\"Hex\"\n              labelText=\"Custom color hex\"\n              error={error}\n            />\n          </div>\n        </div>\n      </PopoverInfo>\n\n      <PopoverActions type=\"secondary\">\n        <Button size=\"small\" type=\"tertiary\" emoji=\"bouquet\" onClick={setRandomColor}>\n          Random\n        </Button>\n      </PopoverActions>\n    </PopoverDialog>\n  );\n}\n\nconst EditCollectionColor = ({ update, initialColor }) => (\n  <PopoverWithButton containerClass=\"edit-collection-color-btn\" buttonClass=\"add-project\" buttonText=\"Color\">\n    {({ togglePopover }) => <EditCollectionColorPop updateColor={update} initialColor={initialColor} togglePopover={togglePopover} />}\n  </PopoverWithButton>\n);\n\nEditCollectionColor.propTypes = {\n  update: PropTypes.func.isRequired,\n  initialColor: PropTypes.string.isRequired,\n};\n\nexport default EditCollectionColor;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"edit-collection-color-pop__container___26qT6\",\"colorFormWrap\":\"edit-collection-color-pop__colorFormWrap___1eoxk\",\"hexWrap\":\"edit-collection-color-pop__hexWrap___124AR\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport _ from 'lodash';\n\nimport { isDarkColor } from 'Models/collection';\nimport AuthDescription from 'Components/fields/auth-description';\nimport { CollectionCuratorLoader } from 'Components/collection/collection-item';\n\nimport styles from './note.styl';\n\nconst cx = classNames.bind(styles);\n\n/**\n * Note Component\n */\nconst Note = ({ collection, project, updateNote, hideNote, isAuthorized }) => {\n  function hideEmptyNote(event) {\n    let description = event.target.value || '';\n    description = _.trim(description);\n\n    if (!description || description.length === 0) {\n      setTimeout(() => hideNote(project), 500);\n    }\n  }\n\n  if (!project.isAddingANewNote && !project.note) {\n    return null;\n  }\n  const collectionCoverColor = collection.coverColor;\n\n  return (\n    <div className={styles.note}>\n      <div\n        className={cx({ descriptionContainer: true, dark: isDarkColor(collectionCoverColor) })}\n        style={{ backgroundColor: collectionCoverColor, borderColor: collectionCoverColor }}\n      >\n        <AuthDescription\n          authorized={isAuthorized}\n          description={project.note || ''}\n          placeholder=\"Share why you love this app.\"\n          update={(note) => updateNote({ note, project })}\n          onBlur={hideEmptyNote}\n          allowImages\n        />\n      </div>\n      <div className={styles.user}>\n        <CollectionCuratorLoader collection={collection} />\n      </div>\n    </div>\n  );\n};\n\nNote.propTypes = {\n  collection: PropTypes.shape({\n    coverColor: PropTypes.string,\n    user: PropTypes.object,\n    team: PropTypes.object,\n  }).isRequired,\n  isAuthorized: PropTypes.bool.isRequired,\n  project: PropTypes.shape({\n    note: PropTypes.string,\n    isAddingANewNote: PropTypes.bool,\n  }).isRequired,\n  updateNote: PropTypes.func,\n  hideNote: PropTypes.func,\n};\n\nNote.defaultProps = {\n  updateNote: () => {},\n  hideNote: () => {},\n};\n\nexport default Note;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"note\":\"note__note___UjFD3\",\"descriptionContainer\":\"note__descriptionContainer___3z8XC\",\"user\":\"note__user___3_-R-\",\"dark\":\"note__dark___2mv9c\"};","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { orderBy } from 'lodash';\nimport Heading from 'Components/text/heading';\nimport CollectionItem from 'Components/collection/collection-item';\nimport Grid from 'Components/containers/grid';\nimport CreateCollectionButton from 'Components/collection/create-collection-pop';\nimport { useAPIHandlers } from 'State/api';\nimport { useCurrentUser } from 'State/current-user';\n\nimport styles from './styles.styl';\n\nconst CreateFirstCollection = () => (\n  <div className={styles.createFirstCollection}>\n    <img src=\"https://cdn.glitch.com/1afc1ac4-170b-48af-b596-78fe15838ad3%2Fpsst-pink.svg?1541086338934\" alt=\"\" />\n    <p className={styles.createFirstCollectionText}>Create collections to organize your favorite projects.</p>\n    <br />\n  </div>\n);\n\nfunction CollectionsList({ collections: rawCollections, title, isAuthorized, maybeTeam, showCurator }) {\n  const { deleteItem } = useAPIHandlers();\n  const { currentUser } = useCurrentUser();\n  const [deletedCollectionIds, setDeletedCollectionIds] = useState([]);\n\n  function deleteCollection(collection) {\n    setDeletedCollectionIds((ids) => [...ids, collection.id]);\n    return deleteItem({ collection });\n  }\n\n  const collections = rawCollections.filter(({ id }) => !deletedCollectionIds.includes(id));\n  const hasCollections = !!collections.length;\n  const canMakeCollections = isAuthorized && !!currentUser;\n\n  const orderedCollections = orderBy(collections, (collection) => collection.updatedAt, 'desc');\n\n  if (!hasCollections && !canMakeCollections) {\n    return null;\n  }\n  return (\n    <article data-cy=\"collections\" className={styles.collections}>\n      <Heading tagName=\"h2\">{title}</Heading>\n      {canMakeCollections && (\n        <>\n          <CreateCollectionButton team={maybeTeam} />\n          {!hasCollections && <CreateFirstCollection />}\n        </>\n      )}\n      <Grid items={orderedCollections}>\n        {(collection) => (\n          <CollectionItem\n            collection={collection}\n            isAuthorized={isAuthorized}\n            deleteCollection={() => deleteCollection(collection)}\n            showCurator={showCurator}\n          />\n        )}\n      </Grid>\n    </article>\n  );\n}\n\nCollectionsList.propTypes = {\n  collections: PropTypes.array.isRequired,\n  maybeTeam: PropTypes.object,\n  title: PropTypes.node.isRequired,\n  isAuthorized: PropTypes.bool,\n  showCurator: PropTypes.bool,\n};\n\nCollectionsList.defaultProps = {\n  maybeTeam: undefined,\n  isAuthorized: false,\n  showCurator: false,\n};\n\nexport default CollectionsList;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { sampleSize } from 'lodash';\n\nimport CoverContainer from 'Components/containers/cover-container';\nimport DataLoader from 'Components/data-loader';\nimport Loader from 'Components/loader';\nimport SmallCollectionItem from 'Components/collection/collection-item-small';\nimport Heading from 'Components/text/heading';\nimport Row from 'Components/containers/row';\nimport Arrow from 'Components/arrow';\nimport { UserLink, TeamLink } from 'Components/link';\nimport { getDisplayName } from 'Models/user';\nimport { getSingleItem } from 'Shared/api';\nimport { useCollectionContext } from 'State/collection';\n\nimport styles from './styles.styl';\n\nconst loadMoreCollectionsFromAuthor = ({ api, collection }) => {\n  const authorType = collection.teamId === -1 ? 'user' : 'team';\n  const authorEndpoint = `${authorType}s`;\n  const authorId = authorType === 'user' ? collection.userId : collection.teamId;\n\n  // get up to 10 collections from the author\n  return getSingleItem(api, `v1/${authorEndpoint}/${authorId}/collections?limit=10&orderKey=createdAt&orderDirection=DESC`, 'items');\n};\n\nfunction useCollectionsWithProjects(collections) {\n  const getCollectionProjects = useCollectionContext();\n  const responses = collections.map(getCollectionProjects);\n  const [collectionsWithProjects, setCollectionsWithProjects] = useState(null);\n  useEffect(() => {\n    setCollectionsWithProjects((prev) => {\n      if (prev) return prev;\n\n      const allResponsesComplete = responses.every((r) => r.status !== 'loading');\n      if (!allResponsesComplete) return null;\n\n      const moreCollectionsWithProjects = [];\n      responses.forEach((response, i) => {\n        if (response.status === 'ready' && response.value.length > 0) {\n          moreCollectionsWithProjects.push({ ...collections[i], projects: response.value });\n        }\n      });\n      return sampleSize(moreCollectionsWithProjects, 3);\n    });\n  }, [responses]);\n  return collectionsWithProjects;\n}\n\nconst MoreCollections = ({ currentCollection, collections }) => {\n  const collectionsWithProjects = useCollectionsWithProjects(collections);\n  if (!collectionsWithProjects) return <Loader />;\n  if (!collectionsWithProjects.length) return null;\n\n  const isUserCollection = currentCollection.teamId === -1;\n  const type = isUserCollection ? 'user' : 'team';\n  return (\n    <>\n      <div className={styles.moreByLinkWrap}>\n        <Heading tagName=\"h2\">\n          {isUserCollection ? (\n            <UserLink user={currentCollection.user}>More by {getDisplayName(currentCollection.user)} <Arrow /></UserLink>\n          ) : (\n            <TeamLink team={currentCollection.team}>More from {currentCollection.team.name} <Arrow /></TeamLink>\n          )}\n        </Heading>\n      </div>\n      <CoverContainer type={type} item={currentCollection[type]}>\n        <Row items={collectionsWithProjects}>{(collection) => <SmallCollectionItem key={collection.id} collection={collection} />}</Row>\n      </CoverContainer>\n    </>\n  );\n};\n\nMoreCollections.propTypes = {\n  currentCollection: PropTypes.object.isRequired,\n  collections: PropTypes.array.isRequired,\n};\n\nconst MoreCollectionsContainer = ({ collection }) => (\n  <DataLoader get={(api) => loadMoreCollectionsFromAuthor({ api, collection })}>\n    {(collections) => (collections.length > 0 ? <MoreCollections currentCollection={collection} collections={collections} /> : null)}\n  </DataLoader>\n);\n\nMoreCollectionsContainer.propTypes = {\n  collection: PropTypes.object.isRequired,\n};\n\nexport default MoreCollectionsContainer;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"moreByLinkWrap\":\"styles__moreByLinkWrap___3O0uT\",\"createFirstCollection\":\"styles__createFirstCollection___33IJc\",\"createFirstCollectionText\":\"styles__createFirstCollectionText___18LSX\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport TrackedButtonGroup from 'Components/buttons/tracked-button-group';\n\nimport { getProfileStyle as getTeamProfileStyle } from 'Models/team';\nimport { getProfileStyle as getUserProfileStyle } from 'Models/user';\nimport styles from './cover-container.styl';\n\nconst cx = classNames.bind(styles);\n\nconst getProfileStyles = {\n  team: getTeamProfileStyle,\n  user: getUserProfileStyle,\n};\n\nconst CoverContainer = ({ coverActions, children, type, item }) => {\n  const className = cx({\n    coverContainer: true,\n    hasCoverImage: item.hasCoverImage,\n  });\n  const cache = item.updatedAt;\n  return (\n    <div className={className} style={getProfileStyles[type]({ ...item, cache })}>\n      {children}\n      <div className={styles.buttonWrap}>{coverActions && <TrackedButtonGroup actions={coverActions} />}</div>\n    </div>\n  );\n};\n\nCoverContainer.propTypes = {\n  coverActions: PropTypes.object,\n  children: PropTypes.node.isRequired,\n  type: PropTypes.string.isRequired,\n  item: PropTypes.object.isRequired,\n};\n\nCoverContainer.defaultProps = {\n  coverActions: {},\n};\n\nexport default CoverContainer;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"coverContainer\":\"cover-container__coverContainer___3UyDv\",\"hasCoverImage\":\"cover-container__hasCoverImage___1JHdc\",\"buttonWrap\":\"cover-container__buttonWrap___rPXhD\"};","import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from 'Components/buttons/button';\n\nimport styles from './expander.styl';\n\nconst Expander = ({ children, height, minSlide }) => {\n  const ref = useRef();\n\n  const [scrollHeight, setScrollHeight] = useState(Infinity);\n  const updateHeight = () => {\n    setScrollHeight(ref.current.scrollHeight);\n  };\n  useEffect(updateHeight, [children]);\n  useEffect(() => {\n    ref.current.addEventListener('load', updateHeight, {\n      capture: true,\n    });\n    window.addEventListener('resize', updateHeight, { passive: true });\n    return () => {\n      ref.current.removeEventListener('load', updateHeight, {\n        capture: true,\n      });\n      window.removeEventListener('resize', updateHeight, { passive: true });\n    };\n  }, []);\n\n  const [expandState, setExpandState] = useState('init'); // init | expanding | complete\n  const expand = () => {\n    updateHeight();\n    setExpandState('expanding');\n  };\n  const onExpandEnd = ({ propertyName }) => {\n    setExpandState((currentExpandState) => {\n      if (currentExpandState === 'expanding' && propertyName === 'max-height') {\n        return 'complete';\n      }\n      return currentExpandState;\n    });\n  };\n\n  const aboveLimit = scrollHeight > height;\n  const limitHeight = aboveLimit ? height - minSlide : height;\n  const style = {\n    init: { maxHeight: limitHeight },\n    expanding: { maxHeight: scrollHeight },\n    complete: null,\n  }[expandState];\n\n  return (\n    <div ref={ref} className={styles.expander} style={style} onTransitionEnd={onExpandEnd}>\n      {children}\n      {expandState !== 'complete' && aboveLimit && (\n        <div className={styles.expanderMask}>\n          {expandState !== 'expanding' && (\n            <Button size=\"small\" type=\"tertiary\" onClick={expand}>\n              Show More\n            </Button>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nExpander.propTypes = {\n  children: PropTypes.node.isRequired,\n  height: PropTypes.number.isRequired,\n  minSlide: PropTypes.number,\n};\n\nExpander.defaultProps = {\n  minSlide: 50,\n};\n\nexport default Expander;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"expander\":\"expander__expander___1lhdY\",\"expanderMask\":\"expander__expanderMask___38YFF\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { SortableContainer, SortableElement } from 'react-sortable-hoc';\nimport classnames from 'classnames';\nimport styles from './grid.styl';\n\nconst GridContainer = ({ children, gap, minWidth, className, style }) => (\n  <ul\n    className={classnames(styles.grid, className)}\n    style={{\n      ...style,\n      '--row-gap': (gap && gap.row) || gap,\n      '--column-gap': (gap && gap.column) || gap,\n      '--min-width': minWidth,\n    }}\n  >\n    {children}\n  </ul>\n);\n\nconst GridItem = ({ children, className, ...props }) => (\n  <li className={classnames(styles.item, className)} {...props}>\n    {children}\n  </li>\n);\n\nconst SortableGridContainer = SortableContainer(GridContainer);\nconst SortableGridItem = SortableElement(GridItem);\n\nconst Grid = ({ items, itemClassName, children, sortable, onReorder, ...props }) => {\n  const [sortingItems, setSortingItems] = React.useState(null);\n  if (sortable) {\n    const onDragStart = (event) => event.preventDefault();\n    const onSortStart = () => setSortingItems(items);\n    const onSortOver = ({ oldIndex, newIndex, isKeySorting }) => {\n      if (isKeySorting) onReorder(items[oldIndex], newIndex);\n    };\n    const onSortEnd = ({ oldIndex, newIndex }) => {\n      onReorder(sortingItems[oldIndex], newIndex);\n      setSortingItems(null);\n    };\n    return (\n      <SortableGridContainer {...props} axis=\"xy\" distance={15} onSortStart={onSortStart} onSortOver={onSortOver} onSortEnd={onSortEnd}>\n        {(sortingItems || items).map((item, index) => (\n          <SortableGridItem key={item.id} className={itemClassName} index={index} tabIndex={0} onDragStart={onDragStart}>\n            {children(item)}\n          </SortableGridItem>\n        ))}\n      </SortableGridContainer>\n    );\n  }\n  return (\n    <GridContainer {...props}>\n      {items.map((item) => <GridItem key={item.id} className={itemClassName}>{children(item)}</GridItem>)}\n    </GridContainer>\n  );\n};\n\nGrid.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape({ id: PropTypes.node.isRequired })).isRequired,\n  children: PropTypes.func.isRequired,\n  sortable: (props) => props.sortable && !props.onReorder && new Error('If a container is sortable, it needs onReorder defined'),\n  onReorder: PropTypes.func,\n  className: PropTypes.string,\n  itemClassName: PropTypes.string,\n  style: PropTypes.object,\n  gap: PropTypes.oneOfType([\n    PropTypes.shape({ row: PropTypes.node.isRequired, column: PropTypes.node.isRequired }).isRequired,\n    PropTypes.node.isRequired,\n  ]),\n  minWidth: PropTypes.node,\n};\n\nGrid.defaultProps = {\n  sortable: false,\n  onReorder: null,\n  className: '',\n  itemClassName: '',\n  style: {},\n  gap: undefined,\n  minWidth: undefined,\n};\n\nexport default Grid;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"grid__grid___2f177\",\"item\":\"grid__item___1VQ5f\"};","export { default as ProjectProfileContainer } from './project';\nexport { default as TeamProfileContainer } from './team';\nexport { default as UserProfileContainer } from './user';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport TrackedButtonGroup from 'Components/buttons/tracked-button-group';\nimport { getAvatarUrl as getProjectAvatarUrl } from 'Models/project';\nimport styles from './styles.styl';\n\nconst suspendedAvatarUrl = 'https://cdn.glitch.com/2b785d6f-8e71-423f-b484-ec2383060a9b%2Fno-entry.png?1556733100930';\n\nconst getAvatarUrl = (currentUser, isAuthorized, project) => {\n  if (project.suspendedReason && !isAuthorized && !currentUser.isSupport) {\n    return suspendedAvatarUrl;\n  }\n  return getProjectAvatarUrl(project.id).concat('?', project._avatarCache); // eslint-disable-line no-underscore-dangle\n};\n\nconst ProjectProfileContainer = ({ currentUser, project, children, avatarActions, isAuthorized }) => (\n  <div className={styles.profileWrap}>\n    <div className={styles.avatarContainer}>\n      <div\n        className={classnames(styles.avatar, styles.project)}\n        style={{ backgroundImage: `url('${getAvatarUrl(currentUser, isAuthorized, project)}')` }}\n      />\n      <div className={styles.avatarButtons}>{avatarActions && <TrackedButtonGroup actions={avatarActions} />}</div>\n    </div>\n    <div className={styles.profileInfo}>{children}</div>\n  </div>\n);\n\nProjectProfileContainer.propTypes = {\n  isAuthorized: PropTypes.bool.isRequired,\n  project: PropTypes.object.isRequired,\n  currentUser: PropTypes.object.isRequired,\n  children: PropTypes.node.isRequired,\n  avatarActions: PropTypes.object,\n};\n\nProjectProfileContainer.defaultProps = {\n  avatarActions: {},\n};\n\nexport default ProjectProfileContainer;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileWrap\":\"styles__profileWrap___1ApPa\",\"hasTeams\":\"styles__hasTeams___2udXd\",\"avatarContainer\":\"styles__avatarContainer___1HdDT\",\"avatar\":\"styles__avatar___kQd13\",\"user\":\"styles__user___uGLst\",\"team\":\"styles__team___1k78i\",\"project\":\"styles__project___3wU4l\",\"avatarButtons\":\"styles__avatarButtons___1c9iz\",\"profileInfo\":\"styles__profileInfo___1C1ak\",\"teamsContainer\":\"styles__teamsContainer___2LVTT\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport CoverContainer from 'Components/containers/cover-container';\nimport TrackedButtonGroup from 'Components/buttons/tracked-button-group';\nimport { getAvatarStyle as getTeamAvatarStyle } from 'Models/team';\nimport styles from './styles.styl';\n\nconst TeamProfileContainer = ({ item, children, avatarActions, coverActions }) => (\n  <CoverContainer type=\"team\" item={item} coverActions={coverActions}>\n    <div className={classnames(styles.profileWrap)}>\n      <div className={styles.avatarContainer}>\n        {/* eslint-disable-next-line no-underscore-dangle */}\n        <div className={classnames(styles.avatar, styles.team)} style={getTeamAvatarStyle({ ...item, cache: item.updatedAt })} />\n        <div className={styles.avatarButtons}>{avatarActions && <TrackedButtonGroup actions={avatarActions} />}</div>\n      </div>\n      <div className={styles.profileInfo}>{children}</div>\n    </div>\n  </CoverContainer>\n);\n\nTeamProfileContainer.propTypes = {\n  item: PropTypes.object.isRequired,\n  children: PropTypes.node.isRequired,\n  avatarActions: PropTypes.object,\n  coverActions: PropTypes.object,\n};\n\nTeamProfileContainer.defaultProps = {\n  avatarActions: {},\n  coverActions: {},\n};\n\nexport default TeamProfileContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport CoverContainer from 'Components/containers/cover-container';\nimport ProfileList from 'Components/profile-list';\nimport TrackedButtonGroup from 'Components/buttons/tracked-button-group';\nimport { getAvatarStyle as getUserAvatarStyle } from 'Models/user';\nimport styles from './styles.styl';\n\nconst UserProfileContainer = ({ item, children, avatarActions, coverActions, teams }) => {\n  const hasTeams = !!(teams && teams.length);\n  return (\n    <CoverContainer type=\"user\" item={item} coverActions={coverActions}>\n      <div className={classnames(styles.profileWrap, hasTeams && styles.hasTeams)}>\n        <div className={styles.avatarContainer}>\n          <div className={classnames(styles.avatar, styles.user)} style={getUserAvatarStyle(item)} />\n          <div className={styles.avatarButtons}>{avatarActions && <TrackedButtonGroup actions={avatarActions} />}</div>\n        </div>\n        <div className={styles.profileInfo}>{children}</div>\n      </div>\n      {hasTeams && (\n        <div className={styles.teamsContainer}>\n          <ProfileList layout=\"block\" teams={teams} />\n        </div>\n      )}\n    </CoverContainer>\n  );\n};\n\nUserProfileContainer.propTypes = {\n  item: PropTypes.object.isRequired,\n  children: PropTypes.node.isRequired,\n  avatarActions: PropTypes.object,\n  coverActions: PropTypes.object,\n  teams: PropTypes.array,\n};\n\nUserProfileContainer.defaultProps = {\n  avatarActions: {},\n  coverActions: {},\n  teams: [],\n};\n\nexport default UserProfileContainer;\n","import React, { useEffect, useState, useRef, useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { debounce } from 'lodash';\nimport classNames from 'classnames/bind';\n\nimport Text from 'Components/text/text';\nimport Button from 'Components/buttons/button';\nimport Badge from 'Components/badges/badge';\nimport TextInput from 'Components/inputs/text-input';\nimport Heading from 'Components/text/heading';\nimport Image from 'Components/images/image';\nimport ProjectItem from 'Components/project/project-item';\nimport Note from 'Components/collection/note';\nimport Grid from 'Components/containers/grid';\nimport Row from 'Components/containers/row';\nimport { LiveMessage } from 'react-aria-live';\n\nimport styles from './projects-list.styl';\n\nconst containers = {\n  row: (props) => <Row className={styles.projectsRow} {...props} />,\n  grid: (props) => <Grid className={styles.projectsGrid} {...props} />,\n  gridCompact: (props) => <Grid className={styles.projectsGridCompact} {...props} />,\n};\n\nconst ProjectsUL = ({ collection, projects, sortable, onReorder, noteOptions, layout, projectOptions }) => {\n  const Container = containers[layout];\n  return (\n    <Container itemClassName={styles.projectsItem} items={projects} sortable={sortable} onReorder={onReorder}>\n      {(project) => (\n        <>\n          {collection && (\n            <div className={styles.projectsContainerNote}>\n              <Note\n                project={project}\n                collection={collection}\n                isAuthorized={noteOptions.isAuthorized}\n                hideNote={noteOptions.hideNote}\n                updateNote={noteOptions.updateNote}\n              />\n            </div>\n          )}\n          <ProjectItem key={project.id} project={project} projectOptions={projectOptions} />\n        </>\n      )}\n    </Container>\n  );\n};\n\nconst arrowSrc = 'https://cdn.glitch.com/11efcb07-3386-43b6-bab0-b8dc7372cba8%2Fleft-arrow.svg?1553883919269';\n\nconst paginationReducer = (oldState, action) => {\n  switch (action.type) {\n    case 'next':\n      return {\n        page: oldState.page + 1,\n        totalPages: oldState.totalPages,\n        announce: `Showing page ${oldState.page + 1} of ${oldState.totalPages}`,\n      };\n    case 'previous':\n      return {\n        page: oldState.page - 1,\n        totalPages: oldState.totalPages,\n        announce: `Showing page ${oldState.page - 1} of ${oldState.totalPages}`,\n      };\n    case 'expand':\n      return {\n        expanded: true,\n        totalPages: oldState.totalPages,\n        announce: 'Showing all pages',\n      };\n    case 'restart':\n      return {\n        ...oldState,\n        page: 1,\n        announce: `Showing page 1 of ${action.totalPages}`,\n      };\n    default:\n      return {};\n  }\n};\n\nconst PaginationController = ({ enabled, projects, projectsPerPage, children }) => {\n  const numProjects = projects.length;\n  const numPages = Math.ceil(projects.length / projectsPerPage);\n\n  const [state, dispatchState] = useReducer(paginationReducer, {\n    page: 1,\n    totalPages: numPages,\n    announce: '',\n  });\n  const prevButtonRef = useRef();\n  const nextButtonRef = useRef();\n\n  const canPaginate = enabled && !state.expanded && projectsPerPage < numProjects;\n\n  const onNextButtonClick = () => {\n    if (state.page + 1 === numPages) {\n      prevButtonRef.current.focus();\n    }\n\n    dispatchState({ type: 'next' });\n  };\n\n  const onPreviousButtonClick = () => {\n    if (state.page - 1 === 1) {\n      nextButtonRef.current.focus();\n    }\n\n    dispatchState({ type: 'previous' });\n  };\n\n  if (canPaginate) {\n    const startIdx = (state.page - 1) * projectsPerPage;\n    projects = projects.slice(startIdx, startIdx + projectsPerPage);\n  }\n\n  useEffect(() => {\n    dispatchState({ type: 'restart', totalPages: numPages });\n  }, [numProjects]);\n\n  return (\n    <>\n      {children(projects)}\n      {canPaginate && (\n        <div className={styles.viewControls}>\n          <div className={styles.paginationControls}>\n            <Button ref={prevButtonRef} type=\"tertiary\" disabled={state.page === 1} onClick={onPreviousButtonClick}>\n              <Image alt=\"Previous\" className={styles.paginationArrow} src={arrowSrc} />\n            </Button>\n            {state.announce && <LiveMessage message={state.announce} aria-live=\"assertive\" />}\n            <div data-cy=\"page-numbers\" className={styles.pageNumbers}>\n              {state.page} / {numPages}\n            </div>\n            <Button ref={nextButtonRef} type=\"tertiary\" disabled={state.page === numPages} onClick={onNextButtonClick}>\n              <Image alt=\"Next\" className={classNames(styles.paginationArrow, styles.next)} src={arrowSrc} />\n            </Button>\n          </div>\n          <Button data-cy=\"show-all\" type=\"tertiary\" onClick={() => dispatchState({ type: 'expand' })}>\n            Show all <Badge>{numProjects}</Badge>\n          </Button>\n        </div>\n      )}\n    </>\n  );\n};\n\nconst FilterController = ({ enabled, placeholder, projects, children }) => {\n  const [filter, setFilter] = useState('');\n  const [filteredProjects, setFilteredProjects] = useState([]);\n  const [isDoneFiltering, setIsDoneFiltering] = useState(false);\n\n  const validFilter = filter.length > 1;\n\n  function filterProjects() {\n    setIsDoneFiltering(false);\n    if (validFilter) {\n      const lowercaseFilter = filter.toLowerCase();\n      setFilteredProjects(projects.filter((p) => p.domain.includes(lowercaseFilter) || p.description.toLowerCase().includes(lowercaseFilter)));\n      setIsDoneFiltering(true);\n    } else {\n      setFilteredProjects([]);\n    }\n  }\n\n  useEffect(() => filterProjects(), [projects]);\n  useEffect(() => debounce(filterProjects, 400)(), [filter]);\n\n  const filtering = validFilter && isDoneFiltering;\n  const displayedProjects = filtering ? filteredProjects : projects;\n\n  return children({\n    filterInput: enabled && (\n      <TextInput\n        data-cy=\"projects-filter\"\n        className={styles.headerSearch}\n        name=\"filter\"\n        onChange={setFilter}\n        opaque\n        placeholder=\"find a project\"\n        labelText=\"project search\"\n        type=\"search\"\n        value={filter}\n      />\n    ),\n    renderProjects: (renderFn) => {\n      if (displayedProjects.length) return renderFn(displayedProjects);\n\n      if (filtering) {\n        return (\n          <div className={styles.filterResultsPlaceholder}>\n            <Image alt=\"\" src=\"https://cdn.glitch.com/c117d5df-3b8d-4389-9e6b-eb049bcefcd6%2Fcompass-not-found.svg?1554146070630\" />\n            <Text>No projects found</Text>\n          </div>\n        );\n      }\n      return placeholder;\n    },\n  });\n};\n\nfunction ProjectsList({\n  projects,\n  layout,\n  title,\n  placeholder,\n  enableFiltering,\n  enablePagination,\n  enableSorting,\n  onReorder,\n  projectsPerPage,\n  collection,\n  noteOptions,\n  projectOptions,\n  dataCy,\n}) {\n  return (\n    <FilterController enabled={enableFiltering} placeholder={placeholder} projects={projects}>\n      {({ filterInput, renderProjects }) => (\n        <article className={classNames(styles.projectsContainer)} data-cy={dataCy}>\n          <div className={styles.header}>\n            {title && <Heading tagName=\"h2\">{title}</Heading>}\n            {filterInput}\n          </div>\n          {renderProjects((filteredProjects) => (\n            <PaginationController enabled={enablePagination} projects={filteredProjects} projectsPerPage={projectsPerPage}>\n              {(paginatedProjects) => (\n                <ProjectsUL\n                  projects={paginatedProjects}\n                  collection={collection}\n                  noteOptions={noteOptions}\n                  layout={layout}\n                  sortable={enableSorting && paginatedProjects.length === projects.length}\n                  onReorder={onReorder}\n                  projectOptions={projectOptions}\n                />\n              )}\n            </PaginationController>\n          ))}\n        </article>\n      )}\n    </FilterController>\n  );\n}\n\nProjectsList.propTypes = {\n  projects: PropTypes.array.isRequired,\n  layout: PropTypes.oneOf(['row', 'grid', 'gridCompact']).isRequired,\n  title: PropTypes.node,\n  placeholder: PropTypes.node,\n  enableFiltering: PropTypes.bool,\n  enablePagination: PropTypes.bool,\n  enableSorting: (props) => props.enableSorting && props.layout === 'row' && new Error('Sortable rows are not supported'),\n  projectsPerPage: PropTypes.number,\n  collection: PropTypes.object,\n  noteOptions: PropTypes.object,\n  projectOptions: PropTypes.object,\n  dataCy: PropTypes.string,\n};\n\nProjectsList.defaultProps = {\n  title: null,\n  placeholder: null,\n  enableFiltering: false,\n  enablePagination: false,\n  enableSorting: false,\n  projectsPerPage: 6,\n  collection: null,\n  noteOptions: {},\n  projectOptions: {},\n  dataCy: null,\n};\n\nexport default ProjectsList;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"projectsGrid\":\"projects-list__projectsGrid___nL_N4\",\"projectsGridCompact\":\"projects-list__projectsGridCompact___VRPdC\",\"projectsRow\":\"projects-list__projectsRow___ZgzSR\",\"projectsItem\":\"projects-list__projectsItem___xsbzK\",\"header\":\"projects-list__header___3GgyM\",\"viewControls\":\"projects-list__viewControls___1ZUjk\",\"paginationControls\":\"projects-list__paginationControls___2u2kP\",\"paginationArrow\":\"projects-list__paginationArrow___2jBZ2\",\"next\":\"projects-list__next___3eynR\",\"pageNumbers\":\"projects-list__pageNumbers___296ah\",\"filterResultsPlaceholder\":\"projects-list__filterResultsPlaceholder___2ZwCi\",\"projectsContainerNote\":\"projects-list__projectsContainerNote___13LqV\"};","import React, { useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport TransparentButton from 'Components/buttons/transparent-button';\nimport Button from 'Components/buttons/button';\nimport Arrow from 'Components/arrow';\nimport styles from './results-list.styl';\n\nconst ResultsList = ({ scroll, items, className, children }) => (\n  <div className={classnames(scroll && styles.scrollContainer, className)}>\n    <ul className={styles.resultsList}>\n      {items.map((item, i) => (\n        <li key={item.id} className={classnames(styles.resultItemWrap)}>\n          {children(item, i)}\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nResultsList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape({ id: PropTypes.node.isRequired })).isRequired,\n  children: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  scroll: PropTypes.bool,\n};\n\nResultsList.defaultProps = {\n  className: '',\n  scroll: false,\n};\n\nexport default ResultsList;\n\nexport const ResultItem = ({ className, onClick, href, children, active, selected }) => {\n  const buttonRef = useRef();\n  useEffect(() => {\n    if (active) {\n      setTimeout(() => {\n        buttonRef.current.focus();\n      }, 0);\n    }\n  }, [active]);\n\n  return (\n    <div className={classnames(className, styles.resultItem, href && styles.withLink, selected && styles.selected)}>\n      <TransparentButton className={styles.resultItemButton} onClick={onClick} ref={buttonRef}>\n        <div className={styles.resultWrap}>\n          {children}\n        </div>\n      </TransparentButton>\n      {href && (\n        <div className={styles.linkButtonWrap}>\n          <Button size=\"small\" href={href} newTab>\n            View <Arrow />\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst withClass = (Component, baseClassName) => ({ children, className, ...props }) => (\n  <Component className={classnames(className, baseClassName)} {...props}>\n    {children}\n  </Component>\n);\n\nexport const ResultInfo = withClass('div', styles.resultInfo);\nexport const ResultName = withClass('div', styles.resultName);\nexport const ResultDescription = withClass('div', styles.resultDescription);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"scrollContainer\":\"results-list__scrollContainer___2lDas\",\"resultsList\":\"results-list__resultsList___q7aun\",\"resultItemWrap\":\"results-list__resultItemWrap___7RAxM\",\"resultItem\":\"results-list__resultItem___30yuH\",\"withLink\":\"results-list__withLink___sYq1m\",\"selected\":\"results-list__selected___3MJy4\",\"resultDescription\":\"results-list__resultDescription___2MtnT\",\"resultItemButton\":\"results-list__resultItemButton___2lVXH\",\"resultWrap\":\"results-list__resultWrap___2y0L1\",\"resultInfo\":\"results-list__resultInfo___ITvg4\",\"active\":\"results-list__active___tcFO8\",\"resultName\":\"results-list__resultName___GRP_q\",\"linkButtonWrap\":\"results-list__linkButtonWrap___-qd0Q\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { range } from 'lodash';\nimport styles from './row.styl';\n\nconst Row = ({ items, children, count, gap, minWidth, className, style }) => (\n  <ul\n    className={classnames(styles.row, className)}\n    style={{\n      ...style,\n      '--item-count': count,\n      '--gap': gap,\n      '--min-width': minWidth,\n    }}\n  >\n    {items.slice(0, count).map((item) => (\n      <li key={item.id} className={styles.item}>\n        {children(item)}\n      </li>\n    ))}\n    {count > items.length && range(0, count - items.length).map((i) => <li key={`filler-${i}`} className={styles.filler} />)}\n  </ul>\n);\n\nRow.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape({ id: PropTypes.node.isRequired })).isRequired,\n  children: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  count: PropTypes.number,\n  gap: PropTypes.node,\n  minWidth: PropTypes.node,\n};\n\nRow.defaultProps = {\n  className: '',\n  style: {},\n  count: 3,\n  gap: undefined,\n  minWidth: undefined,\n};\n\nexport default Row;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"row__row___2tpIG\",\"item\":\"row__item___3VvrC\",\"filler\":\"row__filler___ezzAO\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { visuallyHidden } from '../global.styl';\n\nconst VisuallyHidden = ({ children, as: Component }) => (\n  <Component className={visuallyHidden}>{children}</Component>\n);\nVisuallyHidden.propTypes = {\n  children: PropTypes.node.isRequired,\n  as: PropTypes.any,\n};\nVisuallyHidden.defaultProps = {\n  as: 'div',\n};\n\nexport default VisuallyHidden;\n","import React, { useState, useEffect } from 'react';\nimport { kebabCase, debounce } from 'lodash';\nimport { withRouter } from 'react-router-dom';\n\nimport TextInput from 'Components/inputs/text-input';\nimport Loader from 'Components/loader';\nimport { MultiPopoverTitle, PopoverDialog, PopoverInfo, PopoverActions, InfoDescription } from 'Components/popover';\nimport Button from 'Components/buttons/button';\nimport Emoji from 'Components/images/emoji';\nimport { getPredicates, getTeamPair } from 'Models/words';\nimport { getLink } from 'Models/team';\nimport { useAPI } from 'State/api';\nimport { useTracker } from 'State/segment-analytics';\n\nimport styles from './styles.styl';\n\n// Create Team 🌿\n\nconst CreateTeamPop = withRouter(({ history }) => {\n  const api = useAPI();\n  const trackSubmit = useTracker('Create Team submitted');\n  const [state, replaceState] = useState({\n    teamName: '',\n    isLoading: false,\n    error: '',\n  });\n  const setState = (valOrFn) => {\n    if (typeof valOrFn === 'function') {\n      replaceState((prevState) => ({ ...prevState, ...valOrFn(prevState) }));\n    } else {\n      replaceState((prevState) => ({ ...prevState, ...valOrFn }));\n    }\n  };\n\n  const validate = async (name) => {\n    if (name) {\n      const url = kebabCase(name);\n      let error = null;\n\n      try {\n        const { data } = await api.get(`userId/byLogin/${url}`);\n        if (data !== 'NOT FOUND') {\n          error = 'Name in use, try another';\n        }\n      } catch (exception) {\n        if (!(exception.response && exception.response.status === 404)) {\n          throw exception;\n        }\n      }\n\n      try {\n        const { data } = await api.get(`teamId/byUrl/${url}`);\n        if (data !== 'NOT FOUND') {\n          error = 'Team already exists, try another';\n        }\n      } catch (exception) {\n        if (!(exception.response && exception.response.status === 404)) {\n          throw exception;\n        }\n      }\n\n      if (error) {\n        setState(({ teamName }) => (name === teamName ? { error } : {}));\n      }\n    }\n  };\n\n  const debouncedValidate = debounce(validate, 200);\n  useEffect(() => {\n    const getName = async () => {\n      const teamName = await getTeamPair();\n      setState({ teamName });\n    };\n    getName();\n  }, []);\n\n  const handleChange = async (newValue) => {\n    setState({\n      teamName: newValue,\n      error: '',\n    });\n\n    await debouncedValidate(newValue);\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setState({ isLoading: true });\n    trackSubmit();\n    try {\n      let description = 'A team that makes things';\n      try {\n        const predicates = await getPredicates();\n        description = `A ${predicates[0]} team that makes ${predicates[1]} things`;\n      } catch (error) {\n        // Just use the plain description\n      }\n      const { data } = await api.post('teams', {\n        name: state.teamName,\n        url: kebabCase(state.teamName),\n        hasAvatarImage: false,\n        coverColor: '',\n        location: '',\n        description,\n        backgroundColor: '',\n        hasCoverImage: false,\n        isVerified: false,\n      });\n      history.push(getLink(data));\n    } catch (error) {\n      const message = error && error.response && error.response.data && error.response.data.message;\n      setState({\n        isLoading: false,\n        error: message || 'Something went wrong',\n      });\n    }\n  };\n\n  const placeholder = 'Your Team Name';\n\n  return (\n    <PopoverDialog align=\"right\" className={styles.createTeamPop}>\n      <MultiPopoverTitle>\n        Create Team <Emoji name=\"herb\" inTitle />\n      </MultiPopoverTitle>\n\n      <PopoverInfo>\n        <InfoDescription>Showcase your projects in one place, manage collaborators, and view analytics</InfoDescription>\n      </PopoverInfo>\n\n      <PopoverActions>\n        <form onSubmit={handleSubmit}>\n          <TextInput autoFocus labelText={placeholder} value={state.teamName} onChange={handleChange} placeholder={placeholder} error={state.error} />\n          <div className={styles.teamUrlPreview}>/@{kebabCase(state.teamName || placeholder)}</div>\n\n          {state.isLoading ? (\n            <Loader />\n          ) : (\n            <Button submit size=\"small\" emoji=\"thumbsUp\" disabled={!!state.error}>\n              Create Team\n            </Button>\n          )}\n        </form>\n      </PopoverActions>\n      <PopoverInfo>\n        <InfoDescription>You can change this later</InfoDescription>\n      </PopoverInfo>\n    </PopoverDialog>\n  );\n});\n\nexport default CreateTeamPop;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"createTeamPop\":\"styles__createTeamPop___1EWjq\",\"teamUrlPreview\":\"styles__teamUrlPreview___2cDk7\"};","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Loader from 'Components/loader';\nimport { useAPI } from '../../state/api';\nimport { captureException } from '../../utils/sentry';\n\nconst DataLoader = ({ children, get, renderError, renderLoader, captureException: shouldCaptureException }) => {\n  const [{ status, value }, setState] = useState({ status: 'loading', value: null });\n  const api = useAPI();\n  useEffect(() => {\n    let isCurrent = true;\n    get(api).then(\n      (data) => {\n        if (!isCurrent) return;\n        setState({ status: 'ready', value: data });\n      },\n      (error) => {\n        console.error(error);\n        if (!isCurrent) return;\n        setState({ status: 'error', value: error });\n        if (shouldCaptureException) {\n          captureException(error);\n        }\n      },\n    );\n    return () => {\n      isCurrent = false;\n    };\n  }, [api]);\n  if (status === 'ready') return children(value);\n  if (status === 'error') return renderError(value);\n  return renderLoader();\n};\n\nDataLoader.propTypes = {\n  children: PropTypes.func.isRequired,\n  get: PropTypes.func.isRequired,\n  renderError: PropTypes.func,\n  renderLoader: PropTypes.func,\n};\nDataLoader.defaultProps = {\n  renderError: () => 'Something went wrong, try refreshing?',\n  renderLoader: () => <Loader />,\n};\nexport default DataLoader;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deletedProjectsContainer\":\"deleted-projects__deletedProjectsContainer___I8FHA\",\"deletedProject\":\"deleted-projects__deletedProject___2P10n\",\"buttonWrap\":\"deleted-projects__buttonWrap___1gjXZ\",\"avatar\":\"deleted-projects__avatar___1GMxY\",\"projectName\":\"deleted-projects__projectName___ZmpAA\"};","// deleted projects is a little strange\n// it loads the projects from the api, but expects them to be stored elsewhere\n// so it takes an initially empty list of projects and a function to fill it once they load\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getAllPages } from 'Shared/api';\nimport Loader from 'Components/loader';\nimport Button from 'Components/buttons/button';\nimport TransparentButton from 'Components/buttons/transparent-button';\nimport AnimationContainer from 'Components/animation-container';\nimport Grid from 'Components/containers/grid';\nimport TooltipContainer from 'Components/tooltips/tooltip-container';\nimport { getAvatarUrl } from 'Models/project';\nimport { useAPI } from 'State/api';\nimport { useTrackedFunc } from 'State/segment-analytics';\n\nimport styles from './deleted-projects.styl';\n\nconst DeletedProject = ({ project, onClick }) => {\n  // non-admin members of projects and super users can't undelete\n  if (!onClick) {\n    return (\n      <div className={styles.deletedProject}>\n        <img className={styles.avatar} src={getAvatarUrl(project.id)} alt=\"\" />\n        <div className={styles.projectName}>{project.domain}</div>\n        <TooltipContainer\n          type=\"action\"\n          id=\"undelete-project\"\n          target={\n            <div className={styles.buttonWrap}>\n              <Button size=\"small\" disabled decorative>\n                Undelete\n              </Button>\n            </div>\n          }\n          tooltip=\"Only admins can undelete a project\"\n        />\n      </div>\n    );\n  }\n  return (\n    <AnimationContainer type=\"slideUp\" onAnimationEnd={onClick}>\n      {(animateAndDeleteProject) => (\n        <TransparentButton onClick={animateAndDeleteProject} className={styles.deletedProject}>\n          <img className={styles.avatar} src={getAvatarUrl(project.id)} alt=\"\" />\n          <div className={styles.projectName}>{project.domain}</div>\n          <div className={styles.buttonWrap}>\n            <Button size=\"small\" decorative>\n              Undelete\n            </Button>\n          </div>\n        </TransparentButton>\n      )}\n    </AnimationContainer>\n  );\n};\nDeletedProject.propTypes = {\n  project: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    domain: PropTypes.string.isRequired,\n  }).isRequired,\n  onClick: PropTypes.func,\n};\nDeletedProject.defaultProps = {\n  onClick: null,\n};\n\nexport const DeletedProjectsList = ({ deletedProjects, undelete }) => {\n  const undeleteTracked = useTrackedFunc(undelete, 'Undelete clicked');\n  return (\n    <Grid items={deletedProjects} className={styles.deletedProjectsContainer}>\n      {(project) => {\n        const canUndelete = project.permission && project.permission.accessLevel === 30 && undelete;\n        const onClick = canUndelete ? () => undeleteTracked(project) : null;\n\n        return <DeletedProject project={project} onClick={onClick} />;\n      }}\n    </Grid>\n  );\n};\n\nDeletedProjectsList.propTypes = {\n  deletedProjects: PropTypes.array.isRequired,\n  undelete: PropTypes.func,\n};\nDeletedProjectsList.defaultProps = {\n  undelete: null,\n};\n\nfunction DeletedProjects({ deletedProjects, setDeletedProjects, undelete, user }) {\n  const api = useAPI();\n  // states: hidden | loading | ready\n  const [state, setState] = useState('hidden');\n  const clickShow = async () => {\n    setState('loading');\n    try {\n      const items = await getAllPages(api, `v1/users/${user.id}/deletedProjects?limit=100&orderKey=updatedAt&orderDirection=DESC`);\n      setDeletedProjects(items);\n      setState('ready');\n    } catch (e) {\n      setState('hidden');\n    }\n  };\n  const clickHide = () => {\n    setState('hidden');\n  };\n\n  if (state === 'hidden') {\n    return (\n      <Button type=\"tertiary\" onClick={clickShow}>\n        Show\n      </Button>\n    );\n  }\n  if (state === 'loading') {\n    return <Loader />;\n  }\n  if (!deletedProjects.length) {\n    return 'nothing found';\n  }\n  return (\n    <>\n      <DeletedProjectsList deletedProjects={deletedProjects} undelete={undelete} />\n      <Button type=\"tertiary\" onClick={clickHide}>\n        Hide Deleted Projects\n      </Button>\n    </>\n  );\n}\n\nDeletedProjects.propTypes = {\n  deletedProjects: PropTypes.array,\n  setDeletedProjects: PropTypes.func.isRequired,\n  undelete: PropTypes.func,\n};\n\nDeletedProjects.defaultProps = {\n  deletedProjects: [],\n  undelete: null,\n};\n\nexport default DeletedProjects;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { captureException } from 'Utils/sentry';\n\nexport default class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { error: null };\n  }\n\n  componentDidCatch(error) {\n    console.error(error);\n    captureException(error);\n    this.setState({ error });\n  }\n\n  render() {\n    const { children, fallback } = this.props;\n    const { error } = this.state;\n    return error ? fallback : children;\n  }\n}\n\nErrorBoundary.propTypes = {\n  children: PropTypes.node.isRequired,\n  fallback: PropTypes.node,\n};\n\nErrorBoundary.defaultProps = {\n  fallback: 'Something went wrong, try refreshing?',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Text from 'Components/text/text';\nimport styles from './not-found.styl';\n\nconst compass = 'https://cdn.glitch.com/bc50f686-4c0a-4e20-852f-3999b29e8092%2Fcompass.svg?1545073264846';\nconst needle = 'https://cdn.glitch.com/bc50f686-4c0a-4e20-852f-3999b29e8092%2Fneedle.svg?1545073265096';\n\nconst NotFound = ({ name }) => (\n  <section>\n    <Text>We didn't find {name}</Text>\n    <div className={styles.errorImage}>\n      <img className={styles.compass} src={compass} alt=\"\" />\n      <img className={styles.needle} src={needle} alt=\"\" />\n    </div>\n  </section>\n);\n\nNotFound.propTypes = {\n  name: PropTypes.string.isRequired,\n};\n\nexport default NotFound;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorImage\":\"not-found__errorImage___1eg9s\",\"needle\":\"not-found__needle___3Ieia\",\"spin\":\"not-found__spin___2fK-Z\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Markdown from 'Components/text/markdown';\nimport OptimisticMarkdownInput from 'Components/fields/optimistic-markdown-input';\n\nconst AuthDescription = ({ authorized, description, placeholder, update, onBlur, allowImages }) => (\n  authorized ? (\n    <OptimisticMarkdownInput\n      value={description}\n      onChange={update}\n      onBlur={onBlur}\n      placeholder={placeholder}\n      allowImages={allowImages}\n    />\n  ) : (\n    description && (\n      <div>\n        <Markdown allowImages={allowImages}>{description}</Markdown>\n      </div>\n    )\n  )\n);\n\nAuthDescription.propTypes = {\n  allowImages: PropTypes.bool,\n  authorized: PropTypes.bool.isRequired,\n  description: PropTypes.string.isRequired,\n  placeholder: PropTypes.string,\n  update: PropTypes.func,\n};\n\nAuthDescription.defaultProps = {\n  allowImages: true,\n  placeholder: '',\n  update: null,\n};\n\nexport default AuthDescription;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport OptimisticWrappingTextInput from './optimistic-wrapping-text-input';\n\nconst CollectionNameInput = ({ name, onChange }) => (\n  <OptimisticWrappingTextInput\n    labelText=\"Collection Name\"\n    value={name}\n    onChange={onChange}\n    placeholder=\"Name your collection\"\n  />\n);\n\nCollectionNameInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default CollectionNameInput;\n","import React from 'react';\nimport styles from './hidden-checkbox.styl';\n\nconst HiddenCheckbox = ({ value, onChange, children }) => (\n  <label className={styles.label}>\n    <input className={styles.checkbox} type=\"checkbox\" checked={value} onChange={(e) => onChange(e.target.checked)} />\n    {children}\n  </label>\n);\n\nexport default HiddenCheckbox;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"hidden-checkbox__label___23dwG\",\"checkbox\":\"hidden-checkbox__checkbox___3JMvx\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport usePassivelyTrimmedInput from './use-passively-trimmed-input';\nimport useOptimisticValue from './use-optimistic-value';\n\nimport MarkdownInput from '../inputs/markdown-input';\n\nfunction OptimisticMarkdownInput({ value, onChange, onBlur, ...props }) {\n  const [untrimmedValue, onChangeWithTrimmedInputs, onBlurWithTrimmedInputs] = usePassivelyTrimmedInput(value, onChange, onBlur);\n  const [optimisticValue, optimisticOnChange, optimisticOnBlur, optimisticError] = useOptimisticValue(\n    untrimmedValue,\n    onChangeWithTrimmedInputs,\n    onBlurWithTrimmedInputs,\n  );\n\n  return <MarkdownInput {...props} value={optimisticValue} onChange={optimisticOnChange} onBlur={optimisticOnBlur} error={optimisticError} />;\n}\nOptimisticMarkdownInput.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\nexport default OptimisticMarkdownInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TextInput from '../inputs/text-input';\nimport usePassivelyTrimmedInput from './use-passively-trimmed-input';\nimport useOptimisticValue from './use-optimistic-value';\n\nconst OptimisticTextInput = ({ value, onChange, onBlur, ...props }) => {\n  const [untrimmedValue, onChangeWithTrimmedInputs, onBlurWithTrimmedInputs] = usePassivelyTrimmedInput(value, onChange, onBlur);\n  const [optimisticValue, optimisticOnChange, optimisticOnBlur, optimisticError] = useOptimisticValue(\n    untrimmedValue,\n    onChangeWithTrimmedInputs,\n    onBlurWithTrimmedInputs,\n  );\n\n  return <TextInput {...props} value={optimisticValue} onChange={optimisticOnChange} onBlur={optimisticOnBlur} error={optimisticError} />;\n};\n\nOptimisticTextInput.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default OptimisticTextInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport WrappingTextInput from '../inputs/wrapping-text-input';\n\nimport usePassivelyTrimmedInput from './use-passively-trimmed-input';\nimport useOptimisticValue from './use-optimistic-value';\n\nconst OptimisticWrappingTextInput = ({ value, onChange, onBlur, ...props }) => {\n  const [untrimmedValue, onChangeWithTrimmedInputs, onBlurWithTrimmedInputs] = usePassivelyTrimmedInput(value, onChange, onBlur);\n  const [optimisticValue, optimisticOnChange, optimisticOnBlur, optimisticError] = useOptimisticValue(\n    untrimmedValue,\n    onChangeWithTrimmedInputs,\n    onBlurWithTrimmedInputs,\n  );\n\n  return <WrappingTextInput {...props} value={optimisticValue} error={optimisticError} onChange={optimisticOnChange} onBlur={optimisticOnBlur} />;\n};\n\nOptimisticWrappingTextInput.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default OptimisticWrappingTextInput;\n","import React from 'react';\nimport classnames from 'classnames';\nimport styles from './progress.styl';\n\nexport default ({ className, ...props }) => (\n  <progress className={classnames(className, styles.progress)} {...props} />\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"progress\":\"progress__progress___3cmwa\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport OptimisticTextInput from 'Components/fields/optimistic-text-input';\nimport Heading from 'Components/text/heading';\nimport VerifiedBadge from 'Components/verified-badge';\nimport { userIsTeamAdmin } from 'Models/team';\nimport { useCurrentUser } from '../../state/current-user';\n\nimport styles from './team-fields.styl';\n\nconst TeamNameInput = ({ name, onChange, verified }) => (\n  <OptimisticTextInput\n    labelText=\"Team Name\"\n    value={name}\n    onChange={onChange}\n    placeholder=\"What's its name?\"\n    postfix={verified ? <VerifiedBadge /> : null}\n  />\n);\n\nconst TeamUrlInput = ({ url, onChange }) => (\n  <OptimisticTextInput labelText=\"Team URL\" prefix=\"@\" value={url} onChange={onChange} placeholder=\"Short url?\" />\n);\n\nconst TeamFields = ({ team, updateName, updateUrl }) => {\n  const { currentUser } = useCurrentUser();\n  const isTeamAdmin = userIsTeamAdmin({ user: currentUser, team });\n  return isTeamAdmin ? (\n    <>\n      <Heading tagName=\"h1\">\n        <TeamNameInput name={team.name} onChange={updateName} verified={team.isVerified} />\n      </Heading>\n      <p className={styles.teamUrl}>\n        <TeamUrlInput url={team.url} onChange={(url) => updateUrl(url)} />\n      </p>\n    </>\n  ) : (\n    <>\n      <Heading tagName=\"h1\">\n        {team.name} {team.isVerified && <VerifiedBadge />}\n      </Heading>\n      <p className={styles.teamUrl}>@{team.url}</p>\n    </>\n  );\n};\n\nTeamFields.propTypes = {\n  team: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired,\n    isVerified: PropTypes.bool,\n  }).isRequired,\n  updateName: PropTypes.func.isRequired,\n  updateUrl: PropTypes.func.isRequired,\n};\n\nexport default TeamFields;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"teamUrl\":\"team-fields__teamUrl___1Tauo\"};","import React from 'react';\n\nimport useDebouncedValue from 'Hooks/use-debounced-value';\n\n/*\n\nUse Optimistic Value:\n\n- takes in an initial value for the input (this representes the real value the server last gave us)\n- takes in a way to update the server\n\non change:\n- we show them what they are typing (or editing in case of checkbox, etc), and OPTIMISTICALLY assume it all went according to plan\n- if the server hits an error:\n  - we display that error to the user\n  - and we continue to show what the user's input even though it's not saved\n- if the server succeeds:\n  - we pass along the response so that it can be stored in top level state later and passed back in again as props as the initial \"real\" value\n\non blur:\n- if the user was in an errored state:\n  - we show the last saved good state and remove the error\n\n*/\n\nexport default function useOptimisticValue(realValue, onChange, onBlur) {\n  // value undefined means that the field is unchanged from the 'real' value\n  const [state, setState] = React.useState({ value: undefined, error: null });\n\n  // as the user types we save that as state.value, later as the user saves, we reset the state.value to undefined and instead show whatever value is passed in\n  const optimisticOnChange = (newValue) => setState({ value: newValue, error: null });\n\n  // always show what the server knows, unless the user is currently typing something or we're loading an in-flight request\n  let optimisticValue = realValue;\n  if (state.value !== undefined) {\n    optimisticValue = state.value;\n  }\n\n  const debouncedValue = useDebouncedValue(state.value, 500);\n\n  React.useEffect(() => {\n    const ifUserHasTypedSinceLastSave = debouncedValue !== undefined;\n\n    if (ifUserHasTypedSinceLastSave) {\n      // if the value changes during the async action then ignore the result\n      const setStateIfStillRelevant = (newState) => setState((prevState) => (prevState.value === debouncedValue ? newState : prevState));\n\n      // this scope can't be async/await because it's an effect\n      onChange(debouncedValue).then(\n        () => {\n          setStateIfStillRelevant({ value: undefined, error: null });\n        },\n        (error) => {\n          const message =\n            (error && error.response && error.response.data && error.response.data.message) || 'Sorry, we had trouble saving. Try again later?';\n          setStateIfStillRelevant({ value: debouncedValue, error: message });\n        },\n      );\n    }\n  }, [debouncedValue]);\n\n  const optimisticOnBlur = (event) => {\n    // if you have already shown the user an error you can go ahead and hide it and revert back to last saved value\n    if (state.error) {\n      setState({ error: null, value: undefined });\n    }\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  return [optimisticValue, optimisticOnChange, optimisticOnBlur, state.error];\n}\n","import { useState } from 'react';\n\n// always show untrimmed version to user, always send out trimmed version to server, onBlur show what was sent to the server\nexport default function usePassivelyTrimmedInput(rawInput, asyncUpdate, onBlur) {\n  const [untrimmedValue, setUntrimmedValue] = useState(rawInput);\n\n  const displayedInputValue = rawInput === untrimmedValue.trim() ? untrimmedValue : rawInput;\n\n  const wrapAsyncUpdateWithTrimmedValue = (value) => {\n    setUntrimmedValue(value);\n    return asyncUpdate(value.trim());\n  };\n\n  const wrapOnBlur = (event) => {\n    setUntrimmedValue(rawInput.trim());\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  return [displayedInputValue, wrapAsyncUpdateWithTrimmedValue, wrapOnBlur];\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport OptimisticTextInput from './optimistic-text-input';\n\nconst UserLoginInput = ({ login, onChange }) => (\n  <OptimisticTextInput\n    labelText=\"User Login\"\n    value={login}\n    onChange={onChange}\n    placeholder=\"Nickname?\"\n    prefix=\"@\"\n  />\n);\n\nUserLoginInput.propTypes = {\n  login: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default UserLoginInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport OptimisticTextInput from './optimistic-text-input';\n\nconst UserNameInput = ({ name, onChange }) => (\n  <OptimisticTextInput\n    labelText=\"User Name\"\n    value={name}\n    onChange={onChange}\n    placeholder=\"What's your name?\"\n  />\n);\n\nUserNameInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default UserNameInput;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"footer__container___wLh_Z\",\"footerLinkWrap\":\"footer__footerLinkWrap___3A8JJ\",\"footerLink\":\"footer__footerLink___2oYQx\",\"teams\":\"footer__teams___3EVuF\",\"platformsIcon\":\"footer__platformsIcon___1Q_Lu\"};","import React from 'react';\nimport classnames from 'classnames';\nimport Image from 'Components/images/image';\nimport Emoji from 'Components/images/emoji';\nimport Link from 'Components/link';\nimport styles from './footer.styl';\n\nconst FooterLink = ({ className, href, track, children }) => (\n  <div className={classnames(styles.footerLinkWrap, className)}>\n    <Link className={styles.footerLink} to={href} data-track={`footer → ${track}`}>\n      {children}\n    </Link>\n  </div>\n);\n\nconst PlatformsIcon = () => (\n  <Image\n    className={styles.platformsIcon}\n    src=\"https://cdn.glitch.com/be1ad2d2-68ab-404a-82f4-6d8e98d28d93%2Ffor-platforms-icon.svg?1506442305188\"\n    alt=\"\"\n  />\n);\n\nconst Footer = () => (\n  <footer className={styles.container} role=\"contentinfo\">\n    <FooterLink href=\"/about\" track=\"about\">\n      About Glitch\n      <Emoji name=\"crystalBall\" />\n    </FooterLink>\n    <FooterLink href=\"/culture\" track=\"blog\">\n      Blog\n      <Emoji name=\"newspaper\" />\n    </FooterLink>\n    <FooterLink href=\"/help/\" track=\"faq\">\n      Help Center\n      <Emoji name=\"umbrella\" />\n    </FooterLink>\n    <FooterLink href=\"http://status.glitch.com/\" track=\"system status\">\n      System Status\n      <Emoji name=\"horizontalTrafficLight\" />\n    </FooterLink>\n    <FooterLink href=\"/legal\" track=\"legal stuff\">\n      Legal Stuff\n      <Emoji name=\"scales\" />\n    </FooterLink>\n    <FooterLink className={styles.teams} href=\"/teams\" track=\"platforms\">\n      <PlatformsIcon />\n      Glitch Teams\n    </FooterLink>\n  </footer>\n);\n\nexport default Footer;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"visuallyHidden\":\"global__visuallyHidden___2yhZB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header__header___3zl_a\",\"logoWrap\":\"header__logoWrap___y6g1C\",\"logo\":\"header__logo___1J035\",\"headerActions\":\"header__headerActions___P7Iou\",\"searchWrap\":\"header__searchWrap___ipT-2\",\"buttons\":\"header__buttons___2PukL\",\"buttonWrap\":\"header__buttonWrap___sP60F\"};","/* global EDITOR_URL */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport SearchForm from 'Components/search-form';\nimport Button from 'Components/buttons/button';\nimport SignInPop from 'Components/sign-in-pop';\nimport UserOptionsPop from 'Components/user-options-pop';\nimport Link, { TrackedExternalLink } from 'Components/link';\nimport { useCurrentUser } from 'State/current-user';\nimport NewProjectPop from './new-project-pop';\nimport Logo from './logo';\nimport styles from './header.styl';\n\nconst ResumeCoding = () => (\n  <TrackedExternalLink name=\"Resume Coding clicked\" to={EDITOR_URL}>\n    <Button type=\"cta\" size=\"small\" decorative>\n      Resume Coding\n    </Button>\n  </TrackedExternalLink>\n);\n\nconst Header = ({ searchQuery, showAccountSettingsOverlay, showNewStuffOverlay }) => {\n  const { currentUser, clear, superUserHelpers } = useCurrentUser();\n  return (\n    <header role=\"banner\" className={styles.header}>\n      <Link to=\"/\" className={styles.logoWrap}>\n        <Logo />\n      </Link>\n\n      <nav className={styles.headerActions}>\n        <div className={styles.searchWrap}>\n          <SearchForm defaultValue={searchQuery} />\n        </div>\n        <ul className={styles.buttons}>\n          <li className={styles.buttonWrap}>\n            <NewProjectPop />\n          </li>\n          {!!currentUser && !!currentUser.projects.length && (\n            <li className={styles.buttonWrap}>\n              <ResumeCoding />\n            </li>\n          )}\n          {!(currentUser && currentUser.login) && (\n            <li className={styles.buttonWrap}>\n              <SignInPop align=\"right\" />\n            </li>\n          )}\n          {!!currentUser && currentUser.login && (\n            <li className={styles.buttonWrap}>\n              <UserOptionsPop\n                user={currentUser}\n                signOut={clear}\n                showAccountSettingsOverlay={showAccountSettingsOverlay}\n                showNewStuffOverlay={showNewStuffOverlay}\n                superUserHelpers={superUserHelpers}\n              />\n            </li>\n          )}\n        </ul>\n      </nav>\n    </header>\n  );\n};\n\nHeader.propTypes = {\n  searchQuery: PropTypes.string,\n  showAccountSettingsOverlay: PropTypes.func.isRequired,\n  showNewStuffOverlay: PropTypes.func.isRequired,\n};\n\nHeader.defaultProps = {\n  searchQuery: '',\n};\n\nexport default Header;\n","import React, { useState, useEffect } from 'react';\nimport dayjs from 'dayjs';\nimport styles from './header.styl';\n\nconst LOGO_DAY = 'https://cdn.glitch.com/2bdfb3f8-05ef-4035-a06e-2043962a3a13%2Flogo-day.svg';\nconst LOGO_SUNSET = 'https://cdn.glitch.com/2bdfb3f8-05ef-4035-a06e-2043962a3a13%2Flogo-sunset.svg';\nconst LOGO_NIGHT = 'https://cdn.glitch.com/2bdfb3f8-05ef-4035-a06e-2043962a3a13%2Flogo-night.svg';\n\nconst LogoImage = ({ src }) => <img className={styles.logo} src={src} alt=\"Glitch\" />;\n\nfunction Logo() {\n  const [hour, setHour] = useState(new Date().getHours());\n  useEffect(() => {\n    const handle = window.setInterval(() => {\n      setHour(new Date().getHours());\n    }, dayjs.convert(5, 'minutes', 'ms'));\n\n    return () => window.clearInterval(handle);\n  }, []);\n\n  if (hour >= 16 && hour <= 18) return <LogoImage src={LOGO_SUNSET} />;\n  if (hour > 18 || hour <= 8) return <LogoImage src={LOGO_NIGHT} />;\n  return <LogoImage src={LOGO_DAY} />;\n}\n\nexport default Logo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Loader from 'Components/loader';\nimport Button from 'Components/buttons/button';\nimport { PopoverWithButton, PopoverDialog, PopoverSection, PopoverActions } from 'Components/popover';\nimport ResultsList from 'Components/containers/results-list';\nimport { TrackedExternalLink } from 'Components/link';\nimport { ProjectAvatar } from 'Components/images/avatar';\nimport { getRemixUrl } from 'Models/project';\nimport { useTracker } from 'State/segment-analytics';\nimport { createAPIHook } from 'State/api';\n\nimport styles from './new-project-pop.styl';\n\nconst importGitRepo = () => {\n  /* eslint-disable no-alert */\n  const repoUrl = window.prompt('Paste the full URL of your repository', 'https://github.com/orgname/reponame.git');\n  /* eslint-enable no-alert */\n  if (!repoUrl) {\n    return;\n  }\n  window.location.href = `/edit/#!/import/git?url=${repoUrl}`;\n};\n\nconst NewProjectResultItem = ({ project }) => (\n  <div className={styles.project}>\n    <div className={styles.projectAvatar}>\n      <ProjectAvatar project={project} />\n    </div>\n    <div className={styles.projectInfo}>\n      <div className={styles.projectDomain} title={project.domain}>\n        {project.domain}\n      </div>\n      {project.description.length > 0 && <div className={styles.projectDescription}>{project.description}</div>}\n    </div>\n  </div>\n);\n\nconst NewProjectPop = ({ projects }) => (\n  <PopoverDialog align=\"right\">\n    <PopoverSection>\n      {projects.length ? (\n        <ResultsList items={projects}>\n          {(project) => (\n            <TrackedExternalLink\n              key={project.id}\n              to={getRemixUrl(project.domain)}\n              name=\"New Project Clicked\"\n              properties={{\n                baseDomain: project.domain,\n                origin: 'community new project pop',\n              }}\n            >\n              <NewProjectResultItem project={project} />\n            </TrackedExternalLink>\n          )}\n        </ResultsList>\n      ) : (\n        <Loader />\n      )}\n    </PopoverSection>\n    <PopoverActions type=\"secondary\">\n      <Button size=\"small\" type=\"tertiary\" onClick={importGitRepo} matchBackground>\n        Clone from Git Repo\n      </Button>\n    </PopoverActions>\n  </PopoverDialog>\n);\nNewProjectPop.propTypes = {\n  projects: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      domain: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n};\n\nconst useNewProjectAPI = createAPIHook(async (api) => {\n  const projectIds = [\n    '929980a8-32fc-4ae7-a66f-dddb3ae4912c', // 'hello-webpage'\n    'a0fcd798-9ddf-42e5-8205-17158d4bf5bb', // 'hello-express'\n    'cb519589-591c-474f-8986-a513f22dbf88', // 'hello-sqlite'\n  ];\n  const idString = projectIds.map((id) => `id=${id}`).join('&');\n  // always request against the production API, with no token\n  // (this is necessary for it to work on glitch.development)\n  const { data } = await api.get(`https://api.glitch.com/v1/projects/by/id?${idString}`, {\n    headers: {\n      Authorization: '',\n    },\n  });\n  return projectIds.map((id) => data[id]);\n});\n\nfunction NewProjectPopButton() {\n  const { value } = useNewProjectAPI();\n  const projects = value || [];\n  const onOpen = useTracker('open new-project pop');\n\n  return (\n    <PopoverWithButton onOpen={onOpen} buttonProps={{ size: 'small' }} buttonText=\"New Project\">\n      {() => <NewProjectPop projects={projects} />}\n    </PopoverWithButton>\n  );\n}\n\nexport default NewProjectPopButton;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"project\":\"new-project-pop__project___2l3_r\",\"projectAvatar\":\"new-project-pop__projectAvatar___3ymm9\",\"projectInfo\":\"new-project-pop__projectInfo___11Yp2\",\"projectDomain\":\"new-project-pop__projectDomain___3SZ8u\",\"projectDescription\":\"new-project-pop__projectDescription___8FZq1\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TooltipContainer from 'Components/tooltips/tooltip-container';\nimport Image from 'Components/images/image';\nimport CollectionAvatarBase from 'Components/collection/defaultAvatar';\nimport { hexToRgbA } from 'Utils/color';\n\nimport { DEFAULT_TEAM_AVATAR, getAvatarUrl as getTeamAvatarUrl } from 'Models/team';\nimport { ANON_AVATAR_URL, getAvatarThumbnailUrl, getDisplayName } from 'Models/user';\nimport { FALLBACK_AVATAR_URL, getAvatarUrl as getProjectAvatarUrl } from 'Models/project';\nimport styles from './avatar.styl';\n\n// UserAvatar\n\nexport const Avatar = ({ name, src, color, srcFallback, type, hideTooltip, withinButton }) => {\n  const contents = (\n    <Image\n      width=\"32px\"\n      height=\"32px\"\n      src={src}\n      defaultSrc={srcFallback}\n      alt={name}\n      backgroundColor={color}\n      className={styles[type]}\n    />\n  );\n\n  if (!hideTooltip) {\n    return <TooltipContainer tooltip={name} target={contents} type=\"action\" id={`avatar-tooltip-${name}`} align={['left']} fallback={withinButton} />;\n  }\n  return contents;\n};\n\nAvatar.propTypes = {\n  name: PropTypes.string.isRequired,\n  src: PropTypes.string.isRequired,\n  srcFallback: PropTypes.string,\n  type: PropTypes.string.isRequired,\n  color: PropTypes.string,\n  hideTooltip: PropTypes.bool,\n  withinButton: PropTypes.bool,\n};\n\nAvatar.defaultProps = {\n  color: null,\n  srcFallback: '',\n  hideTooltip: false,\n};\n\nexport const TeamAvatar = ({ team, size, hideTooltip }) => (\n  <Avatar\n    name={team.name}\n    src={getTeamAvatarUrl({ ...team, size })}\n    srcFallback={DEFAULT_TEAM_AVATAR}\n    type=\"team\"\n    hideTooltip={hideTooltip}\n  />\n);\nTeamAvatar.propTypes = {\n  team: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    hasAvatarImage: PropTypes.bool.isRequired,\n  }).isRequired,\n  hideTooltip: PropTypes.bool,\n  size: PropTypes.oneOf(['small', 'large']),\n};\nTeamAvatar.defaultProps = {\n  hideTooltip: false,\n  size: 'small',\n};\n\nexport const UserAvatar = ({ user, suffix = '', hideTooltip, withinButton }) => (\n  <Avatar\n    name={getDisplayName(user) + suffix}\n    src={getAvatarThumbnailUrl(user)}\n    color={user.color}\n    srcFallback={ANON_AVATAR_URL}\n    type=\"user\"\n    hideTooltip={hideTooltip}\n    withinButton={withinButton}\n  />\n);\nUserAvatar.propTypes = {\n  user: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    login: PropTypes.string,\n    name: PropTypes.string,\n    avatarThumbnailUrl: PropTypes.string,\n    color: PropTypes.string,\n  }).isRequired,\n  suffix: PropTypes.string,\n  hideTooltip: PropTypes.bool,\n  withinButton: PropTypes.bool,\n};\n\nUserAvatar.defaultProps = {\n  suffix: '',\n  hideTooltip: false,\n  withinButton: false,\n};\n\nexport const ProjectAvatar = ({ project, hasAlt }) => (\n  <Avatar\n    name={hasAlt ? project.domain : ''}\n    src={getProjectAvatarUrl(project.id)}\n    srcFallback={FALLBACK_AVATAR_URL}\n    type=\"team\"\n    hideTooltip\n  />\n);\n\nProjectAvatar.propTypes = {\n  project: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    domain: PropTypes.string.isRequired,\n  }).isRequired,\n  hasAlt: PropTypes.bool,\n};\n\nProjectAvatar.defaultProps = {\n  hasAlt: false,\n};\n\nexport const CollectionAvatar = ({ collection }) => <CollectionAvatarBase backgroundFillColor={hexToRgbA(collection.coverColor)} />;\n\nCollectionAvatar.propTypes = {\n  collection: PropTypes.shape({\n    coverColor: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"avatar__user___3VQw9\",\"team\":\"avatar__team___1ef3g\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport styles from './emoji.styl';\n\nconst cx = classNames.bind(styles);\n\nconst EMOJIS = {\n  ambulance: 'https://cdn.glitch.com/cc880f8d-a84f-4909-b676-497522a8c625%2Fambulance.png',\n  arrowDown: 'https://cdn.glitch.com/20b03a49-e2c4-45fb-b411-c56cf5a734d4%2Farrow-down.png',\n  balloon: 'https://cdn.gomix.com/2bdfb3f8-05ef-4035-a06e-2043962a3a13%2Fballoon.png',\n  bentoBox: 'https://cdn.glitch.com/55f8497b-3334-43ca-851e-6c9780082244%2Fbento-box.png',\n  bicep: 'https://cdn.glitch.com/a7b5cfd3-307b-4b99-bc1c-ca96f720521a%2Fbiceps.png?1555609837062',\n  bomb: 'https://cdn.glitch.com/f34c5d19-c958-40f6-b11f-7a4542a5ae5f%2Fbomb.png',\n  bouquet: 'https://cdn.glitch.com/1afc1ac4-170b-48af-b596-78fe15838ad3%2Fbouquet.png',\n  carpStreamer: 'https://cdn.glitch.com/f7224274-1330-4022-a8f2-8ae09dbd68a8%2Fcarp_streamer.png',\n  clapper: 'https://cdn.glitch.com/25a45fb6-d565-483a-87d2-f944befeb36b%2Fclapper.png',\n  creditCard: 'https://cdn.glitch.com/c53fd895-ee00-4295-b111-7e024967a033%2Fcredit-card.png',\n  crystalBall: 'https://cdn.glitch.com/d1106f7a-2623-4461-8326-5945e5b97d8b%2Fcrystal-ball_1f52e.png',\n  diamondSmall: 'https://cdn.glitch.com/180b5e22-4649-4c71-9a21-2482eb557c8c%2Fdiamond-small.svg',\n  dogFace: 'https://cdn.glitch.com/03736932-82dc-40e8-8dc7-93330c933143%2Fdog-face.png',\n  email: 'https://cdn.glitch.com/aebac4f9-ae14-4d54-aa60-de46dac3b603%2Femail.png',\n  eyes: 'https://cdn.glitch.com/9c72d8a2-2546-4c4c-9e97-2e6450752c11%2Feyes.png',\n  facebook: 'https://cdn.gomix.com/2bdfb3f8-05ef-4035-a06e-2043962a3a13%2Ffacebook-logo.png',\n  faceExpressionless: 'https://cdn.glitch.com/a7b5cfd3-307b-4b99-bc1c-ca96f720521a%2Fface-expressionless.png?1555609837739',\n  faceSlightlySmiling: 'https://cdn.glitch.com/a7b5cfd3-307b-4b99-bc1c-ca96f720521a%2Fface-slightly-smiling.png?1555609837380',\n  fastDown: 'https://cdn.glitch.com/c53fd895-ee00-4295-b111-7e024967a033%2Ffast_down.png',\n  fastUp: 'https://cdn.glitch.com/c53fd895-ee00-4295-b111-7e024967a033%2Ffast_up.png',\n  fishingPole: 'https://cdn.glitch.com/55f8497b-3334-43ca-851e-6c9780082244%2Ffishing_pole.png',\n  framedPicture: 'https://cdn.glitch.com/f7224274-1330-4022-a8f2-8ae09dbd68a8%2Fframed_picture.png',\n  google: 'https://cdn.glitch.com/2bdfb3f8-05ef-4035-a06e-2043962a3a13%2FgoogleLogo.png',\n  herb: 'https://cdn.glitch.com/c53fd895-ee00-4295-b111-7e024967a033%2Fherb.png',\n  key: 'https://cdn.glitch.com/006d6bcf-f2b7-4a29-b55d-c097b491e09c%2Fkey.png?1555429359426',\n  mailboxOpen: 'https://cdn.glitch.com/006d6bcf-f2b7-4a29-b55d-c097b491e09c%2Fopen-mailbox.png?1555429351403',\n  horizontalTrafficLight: 'https://cdn.glitch.com/d1106f7a-2623-4461-8326-5945e5b97d8b%2Fhorizontal-traffic-light_1f6a5.png',\n  index: 'https://cdn.glitch.com/997e1260-f54f-47ad-936b-1eca8e555a51%2Findex.png?1555620428434',\n  microphone: 'https://cdn.glitch.com/9c72d8a2-2546-4c4c-9e97-2e6450752c11%2Fmicrophone.png',\n  newspaper: 'https://cdn.glitch.com/d1106f7a-2623-4461-8326-5945e5b97d8b%2Fnewspaper_1f4f0.png',\n  octocat: 'https://gomix.com/images/emojis/github-logo-light.svg',\n  park: 'https://cdn.glitch.com/4f4a169a-9b63-4daa-8b6a-0e50d5c06e25%2Fnational-park_1f3de.png',\n  playButton: 'https://cdn.glitch.com/6ce807b5-7214-49d7-aadd-f11803bc35fd%2Fplay.svg',\n  policeOfficer: 'https://cdn.glitch.com/d1106f7a-2623-4461-8326-5945e5b97d8b%2Fpolice-officer_1f46e.png',\n  pushpin: 'https://cdn.glitch.com/55f8497b-3334-43ca-851e-6c9780082244%2Fpushpin.png',\n  rainbow: 'https://cdn.glitch.com/e5154318-7816-4ec9-a72a-a0e767031e99%2Frainbow.png',\n  scales: 'https://cdn.glitch.com/6c8c1a17-f6e4-41c4-8861-378c4fad4c22%2Fscales_64.png',\n  sick: 'https://cdn.glitch.com/4f4a169a-9b63-4daa-8b6a-0e50d5c06e25%2Fface-with-thermometer_1f912.png',\n  slack: 'https://cdn.glitch.com/1eaf9cb4-5150-4c24-bb91-28623c3b9da4%2Fslack.svg',\n  sparkles: 'https://cdn.glitch.com/f7224274-1330-4022-a8f2-8ae09dbd68a8%2Fsparkles.png',\n  sparklingHeart: 'https://cdn.glitch.com/f7224274-1330-4022-a8f2-8ae09dbd68a8%2Fsparkling_heart.png',\n  spiralNotePad: 'https://cdn.glitch.com/78273300-9a1e-4c5f-804c-5e7c3c27af17%2Fspiral_note_pad.png',\n  sunglasses: 'https://cdn.glitch.com/6ce807b5-7214-49d7-aadd-f11803bc35fd%2Fshow-app.svg',\n  thumbsDown: 'https://cdn.glitch.com/55f8497b-3334-43ca-851e-6c9780082244%2Fthumbs_down.png',\n  thumbsUp: 'https://cdn.glitch.com/c53fd895-ee00-4295-b111-7e024967a033%2Fthumbs-up.png',\n  umbrella: 'https://cdn.glitch.com/d1106f7a-2623-4461-8326-5945e5b97d8b%2Fumbrella_2602.png',\n  wave: 'https://cdn.glitch.com/55f8497b-3334-43ca-851e-6c9780082244%2Fwave.png',\n};\n\n/**\n * Emoji Component\n */\n\nconst Emoji = ({ name, inTitle, alt }) => {\n  const classNameObj = { emoji: true, [name]: true, inTitle };\n\n  const className = cx(classNameObj);\n\n  return <img className={className} src={EMOJIS[name]} alt={alt} />;\n};\n\nEmoji.propTypes = {\n  /** element(s) to display in the button */\n  name: PropTypes.oneOf(Object.keys(EMOJIS)).isRequired,\n  inTitle: PropTypes.bool,\n  alt: PropTypes.string,\n};\n\nEmoji.defaultProps = {\n  inTitle: false,\n  alt: '',\n};\n\nexport default Emoji;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"emoji\":\"emoji__emoji___1lQzb\",\"inTitle\":\"emoji__inTitle___3rl5N\",\"facebook\":\"emoji__facebook___3bCpX\",\"google\":\"emoji__google___2ZEZL\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * 🖼️ Image Component\n *\n * @param {string} src - Image source\n * @param {array} srcSet - Responsive image source set\n * @param {alt} alt - Alternative text\n * @param {number} width - Image width\n * @param {number} height - Image height\n * @param {string} role - Image role (typically presentation)\n * @param {object | string} className - extra classes to be passed down to the component\n * @param {string} backgroundColor - If we want to fill the space behind the image with a color\n * @param {boolean} backgroundImage - If we want the image to be rendered as a background image\n */\n\nconst handleDefaultSrc = (defaultSrc) => (event) => {\n  if (defaultSrc && event.target.src !== defaultSrc) {\n    event.target.src = defaultSrc;\n  }\n};\n\nconst Image = ({ alt, backgroundColor, backgroundImage, backgroundRatio, className, height, src, srcSet, sizes, width, defaultSrc }) =>\n  !backgroundImage ? (\n    <img\n      alt={alt}\n      className={className || undefined}\n      height={height || undefined}\n      sizes={sizes}\n      src={src}\n      srcSet={srcSet.length > 0 ? srcSet : undefined}\n      style={backgroundColor ? { backgroundColor } : undefined}\n      width={width || undefined}\n      onError={handleDefaultSrc(defaultSrc)}\n    />\n  ) : (\n    <div\n      className={className || undefined}\n      style={{\n        backgroundColor,\n        backgroundImage: `url(${src})`,\n        paddingBottom: `${backgroundRatio}%`,\n        backgroundRepeat: 'no-repeat',\n        width,\n        height,\n      }}\n    />\n  );\n\nImage.propTypes = {\n  alt: PropTypes.string.isRequired,\n  backgroundColor: PropTypes.string,\n  backgroundImage: PropTypes.bool,\n  backgroundRatio: PropTypes.number,\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Object)]),\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  src: PropTypes.string.isRequired,\n  srcSet: PropTypes.array,\n  sizes: PropTypes.string,\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  defaultSrc: PropTypes.string,\n};\n\nImage.defaultProps = {\n  backgroundColor: null,\n  backgroundImage: false,\n  backgroundRatio: 65,\n  className: '',\n  height: '100%',\n  srcSet: [],\n  sizes: '',\n  width: '100%',\n  defaultSrc: null,\n};\n\nexport default Image;\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { sample } from 'lodash';\nimport styles from './mask-image.styl';\n\nconst maskClassesWithDash = ['mask-1', 'mask-2', 'mask-3', 'mask-4', 'mask-5'];\nconst maskClasses = maskClassesWithDash.map((className) => className.replace('-', ''));\n\nconst MaskImage = ({ maskClass: controlledMaskClass, ...props }) => {\n  const randomMaskClass = useRef(sample(maskClasses));\n  const maskClass = controlledMaskClass || randomMaskClass.current;\n\n  return <img alt=\"\" {...props} className={classnames(styles.mask, styles[maskClass.replace('-', '')])} />;\n};\n\nMaskImage.propTypes = {\n  maskClass: PropTypes.oneOf([...maskClasses, ...maskClassesWithDash]),\n};\n\nMaskImage.defaultProps = {\n  maskClass: null,\n};\n\nexport default MaskImage;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mask\":\"mask-image__mask___KTBy6\",\"mask1\":\"mask-image__mask1___1HRA9\",\"mask2\":\"mask-image__mask2___YFux1\",\"mask3\":\"mask-image__mask3___1NjZL\",\"mask4\":\"mask-image__mask4___24-pG\",\"mask5\":\"mask-image__mask5___2yyNz\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './color.styl';\n\nconst Color = ({ value, onChange }) => (\n  <input className={styles.colorPicker} type=\"color\" value={value} onChange={(e) => onChange(e.target.value)} style={{ backgroundColor: value }} />\n);\n\nColor.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Color;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorPicker\":\"color__colorPicker___JpN3J\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst InputErrorIcon = ({ className }) => (\n  <span role=\"img\" aria-label=\"Warning\" className={className}>\n    🚒\n  </span>\n);\n\nInputErrorIcon.propTypes = {\n  className: PropTypes.string,\n};\n\nInputErrorIcon.defaultProps = {\n  className: undefined,\n};\n\nexport default InputErrorIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './input-error-message.styl';\n\nconst InputErrorMessage = ({ children }) => <span className={styles.errorMessage}>{children}</span>;\n\nInputErrorMessage.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default InputErrorMessage;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMessage\":\"input-error-message__errorMessage___2-MLa\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TextArea from './text-area';\nimport Markdown from '../text/markdown';\n\nimport styles from './markdown-input.styl';\n\nconst MarkdownInput = ({ allowImages, error, onBlur: outerOnBlur, onChange, placeholder, value }) => {\n  const [focused, setFocused] = React.useState(false);\n  const onFocus = () => setFocused(true);\n  const onBlur = (event) => {\n    setFocused(false);\n    outerOnBlur(event);\n  };\n  if (error || focused || !value.trim()) {\n    return (\n      <TextArea\n        autoFocus={focused}\n        error={error}\n        onBlur={onBlur}\n        onChange={onChange}\n        onFocus={onFocus}\n        placeholder={placeholder}\n        value={value}\n      />\n    );\n  }\n  return (\n    <div\n      className={styles.fakeInput}\n      aria-label={placeholder}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      role=\"textbox\" // eslint-disable-line jsx-a11y/no-noninteractive-element-to-interactive-role\n      tabIndex={0}\n    >\n      <Markdown allowImages={allowImages}>{value}</Markdown>\n    </div>\n  );\n};\n\nMarkdownInput.propTypes = {\n  allowImages: PropTypes.bool,\n  error: PropTypes.node,\n  onBlur: PropTypes.func,\n  onChange: PropTypes.func.isRequired,\n  placeholder: PropTypes.string,\n  value: PropTypes.string.isRequired,\n};\n\nMarkdownInput.defaultProps = {\n  allowImages: true,\n  error: null,\n  onBlur: () => {},\n  placeholder: null,\n};\n\nexport default MarkdownInput;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fakeInput\":\"markdown-input__fakeInput___EDZzX\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport TextAreaAutosize from 'react-textarea-autosize';\nimport useUniqueId from 'Hooks/use-unique-id';\nimport InputErrorMessage from './input-error-message';\nimport InputErrorIcon from './input-error-icon';\n\nimport styles from './text-area.styl';\n\nconst TextArea = ({ className, autoFocus, disabled, error, name, onBlur, onChange, onFocus, placeholder, value }) => {\n  const uniqueId = useUniqueId();\n  return (\n    <label className={styles.inputWrap} htmlFor={uniqueId}>\n      <div className={styles.inputBorder}>\n        <TextAreaAutosize\n          autoFocus={autoFocus} // eslint-disable-line jsx-a11y/no-autofocus\n          className={classnames(styles.input, className)}\n          disabled={disabled}\n          id={uniqueId}\n          name={name}\n          onBlur={onBlur}\n          onChange={(evt) => onChange(evt.target.value)}\n          onFocus={onFocus}\n          placeholder={placeholder}\n          value={value}\n        />\n        {!!error && <InputErrorIcon className={styles.errorIcon} />}\n      </div>\n      {!!error && <InputErrorMessage>{error}</InputErrorMessage>}\n    </label>\n  );\n};\n\nTextArea.propTypes = {\n  autoFocus: PropTypes.bool,\n  disabled: PropTypes.bool,\n  error: PropTypes.node,\n  name: PropTypes.string,\n  onBlur: PropTypes.func,\n  onChange: PropTypes.func.isRequired,\n  onFocus: PropTypes.func,\n  placeholder: PropTypes.string,\n  value: PropTypes.string.isRequired,\n  className: PropTypes.string,\n};\n\nTextArea.defaultProps = {\n  autoFocus: false,\n  disabled: false,\n  error: null,\n  name: undefined,\n  onBlur: null,\n  onFocus: null,\n  placeholder: undefined,\n  className: '',\n};\n\nexport default TextArea;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputWrap\":\"text-area__inputWrap___xpW5J\",\"inputBorder\":\"text-area__inputBorder___5Ogp7\",\"input\":\"text-area__input___29uV6\",\"errorIcon\":\"text-area__errorIcon___2eSYM\"};","import React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { pickBy } from 'lodash';\n\nimport useUniqueId from 'Hooks/use-unique-id';\nimport InputErrorMessage from './input-error-message';\nimport InputErrorIcon from './input-error-icon';\n\nimport styles from './text-input.styl';\nimport { visuallyHidden } from '../global.styl';\n\nconst TYPES = ['email', 'password', 'search', 'text'];\n\nconst InputPart = ({ children, className }) => <span className={classNames(styles.inputPart, className)}>{children}</span>;\n\nconst TextInput = forwardRef(({\n  autoFocus,\n  className,\n  disabled,\n  error,\n  labelText,\n  maxLength,\n  name,\n  onChange,\n  onBlur,\n  onFocus,\n  opaque,\n  placeholder,\n  postfix,\n  prefix,\n  testingId,\n  type,\n  value,\n  ...props\n}, ref) => {\n  const uniqueId = useUniqueId();\n  const outerClassName = classNames(className, styles.outer);\n  const borderClassName = classNames(styles.inputBorder, {\n    [styles.underline]: !opaque,\n    [styles.opaque]: opaque,\n  });\n  const inputClassName = classNames(styles.inputPart, styles.input, {\n    [styles.search]: type === 'search',\n  });\n  const eventProps = pickBy(props, (_, key) => key.startsWith('on'));\n  return (\n    <label className={outerClassName} htmlFor={uniqueId}>\n      <span className={visuallyHidden}>{labelText}</span>\n      <span className={borderClassName}>\n        {!!prefix && <InputPart>{prefix}</InputPart>}\n        <input\n          {...eventProps}\n          ref={ref}\n          autoFocus={autoFocus} // eslint-disable-line jsx-a11y/no-autofocus\n          className={inputClassName}\n          disabled={disabled}\n          id={uniqueId}\n          data-cy={testingId}\n          maxLength={maxLength}\n          name={name}\n          onChange={(evt) => onChange(evt.target.value)}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          placeholder={placeholder}\n          type={type}\n          value={value}\n          spellCheck={type !== 'email' && type !== 'password'}\n        />\n        {!!error && (\n          <InputPart className={styles.errorIcon}>\n            <InputErrorIcon />\n          </InputPart>\n        )}\n        {!!postfix && <InputPart>{postfix}</InputPart>}\n      </span>\n      {!!error && <InputErrorMessage>{error}</InputErrorMessage>}\n    </label>\n  );\n});\n\nTextInput.propTypes = {\n  autoFocus: PropTypes.bool,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  error: PropTypes.node,\n  labelText: PropTypes.string.isRequired,\n  maxLength: PropTypes.number,\n  name: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  onBlur: PropTypes.func,\n  onFocus: PropTypes.func,\n  opaque: PropTypes.bool,\n  placeholder: PropTypes.string,\n  postfix: PropTypes.node,\n  prefix: PropTypes.node,\n  testingId: PropTypes.string,\n  type: PropTypes.oneOf(TYPES),\n  value: PropTypes.string.isRequired,\n};\n\nTextInput.defaultProps = {\n  autoFocus: false,\n  className: '',\n  disabled: false,\n  error: null,\n  maxLength: undefined,\n  name: undefined,\n  onBlur: undefined,\n  onFocus: undefined,\n  opaque: false,\n  placeholder: undefined,\n  postfix: null,\n  prefix: null,\n  testingId: undefined,\n  type: 'text',\n};\n\nexport default TextInput;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"outer\":\"text-input__outer___2jjOE\",\"inputBorder\":\"text-input__inputBorder___dAthQ\",\"underline\":\"text-input__underline___3vgKw\",\"inputPart\":\"text-input__inputPart___1Z3xX\",\"opaque\":\"text-input__opaque___1Dj-E\",\"errorIcon\":\"text-input__errorIcon___3p7UI\",\"input\":\"text-input__input___1hEMW\",\"search\":\"text-input__search___1lw6B\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TextArea from './text-area';\n\nconst WrappingTextInput = ({ onChange, ...props }) => {\n  const onChangeFilter = (value) => onChange(value.replace(/\\r?\\n/g, ''));\n  return <TextArea {...props} onChange={onChangeFilter} />;\n};\n\nWrappingTextInput.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n\nexport default WrappingTextInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Link from 'Components/link';\nimport Logo from 'Components/header/logo';\nimport Heading from 'Components/text/heading';\n\nimport styles from './auth-layout.styl';\n\nconst AuthLayout = ({ children }) => (\n  <div className={styles.layout}>\n    <div className={styles.container}>\n      <div className={styles.content}>\n        <div className={styles.about}>\n          <div className={styles.logo}>\n            <Link to=\"/\">\n              <Logo />\n            </Link>\n          </div>\n          <div className={styles.whatIsGlitch}>\n            <Heading tagName=\"h1\">Glitch is the friendly community where anyone can create the web</Heading>\n          </div>\n        </div>\n        <div className={styles.form}>\n          {children}\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nAuthLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default AuthLayout;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"auth-layout__layout___2drx8\",\"container\":\"auth-layout__container___1UsL1\",\"content\":\"auth-layout__content___19SCO\",\"about\":\"auth-layout__about___zmgON\",\"logo\":\"auth-layout__logo___Pcz83\",\"whatIsGlitch\":\"auth-layout__whatIsGlitch___1PeFS\",\"form\":\"auth-layout__form___1ATuW\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport Helmet from 'react-helmet';\nimport ReactKonami from 'react-konami';\n\nimport Header from 'Components/header';\nimport Footer from 'Components/footer';\nimport AccountSettingsContainer from 'Components/account-settings-overlay';\nimport NewStuffContainer from 'Components/new-stuff';\nimport ErrorBoundary from 'Components/error-boundary';\n\nimport styles from './styles.styl';\n\nconst Layout = withRouter(({ children, searchQuery, history }) => (\n  <div className={styles.content}>\n    <Helmet title=\"Glitch\" />\n    <NewStuffContainer>\n      {(showNewStuffOverlay) => (\n        <AccountSettingsContainer>\n          {(showAccountSettingsOverlay) => (\n            <div className={styles.headerWrap}>\n              <Header searchQuery={searchQuery} showAccountSettingsOverlay={showAccountSettingsOverlay} showNewStuffOverlay={showNewStuffOverlay} />\n            </div>\n          )}\n        </AccountSettingsContainer>\n      )}\n    </NewStuffContainer>\n    <ErrorBoundary>{children}</ErrorBoundary>\n    <Footer />\n    <ErrorBoundary fallback={null}>\n      <ReactKonami easterEgg={() => history.push('/secret')} />\n    </ErrorBoundary>\n  </div>\n));\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n  searchQuery: PropTypes.string,\n};\nLayout.defaultProps = {\n  searchQuery: '',\n};\n\nexport default Layout;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"styles__content___1YCSq\",\"header-wrap\":\"styles__header-wrap___3Jmpf\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link as RouterLink } from 'react-router-dom';\n\nimport { getLink as getCollectionLink } from 'Models/collection';\nimport { getLink as getProjectLink } from 'Models/project';\nimport { getLink as getTeamLink } from 'Models/team';\nimport { getLink as getUserLink } from 'Models/user';\nimport WrappingLink from './wrapping-link';\nimport TrackedExternalLink from './tracked-external-link';\n\nexport { WrappingLink, TrackedExternalLink };\n\nconst external = window.EXTERNAL_ROUTES ? Array.from(window.EXTERNAL_ROUTES) : [];\n\nconst Link = React.forwardRef(({ to, children, ...props }, ref) => {\n  if (typeof to === 'string') {\n    const currentUrl = new URL(window.location.href);\n    const targetUrl = new URL(to, currentUrl);\n\n    if (targetUrl.origin !== currentUrl.origin || external.some((route) => targetUrl.pathname.startsWith(route))) {\n      return (\n        <a href={to} {...props} ref={ref}>\n          {children}\n        </a>\n      );\n    }\n\n    to = {\n      pathname: targetUrl.pathname,\n      search: targetUrl.search,\n      hash: targetUrl.hash,\n    };\n  }\n\n  return (\n    <RouterLink to={to} {...props} innerRef={ref}>\n      {children}\n    </RouterLink>\n  );\n});\nLink.propTypes = {\n  to: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport const CollectionLink = ({ collection, children, ...props }) => (\n  <Link to={getCollectionLink(collection)} {...props} aria-label={collection.name}>\n    {children}\n  </Link>\n);\nCollectionLink.propTypes = {\n  collection: PropTypes.oneOfType([\n    PropTypes.shape({\n      team: PropTypes.PropTypes.shape({\n        url: PropTypes.string.isRequired,\n      }).isRequired,\n      url: PropTypes.string.isRequired,\n    }),\n    PropTypes.shape({\n      user: PropTypes.PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        login: PropTypes.string,\n      }).isRequired,\n      url: PropTypes.string.isRequired,\n    }),\n  ]).isRequired,\n};\n\nexport const ProjectLink = ({ project, children, ...props }) => (\n  <Link to={getProjectLink(project)} {...props}>\n    {children}\n  </Link>\n);\nProjectLink.propTypes = {\n  project: PropTypes.shape({\n    domain: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport const TeamLink = ({ team, children, ...props }) => (\n  <Link to={getTeamLink(team)} {...props}>\n    {children}\n  </Link>\n);\nTeamLink.propTypes = {\n  team: PropTypes.shape({\n    url: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport const UserLink = ({ user, children, ...props }) => (\n  <Link to={getUserLink(user)} {...props}>\n    {children}\n  </Link>\n);\nUserLink.propTypes = {\n  user: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    login: PropTypes.string,\n  }).isRequired,\n};\n\nexport default Link;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTrackedLink } from 'State/segment-analytics';\n\n// this uses segment's trackLink, which stalls the page load until the analytics request is done\n// it forces a full page load at the end, so don't use it for links within the community site\nconst TrackedExternalLink = ({ children, name, properties, to, ...props }) => {\n  const ref = useTrackedLink(name, properties);\n  return (\n    <a href={to} {...props} ref={ref}>\n      {children}\n    </a>\n  );\n};\nTrackedExternalLink.propTypes = {\n  children: PropTypes.node.isRequired,\n  name: PropTypes.string.isRequired,\n  properties: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  to: PropTypes.string.isRequired,\n};\nTrackedExternalLink.defaultProps = {\n  properties: {},\n};\n\nexport default TrackedExternalLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { withRouter } from 'react-router-dom';\n\n// react tells me that nested <a> tags are bad and I shouldn't do that\n// so we will replace the outer tags with a special on click <div> tag\n// which will act like a link (or as close as I can get via nice code)\n\nconst WrappingLink = withRouter(({ href, children, className, style, history }) => {\n  const handler = (evt) => {\n    // Real links and interactive elements take priority\n    if (evt.target.closest('a[href], button, input')) return;\n    // Make sure there wasn't a clicky div inside this clicky div\n    if (evt.target.closest('[data-href]') !== evt.currentTarget) return;\n    // Ok, this click is real. Do the thing\n    history.push(href);\n  };\n  return (\n    <div data-href onClick={handler} className={className} style={style} role=\"presentation\">\n      {children}\n    </div>\n  );\n});\n\nWrappingLink.propTypes = {\n  href: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n  style: PropTypes.object,\n};\n\nexport default WrappingLink;\n","import React from 'react';\nimport styles from './loader.styl';\n\nconst Loader = () => (\n  <div className={styles.loader}>\n    <div className={styles.moon} />\n    <div className={styles.earth} />\n    <div className={styles.asteroid} />\n    <div className={styles.asteroidDust} />\n  </div>\n);\n\nexport default Loader;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"loader__loader___2mXDN\",\"moon\":\"loader__moon___82wJl\",\"slideMoon\":\"loader__slideMoon___1t3Aw\",\"earth\":\"loader__earth___j0Up0\",\"slideEarth\":\"loader__slideEarth____gbQt\",\"asteroid\":\"loader__asteroid___13Yfi\",\"slideAsteroid\":\"loader__slideAsteroid___1QOe8\",\"asteroidDust\":\"loader__asteroidDust___1AECz\",\"slideAsteroidDust\":\"loader__slideAsteroidDust___4hQlk\"};","import React from 'react';\n\nimport Heading from 'Components/text/heading';\nimport Image from 'Components/images/image';\nimport Link from 'Components/link';\nimport Grid from 'Components/containers/grid';\nimport categories from '../../curated/categories';\nimport styles from './more-ideas.styl';\n\nconst MoreIdeas = () => (\n  <section className={styles.container}>\n    <Heading tagName=\"h2\">More Ideas</Heading>\n    <Grid items={categories} className={styles.grid}>\n      {(category) => (\n        <Link className={styles.link} to={category.url} style={{ backgroundColor: category.color }}>\n          <Image className={styles.image} src={category.avatarUrl} alt=\"\" />\n          <div>{category.name}</div>\n        </Link>\n      )}\n    </Grid>\n  </section>\n);\n\nexport default MoreIdeas;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"more-ideas__grid___1qAER\",\"link\":\"more-ideas__link___JHKsc\",\"image\":\"more-ideas__image___22H0x\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Pluralize from 'react-pluralize';\n\nimport useDebouncedValue from 'Hooks/use-debounced-value';\nimport TextInput from 'Components/inputs/text-input';\nimport PasswordStrength from './password-strength';\n\nimport styles from './new-password-input.styl';\n\n// top worst passwords from Splashdata (https://en.wikipedia.org/wiki/List_of_the_most_common_passwords#cite_note-splashdata2018-10)\n// edited to only include those with at least 8-character\n// users aren't allowed to set their password to any of these items\nconst weakPWs = [\n  'password',\n  '123456789',\n  '12345678',\n  '11111111',\n  'sunshine',\n  'iloveyou',\n  'princess',\n  'football',\n  '!@#$%^&*',\n  'aa123456',\n  'password1',\n  'qwerty123',\n];\n\nconst matchErrorMsg = 'Passwords do not match';\nconst weakPWErrorMsg = 'Password is too common';\n\nconst pwMinCharCount = 8;\n\nconst NewPasswordInput = ({ disabled, onChange }) => {\n  const [password, setPassword] = React.useState('');\n  const [password2, setPassword2] = React.useState('');\n\n  const passwordConfirmError = useDebouncedValue(password && password2 && password !== password2, 500);\n\n  // if password is part of weak pw list, show it as weak\n  // has capital letter(s) = +1\n  // has number(s) = +1\n  // has special characters = +1\n  // total = strength with 3=strong (💪), 1-2= ok (🙂), 0 = weak (😑)\n  let weakPasswordError = false;\n  let pwStrength = 0;\n  if (!weakPWs.includes(password)) {\n    const hasCapScore = /^(?=.*[A-Z])/.test(password) ? 1 : 0;\n    const hasNumScore = /^(?=.*\\d)/.test(password) ? 1 : 0;\n    const hasCharScore = /[!@#$%^&*(),.?\":{}|<>]/.test(password) ? 1 : 0;\n    pwStrength = hasCapScore + hasNumScore + hasCharScore;\n  } else {\n    weakPasswordError = true;\n  }\n\n  React.useEffect(() => {\n    if (password.length >= pwMinCharCount && !weakPasswordError && password === password2) {\n      onChange(password);\n    } else {\n      onChange(null);\n    }\n  }, [password, password2, weakPasswordError]);\n\n  return (\n    <>\n      <TextInput\n        value={password}\n        type=\"password\"\n        labelText=\"password\"\n        placeholder=\"new password\"\n        onChange={setPassword}\n        disabled={disabled}\n        error={weakPasswordError ? weakPWErrorMsg : null}\n      />\n\n      {password.length >= pwMinCharCount ? (\n        <PasswordStrength strength={pwStrength} />\n      ) : (\n        password.length > 0 && (\n          <div className={styles.passwordLength}>\n            <span>\n              <Pluralize count={pwMinCharCount - password.length} singular=\"character\" /> to go....\n            </span>\n          </div>\n        )\n      )}\n\n      <TextInput\n        value={password2}\n        type=\"password\"\n        labelText=\"confirm new password\"\n        placeholder=\"confirm new password\"\n        onChange={setPassword2}\n        disabled={disabled}\n        error={passwordConfirmError ? matchErrorMsg : null}\n      />\n    </>\n  );\n};\n\nNewPasswordInput.propTypes = {\n  disabled: PropTypes.bool,\n  onChange: PropTypes.func.isRequired,\n};\n\nNewPasswordInput.defaultProps = {\n  disabled: false,\n};\n\nexport default NewPasswordInput;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"passwordLength\":\"new-password-input__passwordLength___3u_QQ\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport Emoji from 'Components/images/emoji';\n\nimport styles from './password-strength.styl';\n\nconst PasswordStrength = ({ strength }) => {\n  const labels = {\n    0: <><Emoji name=\"faceExpressionless\" /> weak</>,\n    1: <><Emoji name=\"faceSlightlySmiling\" /> okay</>,\n    2: <><Emoji name=\"faceSlightlySmiling\" /> okay</>,\n    3: <><Emoji name=\"bicep\" /> strong</>,\n  };\n  return (\n    <div className={styles.container}>\n      <progress value={Math.max(strength, 1)} max=\"3\" className={classNames(styles.meter, styles[`score${strength}`])} />\n      <span className={styles.word}>\n        {labels[strength]}\n      </span>\n    </div>\n  );\n};\n\nPasswordStrength.propTypes = {\n  strength: PropTypes.oneOf([0, 1, 2, 3]).isRequired,\n};\n\nexport default PasswordStrength;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"password-strength__container___LxtiR\",\"meter\":\"password-strength__meter___2_jhX\",\"score0\":\"password-strength__score0___3btQV\",\"score1\":\"password-strength__score1___1Rp6B\",\"score2\":\"password-strength__score2___pHlYq\",\"score3\":\"password-strength__score3___3Z07m\",\"word\":\"password-strength__word___21XwO\"};","import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\n\nimport { Overlay, OverlaySection, OverlayTitle, OverlayBackground } from 'Components/overlays';\nimport CheckboxButton from 'Components/buttons/checkbox-button';\nimport Button from 'Components/buttons/button';\nimport { PopoverContainer } from 'Components/popover';\n\nimport { useTracker } from 'State/segment-analytics';\nimport { useCurrentUser } from 'State/current-user';\nimport useUserPref from 'State/user-prefs';\n\nimport newStuffLog from '../../curated/new-stuff-log';\nimport NewStuffArticle from './new-stuff-article';\nimport NewStuffPrompt from './new-stuff-prompt';\nimport NewStuffPup from './new-stuff-pup';\nimport styles from './styles.styl';\n\nconst latestId = Math.max(...newStuffLog.map(({ id }) => id));\n\nfunction usePreventTabOut() {\n  const first = useRef();\n  const last = useRef();\n\n  const onKeyDown = (e) => {\n    if (e.key === 'Tab') {\n      if (document.activeElement === first.current && e.shiftKey) {\n        last.current.focus();\n        e.preventDefault();\n      } else if (document.activeElement === last.current && !e.shiftKey) {\n        first.current.focus();\n        e.preventDefault();\n      }\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', onKeyDown);\n    return () => document.removeEventListener('keydown', onKeyDown);\n  }, [first, last]);\n\n  return { first, last };\n}\n\nconst NewStuffOverlay = ({ setShowNewStuff, showNewStuff, newStuff, closePopover }) => {\n  const { first, last } = usePreventTabOut();\n\n  return (\n    <Overlay className={styles.newStuffOverlay} ariaModal ariaLabelledBy=\"newStuff\">\n      <OverlaySection type=\"info\">\n        <div className={styles.newStuffAvatar}>\n          <NewStuffPup />\n        </div>\n        <OverlayTitle id=\"newStuff\">New Stuff</OverlayTitle>\n        <div className={styles.newStuffToggle}>\n          <CheckboxButton value={showNewStuff} onChange={setShowNewStuff} ref={first}>\n            Keep showing me these\n          </CheckboxButton>\n        </div>\n      </OverlaySection>\n      <OverlaySection type=\"actions\">\n        {newStuff.map(({ id, ...props }) => (\n          <NewStuffArticle key={id} {...props} />\n        ))}\n        <Button emoji=\"carpStreamer\" onClick={closePopover} ref={last}>\n          Back to Glitch\n        </Button>\n      </OverlaySection>\n    </Overlay>\n  );\n};\nNewStuffOverlay.propTypes = {\n  setShowNewStuff: PropTypes.func.isRequired,\n  showNewStuff: PropTypes.bool.isRequired,\n  newStuff: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      body: PropTypes.string.isRequired,\n      link: PropTypes.string,\n    }).isRequired,\n  ).isRequired,\n};\n\nconst NewStuff = ({ children }) => {\n  const { currentUser } = useCurrentUser();\n  const isSignedIn = !!currentUser && !!currentUser.login;\n  const [showNewStuff, setShowNewStuff] = useUserPref('showNewStuff', true);\n  const [newStuffReadId, setNewStuffReadId] = useUserPref('newStuffReadId', 0);\n  const [log, setLog] = useState(newStuffLog);\n  const track = useTracker('Pupdate');\n\n  const renderOuter = ({ visible, openPopover }) => {\n    const pupVisible = isSignedIn && showNewStuff && newStuffReadId < latestId;\n    const show = () => {\n      track();\n      openPopover();\n      const unreadStuff = newStuffLog.filter(({ id }) => id > newStuffReadId);\n      setLog(unreadStuff.length ? unreadStuff : newStuffLog);\n      setNewStuffReadId(latestId);\n    };\n\n    return (\n      <>\n        {children(show)}\n        {pupVisible && <NewStuffPrompt onClick={show} />}\n        {visible && <OverlayBackground />}\n      </>\n    );\n  };\n\n  return (\n    <PopoverContainer outer={renderOuter}>\n      {({ visible, closePopover }) =>\n        visible ? <NewStuffOverlay showNewStuff={showNewStuff} setShowNewStuff={setShowNewStuff} newStuff={log} closePopover={closePopover} /> : null\n      }\n    </PopoverContainer>\n  );\n};\nNewStuff.propTypes = {\n  children: PropTypes.func.isRequired,\n};\n\nexport default NewStuff;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Link from 'Components/link';\nimport Arrow from 'Components/arrow';\nimport Markdown from 'Components/text/markdown';\nimport Text from 'Components/text/text';\n\nimport styles from './new-stuff-article.styl';\n\nconst NewStuffArticle = ({ title, body, link }) => (\n  <article className={styles.article}>\n    <h2 className={styles.title}>{title}</h2>\n    <div className={styles.body}>\n      <Markdown>{body}</Markdown>\n    </div>\n    {!!link && (\n      <Text>\n        <Link to={link}>\n          Read the blog post <Arrow />\n        </Link>\n      </Text>\n    )}\n  </article>\n);\n\nNewStuffArticle.propTypes = {\n  title: PropTypes.node.isRequired,\n  body: PropTypes.string.isRequired,\n  link: PropTypes.string,\n};\n\nNewStuffArticle.defaultProps = {\n  link: null,\n};\n\nexport default NewStuffArticle;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"article\":\"new-stuff-article__article___1fyOl\",\"title\":\"new-stuff-article__title___2BJ_G\",\"body\":\"new-stuff-article__body___1HUvC\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TooltipContainer from '../tooltips/tooltip-container';\nimport TransparentButton from '../buttons/transparent-button';\n\nimport NewStuffPup from './new-stuff-pup';\n\nimport styles from './new-stuff-prompt.styl';\n\nconst NewStuffPrompt = ({ onClick }) => (\n  <div className={styles.footer}>\n    <TooltipContainer\n      align={['top']}\n      id=\"new-stuff-tooltip\"\n      persistent\n      target={<TransparentButton onClick={onClick}><NewStuffPup /></TransparentButton>}\n      tooltip=\"New\"\n      type=\"info\"\n    />\n  </div>\n);\n\nNewStuffPrompt.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default NewStuffPrompt;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"new-stuff-prompt__footer___3ALX5\"};","import React from 'react';\n\nimport Image from '../images/image';\n\nconst src = 'https://cdn.glitch.com/180b5e22-4649-4c71-9a21-2482eb557c8c%2Fnew-stuff-doggo-2.svg?1521578888312';\n\nconst NewStuffPup = () => (\n  <Image src={src} alt=\"New Stuff\" width=\"50px\" />\n);\n\nexport default NewStuffPup;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newStuffOverlay\":\"styles__newStuffOverlay___38bVj\",\"newStuffAvatar\":\"styles__newStuffAvatar___2XqCS\",\"newStuffToggle\":\"styles__newStuffToggle___3go2a\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Text from 'Components/text/text';\nimport Button from 'Components/buttons/button';\nimport classNames from 'classnames/bind';\nimport styles from './styles.styl';\n\nconst cx = classNames.bind(styles);\n\nconst Notification = ({ children, type, persistent, inline, remove }) => {\n  const className = cx({\n    notification: true,\n    success: type === 'success',\n    error: type === 'error',\n    persistent,\n    inline,\n  });\n\n  return (\n    <aside className={className} onAnimationEnd={remove}>\n      {children}\n    </aside>\n  );\n};\n\nNotification.propTypes = {\n  type: PropTypes.oneOf(['info', 'success', 'error']),\n  persistent: PropTypes.bool,\n  inline: PropTypes.bool,\n};\n\nNotification.defaultProps = {\n  type: 'info',\n  persistent: false,\n  inline: false,\n};\n\nexport const AddProjectToCollectionMsg = ({ projectDomain, collectionName, url }) => (\n  <>\n    <Text>\n      {`Added ${projectDomain} `}\n      {collectionName && `to collection ${collectionName}`}\n    </Text>\n    {url && (\n      <Button href={url} rel=\"noopener noreferrer\" size=\"small\" type=\"tertiary\">\n        Take me there\n      </Button>\n    )}\n  </>\n);\n\nAddProjectToCollectionMsg.propTypes = {\n  projectDomain: PropTypes.string.isRequired,\n  collectionName: PropTypes.string,\n  url: PropTypes.string,\n};\n\nAddProjectToCollectionMsg.defaultProps = {\n  url: null,\n  collectionName: null,\n};\n\nexport default Notification;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"styles__notification___x0H0E\",\"hideme\":\"styles__hideme___1qnUz\",\"loader\":\"styles__loader___2rQEn\",\"persistent\":\"styles__persistent___GAiff\",\"success\":\"styles__success___3Q0So\",\"error\":\"styles__error___17q5k\",\"inline\":\"styles__inline___16uMf\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport styles from './overlays.styl';\n\nexport const Overlay = ({ children, className, ariaModal, ariaLabelledBy }) => {\n  const overlayClass = classNames(styles.overlay, className);\n  return (\n    <dialog className={overlayClass} open aria-modal={ariaModal} aria-labelledby={ariaLabelledBy}>\n      {children}\n    </dialog>\n  );\n};\nOverlay.propTypes = {\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n  ariaLabelledBy: PropTypes.string,\n  ariaModal: PropTypes.bool,\n};\nOverlay.defaultProps = {\n  className: null,\n  ariaLabelledBy: '',\n  ariaModal: false,\n};\n\nexport const OverlaySection = ({ children, type }) => {\n  const sectionClass = classNames(styles.section, styles[type]);\n  return <section className={sectionClass}>{children}</section>;\n};\nOverlaySection.propTypes = {\n  children: PropTypes.node.isRequired,\n  type: PropTypes.oneOf(['info', 'actions']).isRequired,\n};\n\nexport const OverlayTitle = ({ children, id }) => (\n  <h1 className={styles.title} id={id}>\n    {children}\n  </h1>\n);\nOverlayTitle.propTypes = {\n  children: PropTypes.node.isRequired,\n  id: PropTypes.string,\n};\nOverlayTitle.defaultProps = {\n  id: '', // for aria labelled by purposes only\n};\n\nexport const OverlayBackground = () => <div className={styles.overlayBackground} role=\"presentation\" tabIndex={-1} />;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"overlay\":\"overlays__overlay___2lk2I\",\"section\":\"overlays__section___2VQvj\",\"info\":\"overlays__info___1f7QF\",\"title\":\"overlays__title___W21M_\",\"overlayBackground\":\"overlays__overlayBackground___1AEp-\"};","import React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport styles from './styles.styl';\n\nconst sectionTypes = ['primary', 'secondary', 'dangerZone'];\nexport const PopoverSection = ({ className, children, type }) => (\n  <section className={classnames(styles.popoverSection, styles[type], className)}>{children}</section>\n);\n\nPopoverSection.propTypes = {\n  type: PropTypes.oneOf(sectionTypes),\n  children: PropTypes.node.isRequired,\n};\n\nPopoverSection.defaultProps = {\n  type: 'primary',\n};\n\nexport const PopoverActions = ({ ...props }) => <PopoverSection {...props} className={styles.popoverActions} />;\nexport const PopoverInfo = ({ ...props }) => <PopoverSection type=\"secondary\" {...props} className={styles.popoverInfo} />;\nexport const PopoverTitle = ({ ...props }) => <PopoverSection type=\"secondary\" {...props} className={styles.popoverTitle} />;\nexport const InfoDescription = ({ children }) => <p className={styles.infoDescription}>{children}</p>;\nexport const ActionDescription = ({ children }) => <p className={styles.actionDescription}>{children}</p>;\n","import React, { useState, useEffect, useMemo, createContext } from 'react';\nimport PropTypes from 'prop-types';\nimport onClickOutside from 'react-onclickoutside';\nimport { isFragment } from 'react-is';\n\n// statuses: 'closed' | 'openedFromKeyboard' | 'openedFromClick'\nconst usePopoverToggle = ({ startOpen, onOpen }) => {\n  const [status, setStatus] = useState(startOpen ? 'openedFromKeyboard' : 'closed');\n  const openPopover = (event) => {\n    if (event && event.detail === 0) {\n      setStatus('openedFromKeyboard');\n    } else {\n      setStatus('openedFromClick');\n    }\n    if (onOpen) {\n      onOpen();\n    }\n  };\n  const closePopover = () => {\n    setStatus('closed');\n  };\n\n  const togglePopover = (event) => {\n    if (status === 'closed') {\n      openPopover(event);\n    } else {\n      closePopover();\n    }\n  };\n\n  const toggleAndCall = (func) => {\n    if (!func) return null;\n    return (...args) => {\n      togglePopover();\n      return func(...args);\n    };\n  };\n\n  useEffect(() => {\n    if (status === 'closed') return undefined;\n    const keyHandler = (event) => {\n      if (['Escape', 'Esc'].includes(event.key)) {\n        event.preventDefault();\n        setStatus('closed');\n      }\n    };\n    window.addEventListener('keyup', keyHandler);\n    return () => window.removeEventListener('keyup', keyHandler);\n  }, [status]);\n\n  return useMemo(\n    () => ({\n      status,\n      visible: status !== 'closed',\n      setStatus,\n      openPopover,\n      closePopover,\n      togglePopover,\n      toggleAndCall,\n    }),\n    [status],\n  );\n};\n\nconst MonitoredComponent = onClickOutside(({ children }) => children, {\n  handleClickOutside: (component) => component.props.onClickOutside,\n});\n\nexport const PopoverToggleContext = createContext(null);\n\nconst PopoverContainer = ({ children, onOpen, outer, startOpen }) => {\n  const toggleState = usePopoverToggle({ startOpen, onOpen });\n\n  const inner = children(toggleState);\n  if (isFragment(inner)) {\n    console.error('PopoverContainer does not support Fragment as the top level item. Please use a different element.');\n  }\n  const before = outer ? outer(toggleState) : null;\n  return (\n    <PopoverToggleContext.Provider value={toggleState}>\n      {before}\n      <MonitoredComponent excludeScrollbar onClickOutside={toggleState.closePopover}>\n        {inner}\n      </MonitoredComponent>\n    </PopoverToggleContext.Provider>\n  );\n};\nPopoverContainer.propTypes = {\n  children: PropTypes.func.isRequired,\n  onOpen: PropTypes.func,\n  outer: PropTypes.func,\n  startOpen: PropTypes.bool,\n};\nPopoverContainer.defaultProps = {\n  onOpen: null,\n  outer: null,\n  startOpen: false,\n};\n\nexport default PopoverContainer;\n","import React, { useState, useEffect, useLayoutEffect, useRef, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { debounce } from 'lodash';\n\nimport { PopoverToggleContext } from './container';\nimport styles from './styles.styl';\n\nconst useOpenedFromKeyboardFocus = (focusOnDialog) => {\n  const ref = useRef();\n  const { status: popoverStatus } = useContext(PopoverToggleContext);\n  useEffect(() => {\n    const dialog = ref.current;\n    if (!dialog || popoverStatus !== 'openedFromKeyboard') return;\n    // focus on the dialog if there is only a destructible item in the popover that shouldn't automatically be focused on\n    if (focusOnDialog) {\n      dialog.focus();\n    } else {\n      const focusableElements =\n        'a:not([disabled]), button:not([disabled]), input:not([disabled]), [tabindex]:not([disabled]):not([tabindex=\"-1\"]), select:not([disabled]), textarea:not([disabled])';\n      const focusableDialogElement = dialog.querySelector(focusableElements);\n      if (focusableDialogElement) {\n        focusableDialogElement.focus();\n      }\n    }\n  }, [popoverStatus]);\n  return { ref };\n};\n\nconst usePositionAdjustment = ({ margin }) => {\n  const [offset, setOffset] = useState({ top: 0, left: 0 });\n  const ref = useRef();\n  useLayoutEffect(() => {\n    const setPosition = () => {\n      if (ref.current) {\n        const rect = ref.current.getBoundingClientRect();\n        if (rect) {\n          if (rect.left < margin) {\n            setOffset((prevOffset) => ({ ...prevOffset, left: margin - rect.left }));\n          } else if (rect.right > window.innerWidth - margin) {\n            setOffset((prevOffset) => ({ ...prevOffset, left: window.innerWidth - margin - rect.right }));\n          } else {\n            setOffset((prevOffset) => ({ ...prevOffset, left: 0 }));\n          }\n        }\n      }\n    };\n    const debounced = debounce(setPosition, 300);\n    window.addEventListener('resize', debounced);\n    setPosition();\n    return () => window.removeEventListener('resize', debounced);\n  }, [margin]);\n  return { ref, offset };\n};\n\nconst mergeRefs = (...refs) => (element) => {\n  refs.forEach((ref) => {\n    ref.current = element;\n  });\n};\n\nconst alignTypes = ['none', 'left', 'right', 'topLeft', 'topRight'];\nconst PopoverDialog = ({ children, align, wide, className, focusOnDialog }) => {\n  const { ref: positionRef, offset } = usePositionAdjustment({ margin: 12 });\n  const { ref: focusRef } = useOpenedFromKeyboardFocus(focusOnDialog);\n  const focusProps = focusOnDialog ? { tabIndex: 0 } : {};\n  return (\n    <div className={classnames(styles.popoverWrap, wide && styles.wide, align !== 'none' && styles[align], className)}>\n      <dialog ref={mergeRefs(positionRef, focusRef)} className={styles.popover} style={offset} {...focusProps}>\n        {children}\n      </dialog>\n    </div>\n  );\n};\n\nPopoverDialog.propTypes = {\n  children: PropTypes.node.isRequired,\n  align: PropTypes.oneOf(alignTypes).isRequired,\n  wide: PropTypes.bool,\n  className: PropTypes.string,\n  focusOnDialog: PropTypes.bool,\n};\nPopoverDialog.defaultProps = {\n  wide: false,\n  className: '',\n  focusOnDialog: false,\n};\n\nexport default PopoverDialog;\n","import React, { useState, useContext, useMemo, createContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { mapValues } from 'lodash';\nimport TransparentButton from 'Components/buttons/transparent-button';\nimport Button from 'Components/buttons/button';\n\nimport PopoverContainer from './container';\nimport PopoverDialog from './dialog';\nimport PopoverSearch from './search';\nimport { PopoverSection, PopoverActions, PopoverInfo, PopoverTitle, InfoDescription, ActionDescription } from './base';\nimport styles from './styles.styl';\nimport globalStyles from '../global.styl';\n\n/*\nA popover is a light, hollow roll made from an egg batter similar to\nthat of Yorkshire pudding, typically baked in muffin tins or dedicated\npopover pans, which have straight-walled sides rather than angled.\n\n...also it's a [Bootstrap UI pattern](https://www.w3schools.com/bootstrap/bootstrap_popover.asp)\n*/\n\nexport {\n  PopoverContainer,\n  PopoverDialog,\n  PopoverSearch,\n  PopoverSection,\n  PopoverActions,\n  PopoverInfo,\n  PopoverTitle,\n  InfoDescription,\n  ActionDescription,\n};\n\nconst MultiPopoverContext = createContext();\n\nexport const MultiPopover = ({ views, initialView, children }) => {\n  const [activeView, setActiveView] = useState(initialView);\n  const multiPopoverState = useMemo(() => ({ activeView, setActiveView }), [activeView]);\n  const activeViewFunc = activeView ? views[activeView] : children;\n  const showViewMap = mapValues(views, (_, viewName) => () => setActiveView(viewName));\n\n  return <MultiPopoverContext.Provider value={multiPopoverState}>{activeViewFunc(showViewMap)}</MultiPopoverContext.Provider>;\n};\n\nMultiPopover.propTypes = {\n  views: PropTypes.object.isRequired,\n  children: PropTypes.func.isRequired,\n  initialView: PropTypes.string,\n};\n\nMultiPopover.defaultProps = {\n  initialView: null,\n};\n\nexport const MultiPopoverTitle = ({ children }) => {\n  const { setActiveView, defaultView } = useContext(MultiPopoverContext);\n  return (\n    <TransparentButton onClick={() => setActiveView(defaultView)} aria-label=\"go back\">\n      <PopoverTitle>\n        <span className={styles.backArrow}>\n          <span className=\"left-arrow icon\" />\n        </span>\n        &nbsp;\n        {children}\n      </PopoverTitle>\n    </TransparentButton>\n  );\n};\nMultiPopoverTitle.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport const PopoverWithButton = ({ buttonProps, buttonText, children: renderChildren, onOpen }) => (\n  <div className={styles.popoverWithButtonWrap}>\n    <PopoverContainer onOpen={onOpen}>\n      {(popoverProps) => (\n        <div>\n          <div className={styles.buttonWrap}>\n            <Button {...buttonProps} onClick={popoverProps.togglePopover}>\n              {buttonText}\n            </Button>\n          </div>\n          {popoverProps.visible && renderChildren(popoverProps)}\n        </div>\n      )}\n    </PopoverContainer>\n  </div>\n);\n\nPopoverWithButton.propTypes = {\n  buttonProps: PropTypes.object,\n  buttonText: PropTypes.node.isRequired,\n  children: PropTypes.func.isRequired,\n  onOpen: PropTypes.func,\n};\n\nPopoverWithButton.defaultProps = {\n  buttonProps: {},\n  onOpen: null,\n};\n\nexport const PopoverMenu = ({ label, children: renderChildren, onOpen }) => (\n  <div className={styles.popoverMenuWrap}>\n    <PopoverContainer onOpen={onOpen}>\n      {(popoverProps) => (\n        <div>\n          <div className={styles.buttonWrap}>\n            <TransparentButton onClick={popoverProps.togglePopover}>\n              <div className={styles.arrowPadding}>\n                <div className={styles.downArrow} />\n              </div>\n              <div className={globalStyles.visuallyHidden}>{label}</div>\n            </TransparentButton>\n          </div>\n          {popoverProps.visible && renderChildren(popoverProps)}\n        </div>\n      )}\n    </PopoverContainer>\n  </div>\n);\n\nPopoverMenu.propTypes = {\n  label: PropTypes.string,\n  children: PropTypes.func.isRequired,\n  onOpen: PropTypes.func,\n};\n\nPopoverMenu.defaultProps = {\n  label: 'options',\n  onOpen: null,\n};\n\n// Use with PopoverMenu so that popover can correctly adjust to fit the content\nexport const PopoverMenuButton = ({ label, emoji, onClick }) => (\n  <div className={styles.menuButtonWrap}>\n    <Button size=\"small\" type=\"tertiary\" emoji={emoji} onClick={onClick}>\n      <div className={styles.popoverButtonContent}>\n        {label}\n      </div>\n    </Button>\n  </div>\n);\n\nPopoverMenuButton.propTypes = {\n  label: PropTypes.string.isRequired,\n  emoji: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Loader from 'Components/loader';\nimport Emoji from 'Components/images/emoji';\nimport TextInput from 'Components/inputs/text-input';\nimport ResultsList from 'Components/containers/results-list';\nimport { PopoverActions, PopoverInfo, PopoverSection, InfoDescription } from './base';\n\nfunction useActiveIndex(items, onSelect) {\n  const inputRef = useRef();\n  const [activeIndex, setActiveIndex] = useState(-1);\n  // reset activeIndex & focus when items change\n  useEffect(() => {\n    setActiveIndex(-1);\n    inputRef.current.focus();\n  }, [items]);\n\n  // focus input when there's no active index\n  useEffect(() => {\n    if (activeIndex === -1) {\n      inputRef.current.focus();\n    }\n  }, [activeIndex]);\n\n  useEffect(() => {\n    const onKeyDown = (e) => {\n      if (e.key === 'ArrowUp') {\n        e.preventDefault();\n        setActiveIndex((prev) => {\n          if (prev < 0) {\n            return items.length - 1;\n          }\n          return prev - 1;\n        });\n      } else if (e.key === 'ArrowDown') {\n        e.preventDefault();\n        setActiveIndex((prev) => {\n          if (prev === items.length - 1) {\n            return -1;\n          }\n          return prev + 1;\n        });\n      } else if (e.key === 'Enter') {\n        e.preventDefault();\n        if (items[activeIndex]) {\n          onSelect(items[activeIndex]);\n        }\n      }\n    };\n\n    // TODO: should these be bound to a container instead of the window?\n    window.addEventListener('keydown', onKeyDown);\n    return () => {\n      window.removeEventListener('keydown', onKeyDown);\n    };\n  }, [items]);\n\n  return { inputRef, activeIndex };\n}\n\nconst PopoverLoader = () => (\n  <PopoverActions>\n    <Loader />\n  </PopoverActions>\n);\n\nconst NothingFound = () => (\n  <PopoverActions>\n    <InfoDescription>\n      Nothing found <Emoji name=\"sparkles\" />\n    </InfoDescription>\n  </PopoverActions>\n);\n\nfunction PopoverSearch({\n  value,\n  onChange,\n  results,\n  status,\n  onSubmit,\n  renderItem,\n  renderNoResults,\n  renderLoader,\n  renderError,\n  labelText,\n  placeholder,\n}) {\n  const { inputRef, activeIndex } = useActiveIndex(results, onSubmit);\n  return (\n    <>\n      <PopoverInfo>\n        <TextInput\n          ref={inputRef}\n          autoFocus\n          labelText={labelText}\n          value={value}\n          onChange={onChange}\n          opaque\n          placeholder={placeholder}\n          type=\"search\"\n        />\n      </PopoverInfo>\n      {results.length > 0 && (\n        <PopoverSection>\n          <ResultsList scroll items={results}>\n            {(item, i) => renderItem({ item, onSubmit, active: i === activeIndex })}\n          </ResultsList>\n        </PopoverSection>\n      )}\n      {status === 'loading' && value.length > 0 && results.length === 0 && renderLoader()}\n      {status === 'ready' && value.length > 0 && results.length === 0 && renderNoResults()}\n      {status === 'error' && renderError()}\n    </>\n  );\n}\n\nPopoverSearch.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  results: PropTypes.array.isRequired,\n  status: PropTypes.oneOf(['init', 'loading', 'ready', 'error']).isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  renderItem: PropTypes.func.isRequired,\n  renderNoResults: PropTypes.func,\n  renderLoader: PropTypes.func,\n  renderError: PropTypes.func,\n  labelText: PropTypes.string.isRequired,\n  placeholder: PropTypes.string,\n};\n\nPopoverSearch.defaultProps = {\n  renderLoader: () => <PopoverLoader />,\n  renderNoResults: () => <NothingFound />,\n  renderError: () => null,\n  placeholder: null,\n};\n\nexport default PopoverSearch;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"popoverWrap\":\"styles__popoverWrap___KRdJL\",\"right\":\"styles__right___2EddZ\",\"left\":\"styles__left___2UWNi\",\"topLeft\":\"styles__topLeft___2mmPu\",\"topRight\":\"styles__topRight___H9CbE\",\"wide\":\"styles__wide___37ZB3\",\"popover\":\"styles__popover___Pf8Hr\",\"popoverSection\":\"styles__popoverSection___1EJBJ\",\"primary\":\"styles__primary___3SzZ9\",\"secondary\":\"styles__secondary___ZPMMI\",\"dangerZone\":\"styles__dangerZone___1SDsY\",\"popoverActions\":\"styles__popoverActions___1d7Zp\",\"popoverInfo\":\"styles__popoverInfo___MbiFz\",\"popoverTitle\":\"styles__popoverTitle___39Inh\",\"popoverWithButtonWrap\":\"styles__popoverWithButtonWrap___1kLpM\",\"popoverMenuWrap\":\"styles__popoverMenuWrap___1fOcC\",\"buttonWrap\":\"styles__buttonWrap___1ObFc\",\"backArrow\":\"styles__backArrow___Qc07L\",\"infoDescription\":\"styles__infoDescription___2NO1B\",\"actionDescription\":\"styles__actionDescription___u_3_5\",\"arrowPadding\":\"styles__arrowPadding___3P6mY\",\"downArrow\":\"styles__downArrow___39oKE\",\"popoverButtonContent\":\"styles__popoverButtonContent___1_xrw\",\"menuButtonWrap\":\"styles__menuButtonWrap___2ObxW\"};","import React from 'react';\nimport classnames from 'classnames';\n\nimport TooltipContainer from 'Components/tooltips/tooltip-container';\nimport HiddenCheckbox from 'Components/fields/hidden-checkbox';\n\nimport styles from './styles.styl';\n\nconst privateText = 'Only members can view code';\nconst publicText = 'Visible to everyone';\n\nexport const PrivateIcon = ({ className, label, inButton, isPrivate }) => (\n  <span\n    className={classnames(className, styles.projectBadge, isPrivate ? styles.private : styles.public, inButton && styles.inButton)}\n    aria-label={label}\n  />\n);\n\nPrivateIcon.defaultProps = {\n  label: privateText,\n};\n\nexport const PrivateBadge = () => (\n  <TooltipContainer type=\"info\" id=\"private-project-badge-tooltip\" tooltip={privateText} target={<PrivateIcon isPrivate label={privateText} />} />\n);\n\nexport const PrivateToggle = ({ isPrivate, setPrivate }) => (\n  <TooltipContainer\n    type=\"action\"\n    id=\"toggle-private-button-tooltip\"\n    tooltip={isPrivate ? privateText : publicText}\n    target={\n      <HiddenCheckbox value={isPrivate} onChange={setPrivate}>\n        <PrivateIcon isPrivate={isPrivate} className={styles.button} label={privateText} />\n      </HiddenCheckbox>\n    }\n  />\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"projectBadge\":\"styles__projectBadge___34TzA\",\"inButton\":\"styles__inButton___3U17P\",\"private\":\"styles__private___SwaYE\",\"public\":\"styles__public___darod\",\"button\":\"styles__button___3wtSO\"};","import React, { useRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { debounce } from 'lodash';\nimport { Avatar, UserAvatar, TeamAvatar } from 'Components/images/avatar';\n\nimport { UserLink, TeamLink } from 'Components/link';\n\nimport styles from './profile-list.styl';\n\nconst UserItem = ({ user }) => (\n  <UserLink user={user}>\n    <UserAvatar user={user} />\n  </UserLink>\n);\n\nconst TeamItem = ({ team }) => (\n  <TeamLink team={team}>\n    <TeamAvatar team={team} />\n  </TeamLink>\n);\n\n// NOTE: ResizeObserver is not widely supported\n// see https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\n// window 'resize' event is mostly adequate for this use case,\n// but continue to use clip-path to handle edge cases\nconst useResizeObserver = () => {\n  const ref = useRef();\n  const [width, setWidth] = useState(0);\n  useEffect(() => {\n    const setWidthOfRef = () => {\n      if (ref.current) {\n        const boundingClientRect = ref.current.getBoundingClientRect();\n        if (boundingClientRect) {\n          setWidth(boundingClientRect.width);\n        }\n      }\n    };\n    const debouncedSetWidth = debounce(setWidthOfRef, 100);\n    setWidthOfRef();\n\n    if (window.ResizeObserver) {\n      const observer = new ResizeObserver(debouncedSetWidth);\n      observer.observe(ref.current);\n\n      return () => {\n        observer.unobserve(ref.current);\n      };\n    }\n    window.addEventListener('resize', debouncedSetWidth);\n    return () => {\n      window.removeEventListener('resize', debouncedSetWidth);\n    };\n  }, [ref, setWidth]);\n  return { ref, width };\n};\n\nconst parametersForSize = {\n  large: {\n    avatarWidth: 32,\n    userOffset: -7,\n    teamOffset: 7,\n  },\n  small: {\n    avatarWidth: 22,\n    userOffset: -5,\n    teamOffset: 2,\n  },\n};\n\nconst RowContainer = ({ size, users, teams }) => {\n  const { ref, width } = useResizeObserver();\n  const { avatarWidth, userOffset, teamOffset } = parametersForSize[size];\n  const maxTeams = Math.floor(width / (avatarWidth + teamOffset));\n  const remainingWidth = width - (avatarWidth + teamOffset) * teams.length - teamOffset;\n  const maxUsers = Math.floor((remainingWidth + userOffset) / (avatarWidth + userOffset));\n\n  return (\n    <ul ref={ref} className={classnames(styles.container, styles.row, styles[size])}>\n      {teams.slice(0, maxTeams).map((team) => (\n        <li key={`team-${team.id}`} className={(styles.teamItem)}>\n          <TeamItem team={team} />\n        </li>\n      ))}\n      {users.slice(0, maxUsers).map((user) => (\n        <li key={`user-${user.id}`} className={styles.userItem}>\n          <UserItem user={user} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nconst BlockContainer = ({ size, users, teams }) => (\n  <>\n    {teams.length > 0 && (\n      <ul className={classnames(styles.container, styles[size])}>\n        {teams.map((team) => (\n          <li key={`team-${team.id}`} className={(styles.teamItem)}>\n            <TeamItem team={team} />\n          </li>\n        ))}\n      </ul>\n    )}\n    {users.length > 0 && (\n      <ul className={classnames(styles.container, styles[size])}>\n        {users.map((user) => (\n          <li key={`user-${user.id}`} className={styles.userItem}>\n            <UserItem user={user} />\n          </li>\n        ))}\n      </ul>\n    )}\n  </>\n);\n\nconst GLITCH_TEAM_AVATAR = 'https://cdn.glitch.com/2bdfb3f8-05ef-4035-a06e-2043962a3a13%2Fglitch-team-avatar.svg?1489266029267';\n\nconst GlitchTeamList = ({ size }) => (\n  <ul className={classnames(styles.container, styles[size])}>\n    <li className={(styles.teamItem)}>\n      <Avatar name=\"Glitch Team\" src={GLITCH_TEAM_AVATAR} color=\"#74ecfc\" type=\"team\" />\n    </li>\n  </ul>\n);\n\nconst PlaceholderList = ({ size }) => (\n  <ul className={classnames(styles.container, styles[size])}>\n    <li className={styles.userItem}>\n      <div className={styles.placeholder} />\n    </li>\n  </ul>\n);\n\nconst maybeList = (item) => (item ? [item] : []);\n\nexport const ProfileItem = ({ user, team, glitchTeam, size }) => (\n  <ProfileList layout=\"block\" users={maybeList(user)} teams={maybeList(team)} glitchTeam={glitchTeam} size={size} />\n);\n\nconst ProfileList = React.memo(({ size, users, teams, layout, glitchTeam }) => {\n  if (glitchTeam) {\n    return <GlitchTeamList />;\n  }\n\n  if (!users.length && !teams.length) {\n    return <PlaceholderList size={size} />;\n  }\n\n  if (layout === 'row') {\n    return <RowContainer size={size} users={users} teams={teams} />;\n  }\n\n  return <BlockContainer size={size} users={users} teams={teams} />;\n});\n\nProfileList.propTypes = {\n  layout: PropTypes.oneOf(['row', 'block']).isRequired,\n  size: PropTypes.oneOf(['small', 'large']),\n  users: PropTypes.array,\n  teams: PropTypes.array,\n  glitchTeam: PropTypes.bool,\n};\n\nProfileList.defaultProps = {\n  size: 'large',\n  users: [],\n  teams: [],\n  glitchTeam: false,\n};\n\nexport default ProfileList;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"profile-list__container___1164e\",\"large\":\"profile-list__large___2iZUG\",\"small\":\"profile-list__small___aJLXD\",\"userItem\":\"profile-list__userItem___3Cdd0\",\"teamItem\":\"profile-list__teamItem___3VugE\",\"placeholder\":\"profile-list__placeholder___36zMI\",\"row\":\"profile-list__row___3DtUb\",\"loadingGradient\":\"profile-list__loadingGradient___2d5MM\"};","// add-project-to-collection-pop -> Add a project to a collection via a project item's menu\nimport React, { useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport Pluralize from 'react-pluralize';\nimport { partition } from 'lodash';\nimport Badge from 'Components/badges/badge';\nimport SegmentedButtons from 'Components/buttons/segmented-buttons';\nimport Link from 'Components/link';\nimport {\n  PopoverWithButton,\n  MultiPopover,\n  MultiPopoverTitle,\n  PopoverDialog,\n  InfoDescription,\n  PopoverInfo,\n  PopoverActions,\n  PopoverSearch,\n} from 'Components/popover';\nimport Button from 'Components/buttons/button';\nimport { ProjectAvatar } from 'Components/images/avatar';\nimport CollectionResultItem from 'Components/collection/collection-result-item';\nimport { CreateCollectionWithProject } from 'Components/collection/create-collection-pop';\nimport { AddProjectToCollectionMsg } from 'Components/notification';\nimport { useTrackedFunc } from 'State/segment-analytics';\nimport { useAlgoliaSearch } from 'State/search';\nimport { useCurrentUser } from 'State/current-user';\nimport { useNotifications } from 'State/notifications';\n\nimport useDebouncedValue from '../../hooks/use-debounced-value';\nimport styles from './popover.styl';\n\nconst collectionTypeOptions = [\n  {\n    name: 'user',\n    contents: 'Your collections',\n  },\n  {\n    name: 'team',\n    contents: 'Team collections',\n  },\n];\n\nconst AddProjectPopoverTitle = ({ project }) => (\n  <MultiPopoverTitle>\n    <div className={styles.popoverTitleWrap}>\n      <ProjectAvatar project={project} /> Add {project.domain} to collection\n    </div>\n  </MultiPopoverTitle>\n);\nAddProjectPopoverTitle.propTypes = {\n  project: PropTypes.object.isRequired,\n};\n\nconst AddProjectToCollectionResultItem = ({ onClick, collection, active }) => {\n  const onClickTracked = useTrackedFunc(\n    onClick,\n    'Project Added to Collection',\n    {},\n    {\n      groupId: collection.team ? collection.team.id : 0,\n    },\n  );\n  return <CollectionResultItem onClick={onClickTracked} collection={collection} active={active} />;\n};\n\nconst AlreadyInCollection = ({ project, collections }) => (\n  <InfoDescription>\n    <strong>{project.domain}</strong> is already in <Pluralize count={collections.length} showCount={false} singular=\"collection\" />{' '}\n    {collections\n      .slice(0, 3)\n      .map((collection) => (\n        <Link key={collection.id} to={`/@${collection.fullUrl}`}>\n          {collection.name}\n        </Link>\n      ))\n      .reduce((prev, curr) => [prev, ', ', curr])}\n    {collections.length > 3 && (\n      <>\n        , and{' '}\n        <div className={styles.moreCollectionsBadge}>\n          <Badge>{collections.length - 3}</Badge>\n        </div>{' '}\n        <Pluralize count={collections.length - 3} singular=\"other\" showCount={false} />\n      </>\n    )}\n  </InfoDescription>\n);\n\nconst NoResults = ({ project, collectionsWithProject, query }) => {\n  if (collectionsWithProject.length) {\n    return <AlreadyInCollection project={project} collections={collectionsWithProject} />;\n  }\n  if (query.length > 0) {\n    return <InfoDescription>No matching collections found – add to a new one?</InfoDescription>;\n  }\n  return <InfoDescription>Create collections to organize your favorite projects.</InfoDescription>;\n};\n\nfunction useCollectionSearch(query, project, collectionType) {\n  const { currentUser } = useCurrentUser();\n  const debouncedQuery = useDebouncedValue(query, 200);\n  const filters = collectionType === 'user' ? { userIDs: [currentUser.id] } : { teamIDs: currentUser.teams.map((team) => team.id) };\n\n  const searchResults = useAlgoliaSearch(debouncedQuery, { ...filters, filterTypes: ['collection'], allowEmptyQuery: true }, [collectionType]);\n\n  const [collectionsWithProject, collections] = useMemo(\n    () => partition(searchResults.collection, (result) => result.projects.includes(project.id)).map((list) => list.slice(0, 20)),\n    [searchResults.collection, project.id, collectionType],\n  );\n\n  return { status: searchResults.status, collections, collectionsWithProject };\n}\n\nexport const AddProjectToCollectionBase = ({ project, fromProject, addProjectToCollection, togglePopover, createCollectionPopover }) => {\n  const [collectionType, setCollectionType] = useState('user');\n  const [query, setQuery] = useState('');\n  const { status, collections, collectionsWithProject } = useCollectionSearch(query, project, collectionType);\n  const { currentUser } = useCurrentUser();\n  const { createNotification } = useNotifications();\n\n  const addProjectTo = (collection) => {\n    addProjectToCollection(project, collection).then(() => {\n      createNotification(\n        <AddProjectToCollectionMsg projectDomain={project.domain} collectionName={collection.name} url={`/@${collection.fullUrl}`} />,\n        { type: 'success' },\n      );\n    });\n\n    togglePopover();\n  };\n\n  return (\n    <PopoverDialog wide align=\"right\">\n      {/* Only show this nested popover title from project-options */}\n      {fromProject && <AddProjectPopoverTitle project={project} />}\n\n      {currentUser.teams.length > 0 && (\n        <PopoverActions>\n          <SegmentedButtons value={collectionType} buttons={collectionTypeOptions} onChange={setCollectionType} />\n        </PopoverActions>\n      )}\n\n      <PopoverSearch\n        value={query}\n        onChange={setQuery}\n        status={status}\n        results={collections}\n        onSubmit={addProjectTo}\n        placeholder=\"Filter collections\"\n        labelText=\"Filter collections\"\n        renderItem={({ item: collection, active }) => (\n          <AddProjectToCollectionResultItem active={active} onClick={() => addProjectTo(collection)} collection={collection} />\n        )}\n        renderNoResults={() => (\n          <PopoverInfo>\n            <NoResults project={project} collectionsWithProject={collectionsWithProject} query={query} />\n          </PopoverInfo>\n        )}\n      />\n\n      <PopoverActions>\n        <Button size=\"small\" type=\"tertiary\" onClick={createCollectionPopover}>\n          Add to a new collection\n        </Button>\n      </PopoverActions>\n    </PopoverDialog>\n  );\n};\n\nAddProjectToCollectionBase.propTypes = {\n  fromProject: PropTypes.bool.isRequired,\n  project: PropTypes.object.isRequired,\n  togglePopover: PropTypes.func.isRequired,\n  addProjectToCollection: PropTypes.func.isRequired,\n  createCollectionPopover: PropTypes.func.isRequired,\n};\n\nconst AddProjectToCollection = ({ project, addProjectToCollection }) => (\n  <PopoverWithButton\n    buttonProps={{ size: 'small', emoji: 'framedPicture' }}\n    buttonText=\"Add to Collection\"\n  >\n    {({ togglePopover }) => (\n      <MultiPopover\n        views={{\n          createCollectionPopover: () => (\n            <CreateCollectionWithProject\n              addProjectToCollection={(...args) => {\n                addProjectToCollection(...args);\n                togglePopover();\n              }}\n              project={project}\n            />\n          ),\n        }}\n      >\n        {({ createCollectionPopover }) => (\n          <AddProjectToCollectionBase\n            addProjectToCollection={addProjectToCollection}\n            fromProject={false}\n            project={project}\n            togglePopover={togglePopover}\n            createCollectionPopover={createCollectionPopover}\n          />\n        )}\n      </MultiPopover>\n    )}\n  </PopoverWithButton>\n);\n\nAddProjectToCollection.propTypes = {\n  addProjectToCollection: PropTypes.func.isRequired,\n  project: PropTypes.object.isRequired,\n};\n\nexport default AddProjectToCollection;\n","/* global APP_URL */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Image from 'Components/images/image';\nimport styles from './embed.styl';\n\nconst telescopeImageUrl = 'https://cdn.glitch.com/7138972f-76e1-43f4-8ede-84c3cdd4b40a%2Ftelescope_404.svg?1543258683849';\n\n// Babel does not transpile URLSearchParams, so using this as a compatibility check for showing embeds now.\n// TODO(sheridan) make this more robust in future\nconst browserSatisfiesRequirements = (() => {\n  try {\n    const test = new Function('return () => true'); // eslint-disable-line no-new-func\n    if (test()() !== true) {\n      throw new Error('Arrow functions are not supported, so the editor will not work');\n    }\n    return true;\n  } catch (error) {\n    console.log(\n      \"Sorry, you don't have the necessary JavaScript features to run Glitch code editors. Try applying your latest system updates, or try again with a different web browser.\",\n      error,\n    );\n  }\n  return false;\n})();\n\nconst Embed = ({ domain }) => (\n  <div className={styles.embedContainer}>\n    {browserSatisfiesRequirements ? (\n      // Embed iframe for app\n      <iframe\n        className={styles.embedIframe}\n        src={`${APP_URL}/embed/#!/embed/${domain}?path=README.md&previewSize=100`}\n        title={`${domain} on Glitch`}\n        allow=\"geolocation; microphone; camera; midi; encrypted-media\"\n        height=\"100%\"\n        width=\"100%\"\n        allowvr=\"yes\"\n      />\n    ) : (\n      // Error message if JS not supported\n      // TODO(sheridan): Refactor this once we have a true error component\n      <div>\n        <Image src={telescopeImageUrl} width=\"35%\" alt=\"\" />\n        <div>\n          <h2>The web browser you're using is missing some important Javascript features</h2>\n          <p>To use this app, please try applying your latest system updates, or try again with a different web browser.</p>\n        </div>\n      </div>\n    )}\n  </div>\n);\n\nEmbed.propTypes = {\n  domain: PropTypes.string.isRequired,\n};\n\nexport default Embed;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"embedContainer\":\"embed__embedContainer___3gG1g\",\"embedIframe\":\"embed__embedIframe___xD0aJ\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { PopoverMenu, PopoverDialog, PopoverActions, PopoverMenuButton } from 'Components/popover';\n\nexport default function FeaturedProjectOptionsPop({ unfeatureProject, createNote, hasNote }) {\n  function toggleAndUnfeature(togglePopover) {\n    togglePopover();\n    unfeatureProject();\n  }\n\n  function toggleAndCreateNote(togglePopover) {\n    togglePopover();\n    createNote();\n  }\n\n  return (\n    <PopoverMenu label=\"Featured Project Options\">\n      {({ togglePopover }) => (\n        <PopoverDialog align=\"right\" focusOnPopover>\n          <PopoverActions>\n            {!hasNote && createNote && <PopoverMenuButton onClick={() => toggleAndCreateNote(togglePopover)} label=\"Add note\" emoji=\"spiralNotePad\" />}\n            <PopoverMenuButton onClick={() => toggleAndUnfeature(togglePopover)} label=\"Un-feature\" emoji=\"arrowDown\" />\n          </PopoverActions>\n        </PopoverDialog>\n      )}\n    </PopoverMenu>\n  );\n}\n\nFeaturedProjectOptionsPop.propTypes = {\n  unfeatureProject: PropTypes.func.isRequired,\n  createNote: PropTypes.func,\n  hasNote: PropTypes.bool,\n};\n\nFeaturedProjectOptionsPop.defaultProps = {\n  createNote: null,\n  hasNote: false,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Heading from 'Components/text/heading';\nimport ProjectEmbed from 'Components/project/project-embed';\nimport Emoji from 'Components/images/emoji';\nimport Note from 'Components/collection/note';\nimport AnimationContainer from 'Components/animation-container';\nimport FeaturedProjectOptionsPop from './featured-project-options-pop';\nimport styles from './featured-project.styl';\n\nconst Top = ({ featuredProject, collection, updateNote, hideNote, isAuthorized, unfeatureProject, createNote }) => (\n  <div className={styles.top}>\n    <div className={styles.left}>\n      <Heading tagName=\"h2\">\n        Featured Project\n        <Emoji name=\"clapper\" inTitle />\n      </Heading>\n      {collection && (\n        <div className={styles.note}>\n          <Note project={featuredProject} collection={collection} updateNote={updateNote} hideNote={hideNote} isAuthorized={isAuthorized} />\n        </div>\n      )}\n    </div>\n    {isAuthorized && (\n      <div className={styles.unfeatureBtn}>\n        <FeaturedProjectOptionsPop unfeatureProject={unfeatureProject} createNote={createNote} hasNote={!!featuredProject.note} />\n      </div>\n    )}\n  </div>\n);\n\nconst FeaturedProject = ({\n  addProjectToCollection,\n  collection,\n  displayNewNote,\n  featuredProject,\n  hideNote,\n  isAuthorized,\n  updateNote,\n  unfeatureProject,\n}) => (\n  <div data-cy=\"featured-project\">\n    <AnimationContainer type=\"slideDown\" onAnimationEnd={unfeatureProject}>\n      {(animateAndUnfeatureProject) => (\n        <ProjectEmbed\n          top={\n            <Top\n              featuredProject={featuredProject}\n              collection={collection}\n              hideNote={hideNote}\n              updateNote={updateNote}\n              isAuthorized={isAuthorized}\n              unfeatureProject={animateAndUnfeatureProject}\n              createNote={collection ? () => displayNewNote(featuredProject) : null}\n            />\n          }\n          project={featuredProject}\n          addProjectToCollection={addProjectToCollection}\n        />\n      )}\n    </AnimationContainer>\n  </div>\n);\n\nFeaturedProject.propTypes = {\n  addProjectToCollection: PropTypes.func,\n  featuredProject: PropTypes.object.isRequired,\n  isAuthorized: PropTypes.bool.isRequired,\n  unfeatureProject: PropTypes.func.isRequired,\n  collection: PropTypes.object,\n  displayNewNote: PropTypes.func,\n  hideNote: PropTypes.func,\n  updateNote: PropTypes.func,\n};\n\nFeaturedProject.defaultProps = {\n  collection: null,\n  addProjectToCollection: null,\n  displayNewNote: () => {},\n  hideNote: () => {},\n  updateNote: () => {},\n};\n\nexport default FeaturedProject;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"top\":\"featured-project__top___USsTS\",\"left\":\"featured-project__left___GWv3p\",\"note\":\"featured-project__note___1st5P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"moreCollectionsBadge\":\"popover__moreCollectionsBadge___146TI\",\"popoverTitleWrap\":\"popover__popoverTitleWrap___-tYs_\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button, { SIZES } from 'Components/buttons/button';\nimport { getShowUrl, getEditorUrl, getRemixUrl } from '../../models/project';\n\nexport const ShowButton = ({ name, size }) => (\n  <Button href={getShowUrl(name)} size={size} emoji=\"sunglasses\" emojiPosition=\"left\">\n    Show\n  </Button>\n);\n\nShowButton.propTypes = {\n  name: PropTypes.string.isRequired,\n};\n\nexport const EditButton = ({ name, isMember, size }) => (\n  <Button href={getEditorUrl(name)} size={size}>\n    {isMember ? 'Edit Project' : 'View Source'}\n  </Button>\n);\nEditButton.propTypes = {\n  name: PropTypes.string.isRequired,\n  isMember: PropTypes.bool,\n  size: PropTypes.oneOf(SIZES),\n};\n\nEditButton.defaultProps = {\n  isMember: false,\n  size: null,\n};\n\nexport const RemixButton = ({ name, isMember }) => (\n  <Button href={getRemixUrl(name)} size=\"small\" emoji=\"microphone\">\n    {isMember ? 'Remix This' : 'Remix your own'}\n  </Button>\n);\nRemixButton.propTypes = {\n  name: PropTypes.string.isRequired,\n  isMember: PropTypes.bool,\n};\n\nRemixButton.defaultProps = {\n  isMember: false,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\n\nimport Embed from 'Components/project/embed';\nimport ReportButton from 'Components/report-abuse-pop';\nimport { EditButton, RemixButton } from 'Components/project/project-actions';\nimport { useTracker } from 'State/segment-analytics';\nimport { useCurrentUser } from 'State/current-user';\nimport { useProjectOptions } from 'State/project-options';\nimport AddProjectToCollection from './add-project-to-collection-pop';\n\nimport styles from './project-embed.styl';\n\nconst cx = classNames.bind(styles);\n\nconst ProjectEmbed = ({ project, top, addProjectToCollection }) => {\n  const projectOptions = useProjectOptions(project, addProjectToCollection ? { addProjectToCollection } : {});\n  const { currentUser } = useCurrentUser();\n  const isMember = currentUser.projects.some(({ id }) => id === project.id);\n  const trackRemix = useTracker('Click Remix', {\n    baseProjectId: project.id,\n    baseDomain: project.domain,\n  });\n\n  return (\n    <section className={styles.projectEmbed}>\n      {top}\n      <div className={styles.embedWrap}>\n        <Embed domain={project.domain} />\n      </div>\n      <div className={styles.buttonContainer}>\n        <div className={styles.left}>\n          {isMember ? (<EditButton name={project.id} isMember={isMember} size=\"small\" />) : (<ReportButton reportedType=\"project\" reportedModel={project} />)}\n        </div>\n        <div className={cx({ right: true, buttonWrap: true })}>\n          {projectOptions.addProjectToCollection && (\n            <div className={styles.addToCollectionWrap}>\n              <AddProjectToCollection project={project} addProjectToCollection={projectOptions.addProjectToCollection} fromProject />\n            </div>\n          )}\n          <RemixButton name={project.domain} isMember={isMember} onClick={trackRemix} />\n        </div>\n      </div>\n    </section>\n  );\n};\n\nProjectEmbed.propTypes = {\n  project: PropTypes.object.isRequired,\n  addProjectToCollection: PropTypes.func,\n  top: PropTypes.any,\n};\n\nProjectEmbed.defaultProps = {\n  addProjectToCollection: null,\n  top: null,\n};\n\nexport default ProjectEmbed;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonContainer\":\"project-embed__buttonContainer___2U61N\",\"left\":\"project-embed__left___3BRkd\",\"right\":\"project-embed__right___a06c3\",\"buttonWrap\":\"project-embed__buttonWrap___R2M_T\",\"embedWrap\":\"project-embed__embedWrap___3Tlhi\",\"addToCollectionWrap\":\"project-embed__addToCollectionWrap___xH6rn\"};","/* Used in project previews for collection-items */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport Image from 'Components/images/image';\nimport Text from 'Components/text/text';\nimport Badge from 'Components/badges/badge';\nimport { FALLBACK_AVATAR_URL, getAvatarUrl } from 'Models/project';\nimport { ProjectLink } from 'Components/link';\n\nimport styles from './project-item.styl';\n\nconst ProfileAvatar = ({ project }) => <Image className={styles.avatar} src={getAvatarUrl(project.id)} defaultSrc={FALLBACK_AVATAR_URL} alt=\"\" />;\n\nconst getLinkBodyStyles = (project) => classnames(styles.linkBodySmall, { [styles.private]: project.private });\n\nconst ProjectItemSmall = ({ project }) => (\n  <div className={styles.projectItemSmall}>\n    <ProjectLink className={getLinkBodyStyles(project)} project={project}>\n      <div className={styles.projectHeader}>\n        <span className={styles.avatarWrap}>\n          <ProfileAvatar project={project} />\n        </span>\n        <Text>\n          <span className={styles.projectName}>{project.domain}</span>{' '}\n        </Text>\n        {project.private && (\n          <Badge type=\"private\" aria-label=\"private\">\n            {' '}\n          </Badge>\n        )}\n      </div>\n    </ProjectLink>\n  </div>\n);\n\nProjectItemSmall.propTypes = {\n  project: PropTypes.shape({\n    domain: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    private: PropTypes.bool,\n  }).isRequired,\n};\n\nexport default ProjectItemSmall;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { pickBy } from 'lodash';\nimport Markdown from 'Components/text/markdown';\nimport Button from 'Components/buttons/button';\nimport Image from 'Components/images/image';\nimport ProfileList from 'Components/profile-list';\nimport { ProjectLink } from 'Components/link';\nimport { PrivateIcon } from 'Components/private-badge';\nimport AnimationContainer from 'Components/animation-container';\nimport VisibilityContainer from 'Components/visibility-container';\nimport { FALLBACK_AVATAR_URL, getAvatarUrl } from 'Models/project';\nimport { useProjectMembers } from 'State/project';\nimport { useProjectOptions } from 'State/project-options';\nimport { useCurrentUser } from 'State/current-user';\n\nimport ProjectOptionsPop from './project-options-pop';\nimport styles from './project-item.styl';\n\nconst ProfileAvatar = ({ project }) => <Image className={styles.avatar} src={getAvatarUrl(project.id)} defaultSrc={FALLBACK_AVATAR_URL} alt=\"\" />;\n\nconst getLinkBodyStyles = (project) =>\n  classnames(styles.linkBody, {\n    [styles.private]: project.private,\n  });\n\nconst ProfileListWithData = ({ project }) => {\n  const { value: members } = useProjectMembers(project.id);\n  return <ProfileList layout=\"row\" glitchTeam={project.showAsGlitchTeam} {...members} />;\n};\n\nconst ProfileListLoader = ({ project }) => (\n  <VisibilityContainer>\n    {({ wasEverVisible }) => (\n      wasEverVisible ? <ProfileListWithData project={project} /> : <ProfileList layout=\"row\" glitchTeam={project.showAsGlitchTeam} />\n    )}\n  </VisibilityContainer>\n);\n\nconst bind = (fn, ...boundArgs) => (...calledArgs) => fn(...boundArgs, ...calledArgs);\n\nconst ProjectItem = ({ project, projectOptions: providedProjectOptions }) => {\n  const projectOptions = useProjectOptions(project, providedProjectOptions);\n  const { currentUser } = useCurrentUser();\n  const dispatch = (projectOptionName, ...args) => projectOptions[projectOptionName](...args);\n  return (\n    <AnimationContainer type=\"slideDown\" onAnimationEnd={dispatch}>\n      {(slideDown) => (\n        <AnimationContainer type=\"slideUp\" onAnimationEnd={dispatch}>\n          {(slideUp) => {\n            const animatedProjectOptions = pickBy(\n              {\n                ...projectOptions,\n                addPin: bind(slideUp, 'addPin'),\n                removePin: bind(slideDown, 'removePin'),\n                deleteProject: bind(slideDown, 'deleteProject'),\n                removeProjectFromTeam: bind(slideDown, 'removeProjectFromTeam'),\n                featureProject: bind(slideUp, 'featureProject'),\n              },\n              (_, key) => projectOptions[key],\n            );\n\n            return (\n              <div className={styles.container}>\n                <header className={styles.header}>\n                  <div className={classnames(styles.userListContainer, { [styles.spaceForOptions]: !!currentUser.login })}>\n                    <ProfileListLoader project={project} />\n                  </div>\n                  <div className={styles.projectOptionsContainer}>\n                    <ProjectOptionsPop project={project} projectOptions={animatedProjectOptions} />\n                  </div>\n                </header>\n                <ProjectLink className={getLinkBodyStyles(project)} project={project}>\n                  <div className={styles.projectHeader}>\n                    <div className={styles.avatarWrap}>\n                      <ProfileAvatar project={project} />\n                    </div>\n                    <div className={styles.nameWrap}>\n                      <div className={styles.itemButtonWrap}>\n                        <Button decorative image={project.private ? <PrivateIcon inButton isPrivate /> : null} imagePosition=\"left\">\n                          <span className={styles.projectDomain}>{project.domain}</span>\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                  <div className={styles.description}>\n                    <Markdown length={80}>{project.description || ' '}</Markdown>\n                  </div>\n                </ProjectLink>\n              </div>\n            );\n          }}\n        </AnimationContainer>\n      )}\n    </AnimationContainer>\n  );\n};\nProjectItem.propTypes = {\n  project: PropTypes.shape({\n    description: PropTypes.string.isRequired,\n    domain: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    private: PropTypes.bool,\n    showAsGlitchTeam: PropTypes.bool.isRequired,\n    users: PropTypes.array,\n    teams: PropTypes.array,\n  }).isRequired,\n  projectOptions: PropTypes.object,\n};\n\nProjectItem.defaultProps = {\n  projectOptions: {},\n};\n\n\nexport default ProjectItem;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"project-item__container___n2PCy\",\"projectItemSmall\":\"project-item__projectItemSmall___3MJFj\",\"linkBodySmall\":\"project-item__linkBodySmall___f7zVA\",\"private\":\"project-item__private___3XnbY\",\"avatarWrap\":\"project-item__avatarWrap___1Bv5I\",\"projectHeader\":\"project-item__projectHeader___1asTi\",\"header\":\"project-item__header___1lBdS\",\"userListContainer\":\"project-item__userListContainer___TcOXi\",\"spaceForOptions\":\"project-item__spaceForOptions___9jBiV\",\"projectOptionsContainer\":\"project-item__projectOptionsContainer___3eTYA\",\"linkBody\":\"project-item__linkBody___rHNCC\",\"itemButtonWrap\":\"project-item__itemButtonWrap___1XJtf\",\"nameWrap\":\"project-item__nameWrap___3FGbn\",\"avatar\":\"project-item__avatar___2z15i\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { mapValues } from 'lodash';\nimport { PopoverMenu, MultiPopover, PopoverDialog, PopoverActions, PopoverMenuButton } from 'Components/popover';\nimport { CreateCollectionWithProject } from 'Components/collection/create-collection-pop';\nimport { useTrackedFunc } from 'State/segment-analytics';\nimport { useCurrentUser } from 'State/current-user';\n\nimport { AddProjectToCollectionBase } from './add-project-to-collection-pop';\n\nconst isTeamProject = ({ currentUser, project }) => currentUser.teams.some((team) => project.teamIds.includes(team.id));\n\n/* eslint-disable react/no-array-index-key */\nconst PopoverMenuItems = ({ children }) =>\n  children.map(\n    (group, i) =>\n      group.some((item) => item.onClick) && (\n        <PopoverActions key={i} type={group.some((item) => item.dangerZone) ? 'dangerZone' : undefined}>\n          {group.map((item, j) => item.onClick && <PopoverMenuButton key={j} onClick={item.onClick} label={item.label} emoji={item.emoji} />)}\n        </PopoverActions>\n      ),\n  );\n\nconst ProjectOptionsContent = ({ project, projectOptions, addToCollectionPopover }) => {\n  const { currentUser } = useCurrentUser();\n  // TODO: replace this with a multi-popover pane\n  const onClickLeaveProject = useTrackedFunc(projectOptions.leaveProject && (() => {\n    if (isTeamProject({ currentUser, project })) {\n      projectOptions.leaveProject(project);\n      return;\n    }\n\n    const prompt = `Once you leave this project, you'll lose access to it unless someone else invites you back. \\n\\n Are sure you want to leave ${\n      project.domain\n    }?`;\n    if (window.confirm(prompt)) {\n      projectOptions.leaveProject(project);\n    }\n  }), 'Leave Project clicked');\n  const onClickDeleteProject = useTrackedFunc(projectOptions.deleteProject, 'Delete Project clicked');\n\n  return (\n    <PopoverDialog align=\"right\">\n      <PopoverMenuItems>\n        {[\n          [\n            { onClick: projectOptions.featureProject, label: 'Feature', emoji: 'clapper' },\n            { onClick: projectOptions.addPin, label: 'Pin', emoji: 'pushpin' },\n            { onClick: projectOptions.removePin, label: 'Un-Pin', emoji: 'pushpin' },\n          ],\n          [{ onClick: projectOptions.displayNewNote, label: 'Add Note', emoji: 'spiralNotePad' }],\n          [{ onClick: addToCollectionPopover, label: 'Add to Collection', emoji: 'framedPicture' }],\n          [{ onClick: projectOptions.joinTeamProject, label: 'Join Project', emoji: 'rainbow' }],\n          [\n            { onClick: onClickLeaveProject, label: 'Leave Project', emoji: 'wave' },\n          ],\n          [\n            { onClick: projectOptions.removeProjectFromTeam, label: 'Remove Project', emoji: 'thumbsDown', dangerZone: true },\n            { onClick: onClickDeleteProject, label: 'Delete Project', emoji: 'bomb', dangerZone: true },\n            { onClick: projectOptions.removeProjectFromCollection, label: 'Remove from Collection', emoji: 'thumbsDown', dangerZone: true },\n          ],\n        ]}\n      </PopoverMenuItems>\n    </PopoverDialog>\n  );\n};\n\nexport default function ProjectOptionsPop({ project, projectOptions }) {\n  const noProjectOptions = Object.values(projectOptions).every((option) => !option);\n\n  if (noProjectOptions) return null;\n\n  const toggleBeforeAction = (togglePopover) =>\n    mapValues(\n      projectOptions,\n      (action) =>\n        action &&\n        ((...args) => {\n          togglePopover();\n          action(...args);\n        }),\n    );\n\n  return (\n    <PopoverMenu>\n      {({ togglePopover }) => (\n        <MultiPopover\n          views={{\n            addToCollection: ({ createCollection }) => (\n              <AddProjectToCollectionBase\n                fromProject\n                project={project}\n                togglePopover={togglePopover}\n                addProjectToCollection={projectOptions.addProjectToCollection}\n                createCollectionPopover={createCollection}\n              />\n            ),\n            createCollection: () => <CreateCollectionWithProject project={project} addProjectToCollection={projectOptions.addProjectToCollection} />,\n          }}\n        >\n          {({ addToCollection }) => (\n            <ProjectOptionsContent project={project} projectOptions={toggleBeforeAction(togglePopover)} addToCollectionPopover={addToCollection} />\n          )}\n        </MultiPopover>\n      )}\n    </PopoverMenu>\n  );\n}\n\nProjectOptionsPop.propTypes = {\n  project: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    domain: PropTypes.string.isRequired,\n    permissions: PropTypes.array.isRequired,\n    teamIds: PropTypes.array.isRequired,\n    private: PropTypes.bool,\n    note: PropTypes.any,\n    isAddingNewNote: PropTypes.bool,\n  }).isRequired,\n  projectOptions: PropTypes.object,\n};\n\nProjectOptionsPop.defaultProps = {\n  projectOptions: {},\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport Markdown from 'Components/text/markdown';\nimport ProfileList from 'Components/profile-list';\nimport VisibilityContainer from 'Components/visibility-container';\nimport { ResultItem, ResultInfo, ResultName, ResultDescription } from 'Components/containers/results-list';\nimport { ProjectAvatar } from 'Components/images/avatar';\nimport { getLink } from 'Models/project';\nimport { useProjectMembers } from 'State/project';\n\nimport styles from './project-result-item.styl';\n\nconst ProfileListWithData = ({ project }) => {\n  const { value: members } = useProjectMembers(project.id);\n  return <ProfileList {...members} layout=\"row\" size=\"small\" />;\n};\n\nconst ProfileListWrap = ({ project }) => (\n  <div className={styles.profileListWrap}>\n    <VisibilityContainer>\n      {({ wasEverVisible }) => (\n        wasEverVisible ? <ProfileListWithData project={project} /> : <ProfileList layout=\"row\" size=\"small\" />\n      )}\n    </VisibilityContainer>\n  </div>\n);\n\nconst ProjectResultItem = ({ project, selected, active, onClick }) => (\n  <ResultItem\n    className={classnames(project.private && styles.private)}\n    href={getLink(project)}\n    onClick={onClick}\n    active={active}\n    selected={selected}\n  >\n    <div>\n      <ProjectAvatar project={project} />\n    </div>\n    <ResultInfo>\n      <ResultName>{project.domain}</ResultName>\n      {project.description.length > 0 && (\n        <ResultDescription>\n          <Markdown renderAsPlaintext>{project.description}</Markdown>\n        </ResultDescription>\n      )}\n      <ProfileListWrap project={project} />\n    </ResultInfo>\n  </ResultItem>\n);\n\nProjectResultItem.propTypes = {\n  project: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    domain: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    private: PropTypes.bool,\n  }).isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default ProjectResultItem;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"private\":\"project-result-item__private___2npR_\",\"profileListWrap\":\"project-result-item__profileListWrap___13l6S\"};","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport randomColor from 'randomcolor';\nimport { sample } from 'lodash';\n\nimport Heading from 'Components/text/heading';\nimport Link from 'Components/link';\nimport Grid from 'Components/containers/grid';\nimport ErrorBoundary from 'Components/error-boundary';\nimport Arrow from 'Components/arrow';\nimport QuestionItem from './item';\n\nimport { captureException } from '../../utils/sentry';\nimport { useAPI } from '../../state/api';\nimport styles from './questions.styl';\n\nconst kaomojis = ['八(＾□＾*)', '(ノ^_^)ノ', 'ヽ(*ﾟｰﾟ*)ﾉ', '♪(┌・。・)┌', 'ヽ(๏∀๏ )ﾉ', 'ヽ(^。^)丿'];\n\nconst QuestionTimer = ({ animating, callback }) => (\n  <div className={styles.loaderPie} title=\"Looking for more questions...\">\n    <div className={styles.leftSide}>\n      <div className={classnames(styles.slice, animating && styles.animated)} onAnimationEnd={callback} />\n    </div>\n    <div className={styles.rightSide}>\n      <div className={classnames(styles.slice, animating && styles.animated)} />\n    </div>\n  </div>\n);\nQuestionTimer.propTypes = {\n  animating: PropTypes.bool.isRequired,\n  callback: PropTypes.func.isRequired,\n};\n\nasync function load(api, max) {\n  const kaomoji = sample(kaomojis);\n  try {\n    const { data } = await api.get('projects/questions');\n    const questions = data\n      .map((q) => JSON.parse(q.details))\n      .filter((q) => !!q)\n      .slice(0, max)\n      .map((question) => {\n        const [colorInner, colorOuter] = randomColor({\n          luminosity: 'light',\n          count: 2,\n        });\n        return { colorInner, colorOuter, id: question.questionId, ...question };\n      });\n    return { kaomoji, questions, loading: false };\n  } catch (error) {\n    console.error(error);\n    captureException(error);\n    return { kaomoji, questions: [], loading: false };\n  }\n}\n\nfunction useRepeatingEffect(effectHandler, dependencies) {\n  const [counter, setCounter] = useState(0);\n  useEffect(effectHandler, [...dependencies, counter]);\n  const increment = () => setCounter((x) => x + 1);\n  return increment;\n}\n\nfunction Questions({ max }) {\n  const api = useAPI();\n  const [{ kaomoji, loading, questions }, setState] = useState({\n    kaomoji: '',\n    loading: true,\n    questions: [],\n  });\n  const reload = useRepeatingEffect(() => {\n    setState({ kaomoji, loading: true, questions });\n    load(api, max).then(setState);\n  }, []);\n\n  return (\n    <section className={styles.container}>\n      <Heading tagName=\"h2\">\n        <Link to=\"/questions\">Help Others, Get Thanks <Arrow /></Link> <QuestionTimer animating={!loading} callback={reload} />\n      </Heading>\n      <div>\n        {questions.length ? (\n          <ErrorBoundary>\n            <Grid items={questions}>{(question) => <QuestionItem {...question} />}</Grid>\n          </ErrorBoundary>\n        ) : (\n          <>\n            {kaomoji} Looks like nobody is asking for help right now.{' '}\n            <Link className={styles.link} to=\"/help/how-can-i-get-help-with-code-in-my-project/\">\n              Learn about helping\n            </Link>\n          </>\n        )}\n      </div>\n    </section>\n  );\n}\n\nQuestions.propTypes = {\n  max: PropTypes.number,\n};\nQuestions.defaultProps = {\n  max: 3,\n};\n\nexport default Questions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Image from 'Components/images/image';\nimport Button from 'Components/buttons/button';\nimport { getEditorUrl } from 'Models/project';\nimport Link from 'Components/link';\nimport styles from './questions.styl';\n\nconst iconHelp = 'https://cdn.glitch.com/f7224274-1330-4022-a8f2-8ae09dbd68a8%2Fask-for-help.svg?1494954687906';\n\nfunction truncateQuestion(question) {\n  const max = 140;\n  if (question.length > max) {\n    return `${question.substring(0, max - 1)}…`;\n  }\n  return question;\n}\n\nfunction truncateTag(tag) {\n  const max = 15;\n  return tag.substring(0, max);\n}\n\nconst QuestionItem = ({ colorOuter, colorInner, domain, question, tags, userAvatar, userColor, userLogin, path, line, character }) => (\n  <>\n    <Image className={styles.helpIcon} src={iconHelp} alt=\"Help icon\" />\n    <Link\n      to={getEditorUrl(domain, path, line, character)}\n      data-track=\"question\"\n      data-track-label={domain}\n      className={styles.question}\n      style={{ backgroundColor: colorOuter }}\n    >\n      <div className={styles.questionInner} style={{ backgroundColor: colorInner }}>\n        <div className={styles.questionAsker}>\n          <Image className={styles.avatar} src={userAvatar} style={{ backgroundColor: userColor }} alt=\"\" />\n          <Button decorative>Help {userLogin}</Button>\n        </div>\n\n        <div className={styles.questionText} title={question}>\n          {truncateQuestion(question)}\n        </div>\n        <div className={styles.questionTags}>\n          {tags.map((tag) => (\n            <div key={tag} className={styles.tag} title={tag}>\n              {truncateTag(tag)}\n            </div>\n          ))}\n        </div>\n      </div>\n    </Link>\n  </>\n);\nQuestionItem.propTypes = {\n  colorOuter: PropTypes.string.isRequired,\n  colorInner: PropTypes.string.isRequired,\n  domain: PropTypes.string.isRequired,\n  question: PropTypes.string.isRequired,\n  tags: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  userAvatar: PropTypes.string.isRequired,\n  userColor: PropTypes.string.isRequired,\n  userLogin: PropTypes.string.isRequired,\n  path: PropTypes.string,\n  line: PropTypes.number,\n  character: PropTypes.number,\n};\n\nQuestionItem.defaultProps = {\n  path: '',\n  line: 0,\n  character: 0,\n};\n\nexport default QuestionItem;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"questions__container___31PmZ\",\"link\":\"questions__link___3yPA-\",\"helpIcon\":\"questions__helpIcon___EfQpG\",\"question\":\"questions__question___1lpAa\",\"questionAsker\":\"questions__questionAsker___1Ll5g\",\"questionInner\":\"questions__questionInner___12flS\",\"avatar\":\"questions__avatar___2LuMj\",\"questionText\":\"questions__questionText___rwCY3\",\"questionTags\":\"questions__questionTags___3UxP_\",\"tag\":\"questions__tag___7mxzi\",\"loaderPie\":\"questions__loaderPie___3fO4_\",\"slice\":\"questions__slice___3b4x4\",\"leftSide\":\"questions__leftSide___2uGCf\",\"rightSide\":\"questions__rightSide___1Wcg-\",\"animated\":\"questions__animated___3rnyD\",\"pie-left\":\"questions__pie-left___bgjB1\",\"pie-right\":\"questions__pie-right___11Egm\"};","import React from 'react';\n\nimport Heading from 'Components/text/heading';\nimport ProjectsList from 'Components/containers/projects-list';\nimport Loader from 'Components/loader';\nimport CoverContainer from 'Components/containers/cover-container';\nimport { UserLink, WrappingLink } from 'Components/link';\nimport Button from 'Components/buttons/button';\nimport Arrow from 'Components/arrow';\nimport SignInPop from 'Components/sign-in-pop';\nimport { getAvatarStyle, getLink } from 'Models/user';\nimport { useCurrentUser } from 'State/current-user';\n\nimport styles from './styles.styl';\n\nconst SignInNotice = () => (\n  <div className={styles.anonUserSignUp}>\n    <span>\n      <SignInPop /> to keep your projects.\n    </span>\n  </div>\n);\n\nconst ClearSession = ({ clearUser }) => {\n  function clickClearSession() {\n    if (\n      // eslint-disable-next-line\n      !window.confirm(`All activity from this anonymous account will be cleared.  Are you sure you want to continue?`)\n    ) {\n      return;\n    }\n    clearUser();\n  }\n\n  return (\n    <div className={styles.clearSession}>\n      <Button onClick={clickClearSession} size=\"small\" type=\"dangerZone\" emoji=\"balloon\">\n        Clear Session\n      </Button>\n    </div>\n  );\n};\n\nconst RecentProjects = () => {\n  const { currentUser, fetched, clear } = useCurrentUser();\n  const isAnonymousUser = !currentUser.login;\n\n  return (\n    <section data-cy=\"recent-projects\">\n      <Heading tagName=\"h2\">\n        <UserLink user={currentUser}>Your Projects <Arrow /></UserLink>\n      </Heading>\n      {isAnonymousUser && <SignInNotice />}\n      <CoverContainer type=\"user\" item={currentUser}>\n        <div className={styles.coverWrap}>\n          <div className={styles.avatarWrap}>\n            <WrappingLink user={currentUser} href={getLink(currentUser)}>\n              <div className={styles.userAvatar} style={getAvatarStyle(currentUser)} />\n            </WrappingLink>\n          </div>\n          <div className={styles.projectsWrap}>\n            {fetched ? (\n              <ProjectsList layout=\"row\" projects={currentUser.projects.slice(0, 3)} />\n            ) : (\n              <Loader />\n            )}\n          </div>\n        </div>\n        {isAnonymousUser && <ClearSession clearUser={clear} />}\n      </CoverContainer>\n    </section>\n  );\n};\n\nexport default RecentProjects;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"anonUserSignUp\":\"styles__anonUserSignUp___1dUFt\",\"clearSession\":\"styles__clearSession___3AilY\",\"coverWrap\":\"styles__coverWrap___26akl\",\"avatarWrap\":\"styles__avatarWrap___3rWCi\",\"userAvatar\":\"styles__userAvatar___25t1e\",\"projectsWrap\":\"styles__projectsWrap___3VlXc\"};","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { sampleSize } from 'lodash';\n\nimport ProjectsList from 'Components/containers/projects-list';\nimport CoverContainer from 'Components/containers/cover-container';\nimport DataLoader from 'Components/data-loader';\nimport { TeamLink, UserLink } from 'Components/link';\nimport Arrow from 'Components/arrow';\nimport { getDisplayName } from 'Models/user';\nimport styles from './styles.styl';\n\nconst PROJECT_COUNT = 3;\n\nconst RelatedProjectsBody = ({ projects, type, item }) =>\n  projects.length > 0 ? (\n    <CoverContainer type={type} item={item}>\n      <div className={styles.projectsWrap}>\n        <ProjectsList layout=\"row\" projects={projects} />\n      </div>\n    </CoverContainer>\n  ) : null;\n\nRelatedProjectsBody.propTypes = {\n  projects: PropTypes.array.isRequired,\n};\n\nasync function getProjects(api, { type, id, ignoreProjectId }) {\n  let [pins, recents] = await Promise.all([\n    api.get(`/v1/${type}s/by/id/pinnedProjects?id=${id}`).then((res) => res.data.items),\n    api.get(`/v1/${type}s/by/id/projects?id=${id}`).then((res) => res.data.items),\n  ]);\n\n  pins = pins.filter((project) => project.id !== ignoreProjectId);\n  const sampledPins = sampleSize(pins, PROJECT_COUNT);\n  const sampledPinIDs = sampledPins.map((project) => project.id);\n\n  recents = recents.filter((project) => project.id !== ignoreProjectId && !sampledPinIDs.includes(project.id));\n  const sampledRecents = sampleSize(recents, PROJECT_COUNT - sampledPins.length);\n  return [...sampledPins, ...sampledRecents];\n}\n\nfunction useSample(items, count) {\n  const [sample, setSample] = useState([]);\n  useEffect(() => {\n    setSample(sampleSize(items, count));\n  }, [count, ...items.map((item) => item.id)]);\n  return sample;\n}\n\nfunction RelatedProjects({ project }) {\n  const teams = useSample(project.teams || [], 1);\n  const users = useSample(project.users || [], 2 - teams.length);\n  const ignoreProjectId = project.id;\n\n  if (!teams.length && !users.length) {\n    return null;\n  }\n  return (\n    <ul className={styles.container}>\n      {teams.map((team) => (\n        <li key={team.id}>\n          <DataLoader get={(api) => getProjects(api, { type: 'team', id: team.id, ignoreProjectId })}>\n            {(projects) =>\n              projects && projects.length > 0 && (\n                <>\n                  <h2>\n                    <TeamLink team={team}>More by {team.name} <Arrow /></TeamLink>\n                  </h2>\n                  <RelatedProjectsBody projects={projects} type=\"team\" item={team} />\n                </>\n              )\n            }\n          </DataLoader>\n        </li>\n      ))}\n      {users.map((user) => (\n        <li key={user.id}>\n          <DataLoader get={(api) => getProjects(api, { type: 'user', id: user.id, ignoreProjectId })}>\n            {(projects) =>\n              projects && projects.length > 0 && (\n                <>\n                  <h2>\n                    <UserLink user={user}>More by {getDisplayName(user)} <Arrow /></UserLink>\n                  </h2>\n                  <RelatedProjectsBody projects={projects} type=\"user\" item={user} />\n                </>\n              )\n            }\n          </DataLoader>\n        </li>\n      ))}\n    </ul>\n  );\n}\nRelatedProjects.propTypes = {\n  project: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    teams: PropTypes.array,\n    users: PropTypes.array,\n  }).isRequired,\n};\n\nexport default RelatedProjects;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles__container___3GLo5\",\"projectsWrap\":\"styles__projectsWrap___148x6\"};","import React, { useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { parseOneAddress } from 'email-addresses';\nimport { debounce, trimStart } from 'lodash';\nimport axios from 'axios';\n\nimport TextArea from 'Components/inputs/text-area';\nimport Loader from 'Components/loader';\nimport TextInput from 'Components/inputs/text-input';\nimport Notification from 'Components/notification';\nimport Button from 'Components/buttons/button';\nimport Emoji from 'Components/images/emoji';\nimport { PopoverWithButton, PopoverDialog, PopoverInfo, PopoverActions, PopoverTitle, InfoDescription } from 'Components/popover';\nimport { useCurrentUser } from 'State/current-user';\nimport { captureException } from 'Utils/sentry';\nimport { getAbuseReportTitle, getAbuseReportBody } from 'Utils/abuse-reporting';\n\nimport styles from './styles.styl';\n\nfunction getDefaultReason(reportedType) {\n  if (reportedType === 'user') {\n    return \"This user profile doesn't seem appropriate for Glitch because...\";\n  }\n  if (reportedType === 'home') {\n    return \"[Something here] doesn't seem appropriate for Glitch because...\";\n  }\n  return `This ${reportedType} doesn't seem appropriate for Glitch because...`;\n}\n\nfunction validateReason(reason, reportedType) {\n  if (!reason) return 'A description of the issue is required';\n  if (reason === getDefaultReason(reportedType)) return 'Reason is required';\n  return '';\n}\n\nfunction validateEmail(email, currentUser) {\n  if (currentUser.login) return '';\n  if (!email) return 'Email is required';\n  if (!parseOneAddress(email)) return 'Please enter a valid email';\n  return '';\n}\n\nfunction useDebouncedState(initialState, timeout) {\n  const [state, setState] = useState(initialState);\n  const setDebounced = useMemo(() => debounce(setState, timeout));\n  return [state, setDebounced];\n}\n\nconst Success = () => (\n  <>\n    <PopoverTitle>Report Abuse</PopoverTitle>\n    <PopoverActions>\n      <Notification persistent type=\"success\">Report Sent</Notification>\n      <InfoDescription>\n        Thanks for helping to keep Glitch a safe, friendly community <Emoji name=\"park\" />\n      </InfoDescription>\n    </PopoverActions>\n  </>\n);\n\nconst Failure = ({ value }) => (\n  <>\n    <PopoverTitle>\n      Failed to Send <Emoji name=\"sick\" />\n    </PopoverTitle>\n    <PopoverInfo>\n      <InfoDescription>\n        But you can still send us your message by emailing the details below to <strong>support@glitch.com</strong>\n      </InfoDescription>\n    </PopoverInfo>\n    <PopoverActions>\n      <textarea className={styles.manualReport} value={value} readOnly />\n    </PopoverActions>\n  </>\n);\n\nfunction ReportAbusePop({ reportedType, reportedModel }) {\n  const { currentUser } = useCurrentUser();\n  const [status, setStatus] = useState('ready'); // ready -> loading -> success | error\n\n  const [reason, setReason] = useState(getDefaultReason(reportedType));\n  const [reasonError, setReasonError] = useDebouncedState('', 200);\n  const reasonOnChange = (value) => {\n    setReason(value);\n    setReasonError(validateReason(value, reportedType));\n  };\n\n  const [email, setEmail] = useState('');\n  const [emailError, setEmailError] = useDebouncedState('', 200);\n  const emailOnChange = (value) => {\n    setEmail(value);\n    setEmailError(validateEmail(value, currentUser));\n  };\n\n  const formatRaw = () => getAbuseReportBody(currentUser, email, reportedType, reportedModel, reason);\n\n  const submitReport = async (e) => {\n    e.preventDefault();\n    const emailErr = validateEmail(email, currentUser);\n    const reasonErr = validateReason(reason, reportedType);\n    if (emailErr || reasonErr) {\n      setEmailError(emailErr);\n      setReasonError(reasonErr);\n      return;\n    }\n\n    setStatus('loading');\n    try {\n      await axios.post('https://support-poster.glitch.me/post', {\n        raw: formatRaw(),\n        title: getAbuseReportTitle(reportedModel, reportedType),\n      });\n\n      setStatus('success');\n    } catch (error) {\n      captureException(error);\n      setStatus('error');\n    }\n  };\n\n  if (status === 'success') return <Success />;\n  if (status === 'error') return <Failure value={trimStart(formatRaw())} />;\n\n  return (\n    <form onSubmit={submitReport}>\n      <PopoverTitle>Report Abuse</PopoverTitle>\n      <PopoverActions>\n        <TextArea\n          className={styles.textArea}\n          value={reason}\n          onChange={reasonOnChange}\n          onBlur={() => reasonOnChange(reason)}\n          autoFocus // eslint-disable-line jsx-a11y/no-autofocus\n          error={reasonError}\n        />\n      </PopoverActions>\n      {currentUser.login ? (\n        <PopoverInfo type=\"secondary\">\n          <div className={styles.right}>\n            <InfoDescription>\n              from <strong>{currentUser.login}</strong>\n            </InfoDescription>\n          </div>\n        </PopoverInfo>\n      ) : (\n        <PopoverInfo>\n          <TextInput\n            value={email}\n            onChange={emailOnChange}\n            onBlur={() => emailOnChange(email)}\n            placeholder=\"your@email.com\"\n            error={emailError}\n            type=\"email\"\n            labelText=\"email address\"\n          />\n        </PopoverInfo>\n      )}\n      <PopoverActions>\n        {status === 'loading' ? (\n          <Loader />\n        ) : (\n          <Button size=\"small\" onClick={submitReport}>\n            Submit Report\n          </Button>\n        )}\n      </PopoverActions>\n    </form>\n  );\n}\n\nconst ReportAbusePopButton = ({ reportedType, reportedModel }) => (\n  <PopoverWithButton buttonProps={{ size: 'small', type: 'tertiary' }} buttonText=\"Report Abuse\">\n    {() => (\n      <PopoverDialog align=\"topLeft\" wide>\n        <ReportAbusePop reportedType={reportedType} reportedModel={reportedModel} />\n      </PopoverDialog>\n    )}\n  </PopoverWithButton>\n);\n\nReportAbusePopButton.propTypes = {\n  reportedType: PropTypes.oneOf(['project', 'collection', 'user', 'team', 'home']).isRequired,\n  reportedModel: PropTypes.object, // the actual model, or null if no model (like for the home page)\n};\n\nReportAbusePopButton.defaultProps = {\n  reportedModel: null,\n};\n\nexport default ReportAbusePopButton;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textArea\":\"styles__textArea___2NzUr\",\"manualReport\":\"styles__manualReport___h09Mo\",\"right\":\"styles__right___2Su7J\"};","import React from 'react';\nimport classnames from 'classnames';\nimport MaskImage from 'Components/images/mask-image';\nimport { TeamAvatar, UserAvatar, ProjectAvatar, CollectionAvatar } from 'Components/images/avatar';\nimport Link, { TeamLink, UserLink, ProjectLink } from 'Components/link';\nimport Arrow from 'Components/arrow';\nimport styles from './autocomplete.styl';\n\nconst StarterKitResult = ({ value: starterKit }) => (\n  <a href={starterKit.url} className={styles.resultContainer}>\n    <div className={styles.avatarContainer}>\n      <MaskImage src={starterKit.imageURL} />\n    </div>\n    <div className={styles.infoContainer}>\n      <div className={styles.infoPrimary}>{starterKit.name}</div>\n      <div className={styles.infoSecondary}>{starterKit.description}</div>\n    </div>\n  </a>\n);\n\nconst TeamResult = ({ value: team }) => (\n  <TeamLink team={team} className={styles.resultContainer}>\n    <div className={styles.avatarContainer}>\n      <TeamAvatar hideTooltip team={{ ...team }} />\n    </div>\n    <div className={styles.infoContainer}>\n      <div className={styles.infoPrimary}>{team.name}</div>\n      <div className={styles.infoSecondary}>@{team.url}</div>\n    </div>\n  </TeamLink>\n);\n\nconst UserResult = ({ value: user }) => (\n  <UserLink user={user} className={styles.resultContainer}>\n    <div className={styles.avatarContainer}>\n      <UserAvatar hideTooltip user={user} />\n    </div>\n    <div className={styles.infoContainer}>\n      <div className={styles.infoPrimary}>{user.name}</div>\n      <div className={styles.infoSecondary}>@{user.login}</div>\n    </div>\n  </UserLink>\n);\n\nconst ProjectResult = ({ value: project }) => (\n  <ProjectLink project={project} className={styles.resultContainer}>\n    <div className={styles.avatarContainer}>\n      <ProjectAvatar project={project} />\n    </div>\n    <div className={styles.infoContainer}>\n      <div className={styles.infoPrimary}>{project.domain}</div>\n      <div className={styles.infoSecondary}>{project.description}</div>\n    </div>\n  </ProjectLink>\n);\n\nconst CollectionLink = ({ collection, children, ...props }) => (\n  <a href={`/@${collection.fullUrl}`} {...props}>\n    {children}\n  </a>\n);\n\nconst CollectionResult = ({ value: collection }) => (\n  <CollectionLink collection={collection} className={styles.resultContainer}>\n    <div className={styles.avatarContainer}>\n      <CollectionAvatar collection={collection} />\n    </div>\n    <div className={styles.infoContainer}>\n      <div className={styles.infoPrimary}>{collection.name}</div>\n      <div className={styles.infoSecondary}>@{collection.fullUrl}</div>\n    </div>\n  </CollectionLink>\n);\n\nconst SeeAllResults = ({ query, selected }) => (\n  <Link to={`/search?q=${query}`} className={classnames(styles.seeAllResults, selected && styles.selected)}>\n    See all results <Arrow />\n  </Link>\n);\n\nconst resultComponents = {\n  starterKit: StarterKitResult,\n  team: TeamResult,\n  user: UserResult,\n  project: ProjectResult,\n  collection: CollectionResult,\n};\n\nconst Result = ({ value, selected }) => {\n  const Component = resultComponents[value.type];\n  return <li className={classnames(styles.resultItem, selected && styles.selected)}>{Component && <Component value={value} />}</li>;\n};\n\nconst Autocomplete = ({ query, results, seeAllResultsSelected }) => (\n  <div className={styles.container}>\n    <ul>\n      {results.map(({ id, label, items }) => (\n        <li key={id}>\n          <header className={styles.resultGroupHeader}>{label}</header>\n          <ul>\n            {items.map((item) => (\n              <Result key={item.id} value={item} selected={item.selected} />\n            ))}\n          </ul>\n        </li>\n      ))}\n      <li>\n        <SeeAllResults query={query} selected={seeAllResultsSelected} />\n      </li>\n    </ul>\n  </div>\n);\n\nexport default Autocomplete;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"autocomplete__container___2Fx54\",\"resultGroupHeader\":\"autocomplete__resultGroupHeader___3xeJc\",\"resultItem\":\"autocomplete__resultItem___3wO6t\",\"seeAllResults\":\"autocomplete__seeAllResults___2VIH7\",\"resultContainer\":\"autocomplete__resultContainer___3CL1o\",\"selected\":\"autocomplete__selected___9IaFB\",\"avatarContainer\":\"autocomplete__avatarContainer___2PxiS\",\"infoContainer\":\"autocomplete__infoContainer___1y7uz\",\"infoPrimary\":\"autocomplete__infoPrimary___3w7Fg\",\"infoSecondary\":\"autocomplete__infoSecondary___32CL0\",\"memberContainer\":\"autocomplete__memberContainer___140y1\"};","import React, { useEffect, useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { mapValues, flatMap } from 'lodash';\n\nimport { PopoverContainer } from 'Components/popover';\nimport { getLink as getProjectLink } from 'Models/project';\nimport { getLink as getUserLink } from 'Models/user';\nimport { getLink as getTeamLink } from 'Models/team';\nimport { useAlgoliaSearch } from 'State/search';\n\nimport TextInput from '../inputs/text-input';\nimport AutocompleteSearch from './autocomplete';\nimport styles from './search-form.styl';\n\nconst createSlice = (handlers) => {\n  const actions = mapValues(handlers, (_, type) => (payload) => ({ type, payload }));\n  const reducer = (state, action) => {\n    if (handlers[action.type]) return handlers[action.type](state, action);\n    return state;\n  };\n  return { actions, reducer };\n};\n\nconst resultGroups = [\n  { id: 'top', label: 'Top Results', getItems: (results) => [...results.starterKit, ...results.topResults] },\n  { id: 'team', label: 'Teams' },\n  { id: 'user', label: 'Users' },\n  { id: 'project', label: 'Projects' },\n  { id: 'collection', label: 'Collections' },\n];\n\nconst MAX_RESULTS_PER_TYPE = 3;\n\nconst formatResults = (results) => {\n  const notTopResult = (result) => !results.topResults.includes(result);\n  const getItemsFor = (group) => {\n    if (group.getItems) return group.getItems(results);\n    if (!results[group.id]) return [];\n    return results[group.id].filter(notTopResult).slice(0, MAX_RESULTS_PER_TYPE);\n  };\n  return resultGroups.map((group) => ({ ...group, items: getItemsFor(group) })).filter((group) => group.items.length > 0);\n};\n\nconst resultsWithSelection = (results, selectedResult) => {\n  if (!selectedResult) return results;\n  return results.map((group) => ({\n    ...group,\n    items: group.items.map((item) => (item === selectedResult ? { ...item, selected: true } : item)),\n  }));\n};\n\nconst urlForItem = {\n  starterKit: (starterKit) => starterKit.url,\n  team: getTeamLink,\n  user: getUserLink,\n  project: getProjectLink,\n  collection: (collection) => `/@${collection.fullUrl}`,\n  seeAllResults: (_, query) => `/search?q=${query}`,\n};\n\nconst seeAllResultsSelected = { type: 'seeAllResults' };\n\nfunction getOffsetSelectedResult({ results, selectedResult }, offset) {\n  const flatResults = flatMap(results, ({ items }) => items);\n  if (!selectedResult && offset < 0) {\n    return seeAllResultsSelected;\n  }\n  if (selectedResult === seeAllResultsSelected && offset < 0) {\n    return flatResults[flatResults.length + offset];\n  }\n  if ((!selectedResult || selectedResult === seeAllResultsSelected) && offset > 0) {\n    return flatResults[offset - 1];\n  }\n\n  const nextIndex = flatResults.indexOf(selectedResult) + offset;\n  return flatResults[nextIndex] || seeAllResultsSelected;\n}\n\nconst { actions, reducer } = createSlice({\n  queryChanged: (state, { payload }) => ({\n    ...state,\n    query: payload,\n  }),\n  resultsChanged: (state, { payload }) => ({\n    ...state,\n    selectedResult: null,\n    results: formatResults(payload),\n  }),\n  arrowUp: (state) => ({\n    ...state,\n    selectedResult: getOffsetSelectedResult(state, -1),\n  }),\n  arrowDown: (state) => ({\n    ...state,\n    selectedResult: getOffsetSelectedResult(state, 1),\n  }),\n});\n\nconst AlgoliaSearchController = withRouter(({ history, visible, openPopover, defaultValue }) => {\n  const initialState = {\n    selectedResult: null,\n    query: defaultValue,\n    results: [],\n  };\n  const [{ query, results, selectedResult }, dispatch] = useReducer(reducer, initialState);\n  const algoliaResults = useAlgoliaSearch(query);\n\n  useEffect(() => {\n    // use last complete results\n    if (algoliaResults.status === 'ready') {\n      dispatch(actions.resultsChanged(algoliaResults));\n    }\n  }, [algoliaResults]);\n\n  const onKeyDown = (e) => {\n    if (e.key === 'ArrowUp') {\n      e.preventDefault();\n      dispatch(actions.arrowUp());\n    } else if (e.key === 'ArrowDown') {\n      e.preventDefault();\n      dispatch(actions.arrowDown());\n    }\n  };\n  const onSubmit = (event) => {\n    event.preventDefault();\n    if (!query) return;\n    if (selectedResult) {\n      history.push(urlForItem[selectedResult.type](selectedResult, query));\n    } else {\n      history.push(`/search?q=${query}`);\n    }\n  };\n\n  const onChange = (value) => dispatch(actions.queryChanged(value));\n\n  return (\n    <form className={styles.container} role=\"search\" onSubmit={onSubmit} autoComplete=\"off\" autoCapitalize=\"off\">\n      <TextInput\n        labelText=\"Search Glitch\"\n        name=\"q\"\n        onChange={onChange}\n        onKeyDown={onKeyDown}\n        onFocus={openPopover}\n        opaque\n        placeholder=\"bots, apps, users\"\n        type=\"search\"\n        value={query}\n      />\n      {query && visible && (\n        <div className={styles.popOver}>\n          <AutocompleteSearch\n            query={query}\n            results={resultsWithSelection(results, selectedResult)}\n            seeAllResultsSelected={selectedResult === seeAllResultsSelected}\n          />\n        </div>\n      )}\n    </form>\n  );\n});\n\nfunction SearchForm({ defaultValue }) {\n  return (\n    <PopoverContainer>\n      {({ visible, openPopover }) => <AlgoliaSearchController visible={visible} openPopover={openPopover} defaultValue={defaultValue} />}\n    </PopoverContainer>\n  );\n}\n\nSearchForm.propTypes = {\n  defaultValue: PropTypes.string,\n};\nSearchForm.defaultProps = {\n  defaultValue: '',\n};\n\nexport default SearchForm;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"search-form__container___2vQWN\",\"popOver\":\"search-form__popOver___9iloY\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Image from 'Components/images/image';\nimport { getCoverUrl as getTeamCoverUrl } from 'Models/team';\nimport { getCoverUrl as getUserCoverUrl, lightColors } from 'Models/user';\nimport { hexToRgbA } from 'Utils/color';\nimport styles from './search-result-cover-bar.styl';\n\nconst cacheBuster = Math.floor(Math.random() * 1000);\n\nconst defaultCoverURL = 'https://cdn.glitch.com/55f8497b-3334-43ca-851e-6c9780082244%2Fdefault-cover-wide.svg?1503518400625';\n\nconst coverUrlForType = {\n  team: getTeamCoverUrl,\n  user: getUserCoverUrl,\n};\n\nconst SearchResultCoverBar = ({ type, item, size, cache = cacheBuster }) => {\n  const getCoverUrl = coverUrlForType[type];\n  const coverBackground = hexToRgbA(lightColors[item.id % 4]);\n\n  return (\n    <div className={styles.cover} style={{ backgroundColor: coverBackground }}>\n      <Image src={getCoverUrl({ ...item, size, cache })} defaultSrc={defaultCoverURL} alt=\"\" />\n    </div>\n  );\n};\n\nSearchResultCoverBar.propTypes = {\n  type: PropTypes.oneOf(['user', 'team']).isRequired,\n  size: PropTypes.oneOf(['medium', 'large']).isRequired,\n};\n\nexport default SearchResultCoverBar;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cover\":\"search-result-cover-bar__cover___Un2p9\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport SegmentedButtons from 'Components/buttons/segmented-buttons';\nimport Button from 'Components/buttons/button';\nimport Badge from 'Components/badges/badge';\nimport Heading from 'Components/text/heading';\nimport UserItem from 'Components/user/user-item';\nimport TeamItem from 'Components/team/team-item';\nimport ProjectItem from 'Components/project/project-item';\nimport CollectionItemSmall from 'Components/collection/collection-item-small';\nimport StarterKitItem from 'Components/search/starter-kit-result';\nimport Grid from 'Components/containers/grid';\nimport NotFound from 'Components/errors/not-found';\nimport Loader from 'Components/loader';\n\nimport styles from './search-results.styl';\n\nconst FilterContainer = ({ filters, activeFilter, setFilter, query }) => {\n  const buttons = filters.map((filter) => ({\n    name: filter.id,\n    contents: (\n      <>\n        {filter.label}\n        {filter.hits && <Badge>{filter.hits > filter.maxHits ? `${filter.maxHits}+` : filter.hits}</Badge>}\n      </>\n    ),\n  }));\n\n  return (\n    <>\n      <SegmentedButtons value={activeFilter} buttons={buttons} onChange={setFilter} />\n      {activeFilter === 'all' && <h1>All results for {query}</h1>}\n    </>\n  );\n};\n\nconst groups = [\n  { id: 'team', label: 'Teams' },\n  { id: 'user', label: 'Users' },\n  { id: 'project', label: 'Projects' },\n  { id: 'collection', label: 'Collections' },\n];\n\nconst resultComponents = {\n  team: ({ result }) => <TeamItem team={result} />,\n  user: ({ result }) => <UserItem user={result} />,\n  project: ({ result }) => <ProjectItem project={result} />,\n  collection: ({ result }) => <CollectionItemSmall showCurator collection={result} />,\n};\n\nconst ResultComponent = ({ result }) => {\n  const Component = resultComponents[result.type];\n  return <Component result={result} />;\n};\n\nconst ShowAllButton = ({ label, onClick }) => (\n  <div className={styles.showAllButton}>\n    <Button onClick={onClick}>Show All {label}</Button>\n  </div>\n);\n\nconst MAX_UNFILTERED_RESULTS = 20;\n\nconst groupIsInFilter = (id, activeFilter) => activeFilter === 'all' || activeFilter === id;\n\nconst isSingleTopResult = (results, topResults, activeFilter) => results.length === 1 && topResults.includes(results[0]) && activeFilter === 'all';\n\nfunction getResultsForGroup({ searchResults, group, activeFilter }) {\n  const resultsForGroup = searchResults[group.id];\n  const noResults = { results: [], canShowMoreResults: false };\n\n  if (resultsForGroup.length === 0) return noResults;\n  if (!groupIsInFilter(group.id, activeFilter)) return noResults;\n  if (isSingleTopResult(resultsForGroup, searchResults.topResults, activeFilter)) return noResults;\n\n  const maxResultCount = activeFilter === group.id ? Infinity : MAX_UNFILTERED_RESULTS;\n  const visibleResults = resultsForGroup.slice(0, maxResultCount);\n  return {\n    results: visibleResults,\n    canShowMoreResults: visibleResults.length < resultsForGroup.length,\n  };\n}\n\nfunction SearchResults({ query, searchResults, activeFilter, setActiveFilter }) {\n  if (!searchResults[activeFilter] || searchResults[activeFilter].length <= 0) {\n    activeFilter = 'all';\n  }\n  const ready = searchResults.status === 'ready';\n  const noResults = ready && searchResults.totalHits === 0;\n  const showTopResults = ready && searchResults.starterKit.length + searchResults.topResults.length > 0 && activeFilter === 'all';\n\n  const filters = [\n    { id: 'all', label: 'All' },\n    ...groups\n      .map((group) => ({\n        ...group,\n        hits: searchResults[group.id].length,\n        maxHits: activeFilter === group.id ? Infinity : MAX_UNFILTERED_RESULTS,\n      }))\n      .filter((group) => group.hits > 0),\n  ];\n\n  const renderedGroups = groups\n    .map((group) => ({\n      ...group,\n      ...getResultsForGroup({ searchResults, group, activeFilter }),\n    }))\n    .filter((group) => group.results.length > 0);\n\n  return (\n    <main className={styles.page}>\n      {!ready && (\n        <>\n          <Loader />\n          <h1>All results for {query}</h1>\n        </>\n      )}\n      {ready && searchResults.totalHits > 0 && (\n        <FilterContainer filters={filters} setFilter={setActiveFilter} activeFilter={activeFilter} query={query} />\n      )}\n      {showTopResults && (\n        <article className={classnames(styles.groupContainer, styles.topResults)}>\n          <Heading tagName=\"h2\">Top Results</Heading>\n          <Grid items={searchResults.starterKit} className={styles.starterKitResultsContainer}>\n            {(result) => <StarterKitItem result={result} />}\n          </Grid>\n          <Grid items={searchResults.topResults} className={styles.resultsContainer}>\n            {(result) => <ResultComponent result={result} />}\n          </Grid>\n        </article>\n      )}\n      {ready &&\n        renderedGroups.map(({ id, label, results, canShowMoreResults }) => (\n          <article key={id} className={styles.groupContainer}>\n            <Heading tagName=\"h2\">{label}</Heading>\n            <Grid items={results} className={styles.resultsContainer}>\n              {(result) => <ResultComponent result={result} />}\n            </Grid>\n            {canShowMoreResults && <ShowAllButton label={label} onClick={() => setActiveFilter(id)} />}\n          </article>\n        ))}\n      {noResults && <NotFound name=\"any results\" />}\n    </main>\n  );\n}\n\nSearchResults.propTypes = {\n  query: PropTypes.string.isRequired,\n  searchResults: PropTypes.shape({\n    status: PropTypes.oneOf(['init', 'loading', 'ready']).isRequired,\n    totalHits: PropTypes.number.isRequired,\n    topResults: PropTypes.array.isRequired,\n    team: PropTypes.array.isRequired,\n    user: PropTypes.array.isRequired,\n    project: PropTypes.array.isRequired,\n    collection: PropTypes.array.isRequired,\n    starterKit: PropTypes.array.isRequired,\n  }).isRequired,\n  activeFilter: PropTypes.string.isRequired,\n  setActiveFilter: PropTypes.func.isRequired,\n};\n\nexport default SearchResults;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"search-results__page___14bqQ\",\"showAllButton\":\"search-results__showAllButton___zt0Yd\",\"groupContainer\":\"search-results__groupContainer___1Aozq\",\"resultsContainer\":\"search-results__resultsContainer___2xu2j\",\"starterKitResultsContainer\":\"search-results__starterKitResultsContainer___3OAFG\",\"topResults\":\"search-results__topResults___2ivQa\"};","import React from 'react';\nimport Heading from 'Components/text/heading';\nimport Text from 'Components/text/text';\nimport MaskImage from 'Components/images/mask-image';\nimport styles from './starter-kit-result.styl';\n\nconst StarterKitResult = ({ result }) => (\n  <a href={result.url} className={styles.container}>\n    <div className={styles.imageWrap}>\n      <MaskImage src={result.imageURL} />\n    </div>\n    <div className={styles.contentWrap} style={{ backgroundColor: result.coverColor }}>\n      <Heading tagName=\"h3\">{result.name}</Heading>\n      <Text>{result.description}</Text>\n    </div>\n  </a>\n);\n\nexport default StarterKitResult;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"starter-kit-result__container___3KXtt\",\"imageWrap\":\"starter-kit-result__imageWrap___2AO6q\",\"contentWrap\":\"starter-kit-result__contentWrap___3JDpB\"};","import React, { useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { parseOneAddress } from 'email-addresses';\n\nimport Button from 'Components/buttons/button';\nimport SignInButton from 'Components/buttons/sign-in-button';\nimport Emoji from 'Components/images/emoji';\nimport TextInput from 'Components/inputs/text-input';\nimport Link from 'Components/link';\nimport Notification from 'Components/notification';\nimport Loader from 'Components/loader';\nimport TwoFactorForm from 'Components/sign-in/two-factor-form';\nimport { PopoverWithButton, MultiPopover, MultiPopoverTitle, PopoverDialog, PopoverActions, PopoverInfo } from 'Components/popover';\nimport useDebouncedValue from 'Hooks/use-debounced-value';\nimport useLocalStorage from 'State/local-storage';\nimport { useAPI } from 'State/api';\nimport { useCurrentUser } from 'State/current-user';\nimport useDevToggle from 'State/dev-toggles';\nimport { captureException } from 'Utils/sentry';\n\nimport styles from './styles.styl';\n\nconst SignInCodeSection = ({ onClick }) => (\n  <PopoverActions type=\"secondary\">\n    <Button size=\"small\" type=\"tertiary\" matchBackground onClick={onClick}>\n      Use a sign in code\n    </Button>\n  </PopoverActions>\n);\n\nfunction useEmail() {\n  const [email, setEmail] = useState('');\n  const debouncedEmail = useDebouncedValue(email, 500);\n  const validationError = useMemo(\n    () => {\n      const isValidEmail = parseOneAddress(debouncedEmail) !== null;\n      return isValidEmail || !debouncedEmail ? null : 'Enter a valid email address';\n    },\n    [debouncedEmail],\n  );\n  return [email, setEmail, validationError];\n}\n\nconst ForgotPasswordHandler = ({ align }) => {\n  const api = useAPI();\n  const [email, setEmail, validationError] = useEmail();\n  const [{ status, errorMessage }, setState] = useState({ status: 'active', errorMessage: null });\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    setState({ status: 'working', error: null });\n\n    try {\n      await api.post('email/sendResetPasswordEmail', { emailAddress: email });\n      setState({ status: 'done', error: null });\n    } catch (error) {\n      const message = error && error.response && error.response.data && error.response.data.message;\n      setState({ status: 'done', errorMessage: message || 'Something went wrong' });\n    }\n  };\n\n  const isWorking = status === 'working';\n  const isDone = status === 'done';\n  const isEnabled = email.length > 0 && !isWorking;\n  return (\n    <PopoverDialog align={align}>\n      <MultiPopoverTitle>Forgot Password</MultiPopoverTitle>\n      <PopoverActions>\n        {!isDone && (\n          <form onSubmit={onSubmit}>\n            <TextInput\n              type=\"email\"\n              labelText=\"Email address\"\n              value={email}\n              onChange={setEmail}\n              placeholder=\"your@email.com\"\n              error={validationError}\n              disabled={isWorking}\n              testingId=\"reset-password-email\"\n            />\n            <div className={styles.submitWrap}>\n              <Button size=\"small\" disabled={!isEnabled} submit>\n                Send Reset Password Link\n              </Button>\n            </div>\n          </form>\n        )}\n        {isDone && !errorMessage && (\n          <>\n            <Notification type=\"success\" persistent>Almost Done</Notification>\n            <div>Reset your password by clicking the link sent to {email}.</div>\n          </>\n        )}\n        {isDone && errorMessage && (\n          <>\n            <Notification type=\"error\" persistent>Error</Notification>\n            <div>{errorMessage}</div>\n          </>\n        )}\n      </PopoverActions>\n    </PopoverDialog>\n  );\n};\n\nconst EmailHandler = ({ align, showView }) => {\n  const api = useAPI();\n  const [email, setEmail, validationError] = useEmail();\n  const [isFocused, setIsFocused] = useState(true);\n  const [{ status, submitError }, setStatus] = useState({ status: 'ready' });\n  const isEnabled = email.length > 0;\n\n  async function onSubmit(e) {\n    e.preventDefault();\n\n    setStatus({ status: 'loading' });\n    try {\n      await api.post('/email/sendLoginEmail', { emailAddress: email });\n      setStatus({ status: 'done' });\n    } catch (error) {\n      if (error && error.response) {\n        if (error.response.status === 429) {\n          setStatus({ status: 'error', submitError: 'Sign in code sent recently. Please check your email.' });\n        } else if (error.response.status === 400) {\n          setStatus({ status: 'error', submitError: 'Email address is invalid.' });\n        } else {\n          captureException(error);\n          setStatus({ status: 'error', submitError: 'Something went wrong, email not sent.' });\n        }\n      } else {\n        captureException(error);\n        setStatus({ status: 'error', submitError: 'Something went wrong, email not sent.' });\n      }\n    }\n  }\n\n  return (\n    <PopoverDialog align={align}>\n      <MultiPopoverTitle>\n        Email Sign In <Emoji name=\"email\" />\n      </MultiPopoverTitle>\n      <PopoverActions>\n        {status === 'ready' && (\n          <form onSubmit={onSubmit} style={{ marginBottom: 0 }}>\n            <TextInput\n              type=\"email\"\n              labelText=\"Email address\"\n              value={email}\n              onChange={setEmail}\n              onBlur={() => setIsFocused(false)}\n              onFocus={() => setIsFocused(true)}\n              placeholder=\"new@user.com\"\n              error={isEnabled && !isFocused && validationError}\n              autoFocus\n              testingId=\"sign-in-email\"\n            />\n            <div className={styles.submitWrap}>\n              <Button size=\"small\" disabled={!isEnabled} onClick={onSubmit}>\n                Send Link\n              </Button>\n            </div>\n          </form>\n        )}\n        {status === 'loading' && <Loader />}\n        {status === 'done' && (\n          <>\n            <Notification persistent type=\"success\">\n              Almost Done\n            </Notification>\n            <div>Finish signing in from the email sent to {email}.</div>\n          </>\n        )}\n        {status === 'error' && (\n          <>\n            <Notification persistent type=\"error\">\n              Error\n            </Notification>\n            <div>{submitError}</div>\n          </>\n        )}\n      </PopoverActions>\n      {status === 'done' && <SignInCodeSection onClick={showView.signInCode} />}\n    </PopoverDialog>\n  );\n};\n\nconst SignInWithCode = ({ align, showTwoFactor }) => {\n  const { login } = useCurrentUser();\n  const api = useAPI();\n  const [code, setCode] = useState('');\n  const [status, setStatus] = useState('ready');\n  const isEnabled = code.length > 0;\n\n  async function onSubmit(e) {\n    e.preventDefault();\n    setStatus('loading');\n    try {\n      const { data } = await api.post(`/auth/email/${code}`);\n      if (data.tfaToken) {\n        showTwoFactor(data.tfaToken);\n      } else {\n        login(data);\n        setStatus('done');\n      }\n    } catch (error) {\n      if (error && error.response && error.response.status !== 401) {\n        captureException(error);\n      }\n      setStatus('error');\n    }\n  }\n\n  return (\n    <PopoverDialog align={align}>\n      <MultiPopoverTitle>Use a sign in code</MultiPopoverTitle>\n      <PopoverActions>\n        {status === 'ready' && (\n          <form onSubmit={onSubmit} style={{ marginBottom: 0 }} data-cy=\"sign-in-code-form\">\n            Paste your temporary sign in code below\n            <TextInput value={code} onChange={setCode} type=\"text\" labelText=\"sign in code\" placeholder=\"cute-unique-cosmos\" autoFocus testingId=\"sign-in-code\" />\n            <div className={styles.submitWrap}>\n              <Button size=\"small\" disabled={!isEnabled} onClick={onSubmit}>\n                Sign In\n              </Button>\n            </div>\n          </form>\n        )}\n        {status === 'loading' && <Loader />}\n        {status === 'done' && <Notification persistent type=\"success\">Success!</Notification>}\n        {status === 'error' && (\n          <>\n            <Notification persistent type=\"error\">Error</Notification>\n            <div>Code not found or already used. Try signing in with email.</div>\n          </>\n        )}\n      </PopoverActions>\n    </PopoverDialog>\n  );\n};\n\nconst TwoFactorSignIn = ({ align, token }) => (\n  <PopoverDialog align={align}>\n    <MultiPopoverTitle>Two factor auth <Emoji name=\"key\" /></MultiPopoverTitle>\n    <PopoverActions>\n      <TwoFactorForm initialToken={token} />\n    </PopoverActions>\n  </PopoverDialog>\n);\n\nconst PasswordLoginSection = ({ showTwoFactor, showForgotPassword }) => {\n  const [emailAddress, setEmail, emailValidationError] = useEmail();\n  const [password, setPassword] = useState('');\n  const [working, setWorking] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const api = useAPI();\n  const { login } = useCurrentUser();\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setWorking(true);\n    setErrorMessage(null);\n\n    try {\n      const { data } = await api.post('user/login', { emailAddress, password });\n      // leave working=true because logging in will hide the sign in pop\n      if (data.tfaToken) {\n        showTwoFactor(data.tfaToken);\n      } else {\n        login(data);\n      }\n    } catch (error) {\n      let message = error.response && error.response.data && error.response.data.message;\n      if (!message || error.response.status === 401) {\n        message = 'Failed to sign in, try again?';\n      }\n      setErrorMessage(message);\n      setWorking(false);\n    }\n  };\n\n  return (\n    <PopoverActions>\n      {!!errorMessage && <Notification type=\"error\" persistent>{errorMessage}</Notification>}\n      <form data-cy=\"sign-in-form\" onSubmit={handleSubmit}>\n        <TextInput placeholder=\"your@email.com\" labelText=\"email\" value={emailAddress} error={emailValidationError} onChange={setEmail} disabled={working} testingId=\"sign-in-email\" />\n        <TextInput placeholder=\"password\" type=\"password\" labelText=\"password\" value={password} onChange={setPassword} disabled={working} testingId=\"sign-in-password\" />\n        <div className={styles.submitWrap}>\n          <Button size=\"small\" disabled={!emailAddress || !password || emailValidationError || working} submit>Sign in</Button>\n        </div>\n      </form>\n      <div className={styles.submitWrap}>\n        <Button size=\"small\" type=\"tertiary\" onClick={showForgotPassword}>\n          Forgot Password\n        </Button>\n      </div>\n    </PopoverActions>\n  );\n};\n\nexport const SignInPopBase = withRouter(({ location, align }) => {\n  const slackAuthEnabled = useDevToggle('Slack Auth');\n  const userPasswordEnabled = useDevToggle('User Passwords');\n  const [, setDestination] = useLocalStorage('destinationAfterAuth');\n  const [tfaToken, setTfaToken] = React.useState('');\n\n  const onClick = () =>\n    setDestination({\n      expires: dayjs()\n        .add(10, 'minutes')\n        .toISOString(),\n      to: {\n        pathname: location.pathname,\n        search: location.search,\n      },\n    });\n\n  const setDestinationAnd = (next) => () => {\n    onClick();\n    next();\n  };\n\n  const setTwoFactorAnd = (next) => (token) => {\n    setTfaToken(token);\n    next();\n  };\n\n  return (\n    <MultiPopover\n      views={{\n        email: (showView) => <EmailHandler align={align} showView={showView} />,\n        signInCode: (showView) => <SignInWithCode align={align} showTwoFactor={setTwoFactorAnd(showView.twoFactor)} />,\n        twoFactor: () => <TwoFactorSignIn align={align} token={tfaToken} />,\n        forgotPassword: () => <ForgotPasswordHandler align={align} />,\n      }}\n    >\n      {(showView) => (\n        <PopoverDialog focusOnDialog align={align}>\n          <PopoverInfo>\n            <Emoji name=\"carpStreamer\" /> New to Glitch? Create an account by signing in.\n          </PopoverInfo>\n          <PopoverInfo>\n            <div className={styles.termsAndConditions}>\n              By signing into Glitch, you agree to our <Link to=\"/legal/#tos\">Terms of Services</Link> and{' '}\n              <Link to=\"/legal/#privacy\">Privacy Statement</Link>\n            </div>\n          </PopoverInfo>\n          {userPasswordEnabled && (\n            <PasswordLoginSection showTwoFactor={setTwoFactorAnd(showView.twoFactor)} showForgotPassword={showView.forgotPassword} />\n          )}\n          <PopoverActions>\n            <SignInButton company=\"facebook\" onClick={onClick} />\n            <SignInButton company=\"github\" onClick={onClick} />\n            <SignInButton company=\"google\" onClick={onClick} />\n            {slackAuthEnabled && <SignInButton company=\"slack\" onClick={onClick} />}\n            <Button size=\"small\" emoji=\"email\" onClick={setDestinationAnd(showView.email)}>\n              Sign in with Email\n            </Button>\n          </PopoverActions>\n          <SignInCodeSection onClick={setDestinationAnd(showView.signInCode)} />\n        </PopoverDialog>\n      )}\n    </MultiPopover>\n  );\n});\n\nconst SignInPopContainer = ({ align }) => (\n  <PopoverWithButton buttonProps={{ size: 'small' }} buttonText=\"Sign in\">\n    {() => <SignInPopBase align={align} />}\n  </PopoverWithButton>\n);\n\nSignInPopContainer.propTypes = {\n  align: PropTypes.string.isRequired,\n};\n\nexport default SignInPopContainer;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"termsAndConditions\":\"styles__termsAndConditions___24I5l\",\"submitWrap\":\"styles__submitWrap___3DNeI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"submitWrap\":\"styles__submitWrap___3zcmf\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from 'Components/buttons/button';\nimport TextInput from 'Components/inputs/text-input';\nimport Notification from 'Components/notification';\nimport Text from 'Components/text/text';\n\nimport { useAPI } from 'State/api';\nimport { useCurrentUser } from 'State/current-user';\n\nimport styles from './styles.styl';\n\nconst TwoFactorSignIn = ({ initialToken, onSuccess }) => {\n  const api = useAPI();\n  const { login } = useCurrentUser();\n  const [code, setCode] = React.useState('');\n  const [token, setToken] = React.useState(initialToken);\n  const [status, setStatus] = React.useState({});\n\n  const onChange = (newCode) => {\n    setCode(newCode);\n    setStatus({});\n  };\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    setStatus({ working: true });\n    try {\n      const { data } = await api.post('/user/tfa/verifyCode', { code, token });\n      login(data.user);\n      onSuccess();\n    } catch (error) {\n      if (error && error.response && error.response.data && error.response.data.status === 401) {\n        setToken(error.response.data.retryToken);\n        setStatus({ message: error.response.data.message });\n      } else {\n        setStatus({ error: true });\n      }\n    }\n  };\n\n  if (status.error) {\n    return (\n      <>\n        <Notification type=\"error\" persistent>Error</Notification>\n        We couldn't sign you in\n      </>\n    );\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      <Notification type=\"success\" persistent>Almost Done</Notification>\n      <Text>Enter your two factor auth code to finish signing in</Text>\n      <TextInput value={code} onChange={onChange} placeholder=\"123456 or a backup code\" labelText=\"code\" error={status.message} disabled={status.working} />\n      <div className={styles.submitWrap}>\n        <Button size=\"small\" disabled={status.working || code.length < 6} submit>Sign in</Button>\n      </div>\n    </form>\n  );\n};\n\nTwoFactorSignIn.propTypes = {\n  initialToken: PropTypes.string.isRequired,\n  onSuccess: PropTypes.func,\n};\n\nTwoFactorSignIn.defaultProps = {\n  onSuccess: () => {},\n};\n\nexport default TwoFactorSignIn;\n","import React, { useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport dayjs from 'dayjs';\nimport { cloneDeep, sumBy } from 'lodash';\nimport sampleAnalytics, { sampleAnalyticsTime } from 'Curated/sample-analytics';\n\nimport Text from 'Components/text/text';\nimport SegmentedButtons from 'Components/buttons/segmented-buttons';\nimport Loader from 'Components/loader';\nimport { createAPIHook } from 'State/api';\nimport { captureException } from 'Utils/sentry';\n\nimport TeamAnalyticsTimePop from './team-analytics-time-pop';\nimport TeamAnalyticsProjectPop from './team-analytics-project-pop';\nimport SummaryItem from './team-analytics-summary';\nimport TeamAnalyticsActivity from './team-analytics-activity';\nimport Referrers from './team-analytics-referrers';\nimport TeamAnalyticsProjectDetails from './team-analytics-project-details';\n\nimport styles from './styles.styl';\n\nconst dateFromTime = (newTime) => {\n  const timeMap = {\n    'Last 4 Weeks': dayjs()\n      .subtract(4, 'weeks')\n      .valueOf(),\n    'Last 2 Weeks': dayjs()\n      .subtract(2, 'weeks')\n      .valueOf(),\n    'Last 24 Hours': dayjs()\n      .subtract(24, 'hours')\n      .valueOf(),\n  };\n  return timeMap[newTime];\n};\n\nfunction getSampleAnalytics() {\n  const data = cloneDeep(sampleAnalytics);\n  // Update timestamps so they're relative to now\n  data.buckets.forEach((bucket) => {\n    bucket['@timestamp'] += Date.now() - sampleAnalyticsTime;\n  });\n  return data;\n}\n\nconst useAnalyticsData = createAPIHook(async (api, { id, projects, fromDate, currentProjectDomain }) => {\n  if (!projects.length) return getSampleAnalytics();\n\n  const path = currentProjectDomain ? `analytics/${id}/project/${currentProjectDomain}?from=${fromDate}` : `analytics/${id}/team?from=${fromDate}`;\n  try {\n    const { data } = await api.get(path);\n    return data;\n  } catch (e) {\n    captureException(e);\n    return null;\n  }\n});\n\nfunction useAnalytics(props) {\n  // make an object with a stable identity so it can be used as single argumnent to api hook\n  const memoProps = useMemo(() => props, Object.values(props));\n  return useAnalyticsData(memoProps);\n}\n\nfunction TeamAnalytics({ id, projects }) {\n  const [activeFilter, setActiveFilter] = useState('views');\n\n  const [currentTimeFrame, setCurrentTimeFrame] = useState('Last 2 Weeks');\n  const fromDate = useMemo(() => dateFromTime(currentTimeFrame), [currentTimeFrame]);\n\n  const [currentProjectDomain, setCurrentProjectDomain] = useState(''); // empty string means all projects\n\n  const { value: analytics } = useAnalytics({ id, projects, fromDate, currentProjectDomain });\n\n  const buckets = analytics ? analytics.buckets : [];\n  const { totalAppViews, totalRemixes } = useMemo(\n    () => ({\n      totalAppViews: sumBy(buckets, (bucket) => bucket.analytics.visits),\n      totalRemixes: sumBy(buckets, (bucket) => bucket.analytics.remixes),\n    }),\n    [buckets],\n  );\n\n  // segmented button filters\n  const buttons = [{ name: 'views', contents: 'App Views' }, { name: 'remixes', contents: 'Remixes' }];\n\n  if (!analytics) {\n    return (\n      <section className={styles.container}>\n        <Loader />\n      </section>\n    );\n  }\n\n  return (\n    <section className={styles.container}>\n      <h2>\n        Analytics\n        {projects.length === 0 && <aside className={styles.inlineBanner}>Add projects to see their stats</aside>}\n      </h2>\n\n      {projects.length > 0 && (\n        <section className={styles.section}>\n          <div className={styles.segmentedButtonsWrap}>\n            <SegmentedButtons value={activeFilter} buttons={buttons} onChange={setActiveFilter} />\n          </div>\n          <div className={styles.options}>\n            <TeamAnalyticsProjectPop updateProjectDomain={setCurrentProjectDomain} currentProjectDomain={currentProjectDomain} projects={projects} />\n            <TeamAnalyticsTimePop updateTimeFrame={setCurrentTimeFrame} currentTimeFrame={currentTimeFrame} />\n          </div>\n        </section>\n      )}\n\n      <div className={styles.content}>\n        <section className={styles.section}>\n          {activeFilter === 'views' && <SummaryItem total={totalAppViews} type=\"requests\" label=\"App Views\" />}\n          {activeFilter === 'remixes' && <SummaryItem total={totalRemixes} type=\"remixes\" label=\"Remixes\" />}\n        </section>\n\n        <section className={styles.section}>\n          <figure id=\"chart\" className=\"c3\" />\n          <TeamAnalyticsActivity activeFilter={activeFilter} analytics={analytics} currentTimeFrame={currentTimeFrame} />\n        </section>\n\n        <section className={styles.section}>\n          <h3>Referrers</h3>\n          {activeFilter === 'views' && <Referrers name=\"requests\" total={totalAppViews} referrers={analytics.referrers} label=\"views\" />}\n          {activeFilter === 'remixes' && <Referrers name=\"remixes\" total={totalRemixes} referrers={analytics.remixReferrers} label=\"remixes\" />}\n        </section>\n\n        {currentProjectDomain && (\n          <section className={styles.section}>\n            <h3>Project Details</h3>\n            <TeamAnalyticsProjectDetails currentProjectDomain={currentProjectDomain} id={id} activeFilter={activeFilter} />\n          </section>\n        )}\n\n        <section className={styles.section}>\n          <div className={styles.explanation}>\n            <Text>\n              Because Glitch doesn't inject code or cookies into your projects, we don't collect the data required for unique app views.\n              You can get uniques by adding Google Analytics to your project.\n            </Text>\n          </div>\n        </section>\n      </div>\n\n      {!projects.length && <div className={styles.placeholderMask} />}\n    </section>\n  );\n}\n\nTeamAnalytics.propTypes = {\n  id: PropTypes.number.isRequired,\n  projects: PropTypes.array.isRequired,\n};\n\nexport default (props) => {\n  if (!props.currentUserIsOnTeam) return null;\n  return <TeamAnalytics {...props} />;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles__container___FM_Lv\",\"section\":\"styles__section___1_wwy\",\"content\":\"styles__content___24P-D\",\"explanation\":\"styles__explanation___38rNJ\",\"placeholderMask\":\"styles__placeholderMask___3921x\",\"inlineBanner\":\"styles__inlineBanner___3ZfnC\",\"segmentedButtonsWrap\":\"styles__segmentedButtonsWrap___Miejz\",\"options\":\"styles__options___LOgIM\",\"allProjects\":\"styles__allProjects___ol2Fy\",\"bentoBox\":\"styles__bentoBox___2H266\",\"projectDetails\":\"styles__projectDetails___2aqxg\",\"projectDetailsTitle\":\"styles__projectDetailsTitle___2drK0\",\"projectDetailsTable\":\"styles__projectDetailsTable___2AYgI\",\"baseProjectAvatar\":\"styles__baseProjectAvatar___1neUA\",\"referrersContent\":\"styles__referrersContent___3g_nr\",\"referrersColumn\":\"styles__referrersColumn___3W1c1\",\"requests\":\"styles__requests___1uC-T\",\"remixes\":\"styles__remixes___329sY\",\"referrersList\":\"styles__referrersList___3trx-\",\"summaryItem\":\"styles__summaryItem___17GQW\",\"total\":\"styles__total___1Lcl9\"};","// transforms the individual data points (buckets) we get from the api into grouped 'bins' of data\n// each bin is then rendered as a point on the graph\n\nimport { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { isEmpty } from 'lodash';\nimport groupByTime from 'group-by-time';\nimport { histogram as d3Histogram } from 'd3-array';\nimport { createAPIHook } from 'State/api';\n\nconst useC3 = createAPIHook(async () => import(/* webpackChunkName: \"c3-bundle\" */ 'c3'));\n\nconst createHistogram = (bins) => {\n  const histogram = [];\n  bins = bins || [];\n  bins.forEach((bin) => {\n    let totalAppViews = 0;\n    let totalRemixes = 0;\n    let timestamp;\n    // let codeViews = []\n    bin.forEach((data) => {\n      if (!timestamp) {\n        timestamp = data['@timestamp'];\n      }\n      totalRemixes += data.analytics.remixes;\n      totalAppViews += data.analytics.visits;\n      // referrers.push(data.analytics.referrers)\n    });\n    histogram.push({\n      time: timestamp,\n      appViews: totalAppViews,\n      remixes: totalRemixes,\n    });\n  });\n  return histogram;\n};\n\nconst groupByRegularIntervals = d3Histogram().value((data) => data['@timestamp']);\n\nconst createBins = (buckets, currentTimeFrame) => {\n  if (currentTimeFrame === 'Last 24 Hours') {\n    return groupByRegularIntervals(buckets);\n  }\n  const bins = groupByTime(buckets, '@timestamp', 'day'); // supports 'day', 'week', 'month'\n  return Object.values(bins);\n};\n\nconst chartColumns = (analytics, currentTimeFrame) => {\n  const { buckets } = analytics;\n  const bins = createBins(buckets, currentTimeFrame);\n  const histogram = createHistogram(bins);\n  const timestamps = ['x'];\n  const remixes = ['Remixes'];\n  const appViews = ['Total App Views'];\n  // let codeViews = ['Code Views']\n  histogram.shift();\n  histogram.forEach((bucket) => {\n    timestamps.push(bucket.time);\n    appViews.push(bucket.appViews);\n    remixes.push(bucket.remixes);\n  });\n  return [timestamps, appViews, remixes];\n};\n\nconst dateFormat = (currentTimeFrame) => {\n  if (currentTimeFrame === 'Last 24 Hours') {\n    return '%H:%M %p';\n  }\n  return '%b %d';\n};\n\nconst renderChart = (activeFilter, c3, analytics, currentTimeFrame) => {\n  let columns = [];\n  if (!isEmpty(analytics)) {\n    columns = chartColumns(analytics, currentTimeFrame);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  const chart = c3.generate({\n    size: {\n      height: 200,\n    },\n    data: {\n      x: 'x',\n      xFormat: dateFormat(currentTimeFrame),\n      columns,\n    },\n    axis: {\n      x: {\n        type: 'timeseries',\n        tick: {\n          format: dateFormat(currentTimeFrame),\n        },\n      },\n      y: {\n        min: 0,\n        padding: { bottom: 0 },\n      },\n    },\n    point: {\n      r: 3,\n    },\n    legend: {\n      show: false,\n    },\n    tooltip: {\n      format: {\n        value: (value, ratio, id) => {\n          if (id === 'Total App Views') return `${value} views`;\n          if (id === 'Remixes') return `${value} remixes`;\n          return null;\n        },\n      },\n    },\n  });\n\n  if (activeFilter === 'views') {\n    chart.hide(['Remixes']);\n  } else if (activeFilter === 'remixes') {\n    chart.hide(['Total App Views']);\n  }\n};\n\nfunction TeamAnalyticsActivity({ activeFilter, analytics, currentTimeFrame }) {\n  const { value: c3 } = useC3();\n  useEffect(() => {\n    if (!c3) return;\n    renderChart(activeFilter, c3, analytics, currentTimeFrame);\n  }, [activeFilter, analytics, currentTimeFrame, c3]);\n  return null;\n}\n\nTeamAnalyticsActivity.propTypes = {\n  activeFilter: PropTypes.string.isRequired,\n  analytics: PropTypes.object.isRequired,\n  currentTimeFrame: PropTypes.string.isRequired,\n};\n\nexport default TeamAnalyticsActivity;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport dayjs from 'dayjs';\n\nimport TooltipContainer from 'Components/tooltips/tooltip-container';\nimport Text from 'Components/text/text';\nimport { ProjectLink } from 'Components/link';\nimport { ProjectAvatar } from 'Components/images/avatar';\nimport Loader from 'Components/loader';\nimport { createAPIHook } from 'State/api';\n\nimport styles from './styles.styl';\n\nconst RECENT_REMIXES_COUNT = 100;\n\n// This uses dayjs().fromNow() a bunch of times\n// That requires the relativeTime plugin\n// Which is added to dayjs elsewhere\nconst ProjectDetails = ({ projectDetails }) => (\n  <article className={styles.projectDetails}>\n    <ProjectLink project={projectDetails}>\n      <ProjectAvatar project={projectDetails} hasAlt />\n    </ProjectLink>\n    <table className={styles.projectDetailsTable}>\n      <tbody>\n        <tr>\n          <th>Name</th>\n          <td>{projectDetails.domain}</td>\n        </tr>\n        <tr>\n          <th>Created</th>\n          <td>{dayjs(projectDetails.createdAt).fromNow()}</td>\n        </tr>\n        <tr>\n          <th>Last viewed</th>\n          <td>{dayjs(projectDetails.lastAccess).fromNow()}</td>\n        </tr>\n        <tr>\n          <th>Last edited</th>\n          <td>{dayjs(projectDetails.lastEditedAt).fromNow()}</td>\n        </tr>\n        <tr>\n          <th>Last remixed</th>\n          <td>{projectDetails.lastRemixedAt ? dayjs(projectDetails.lastRemixedAt).fromNow() : 'never'}</td>\n        </tr>\n        <tr>\n          <th>Total app views</th>\n          <td>{projectDetails.numAppVisits}</td>\n        </tr>\n        <tr>\n          <th>Total code views</th>\n          <td>{projectDetails.numEditorVisits}</td>\n        </tr>\n        <tr>\n          <th>Total direct remixes</th>\n          <td>{projectDetails.numDirectRemixes}</td>\n        </tr>\n        <tr>\n          <th>Total remixes</th>\n          <td>{projectDetails.numTotalRemixes}</td>\n        </tr>\n        {projectDetails.baseProject.domain && (\n          <tr>\n            <th>Originally remixed from</th>\n            <td>\n              <ProjectLink project={projectDetails.baseProject}>\n                <span className={styles.baseProjectAvatar}>\n                  <ProjectAvatar project={projectDetails.baseProject} />\n                </span>\n                {projectDetails.baseProject.domain}\n              </ProjectLink>\n            </td>\n          </tr>\n        )}\n      </tbody>\n    </table>\n  </article>\n);\n\nconst ProjectRemixItem = ({ remix }) => (\n  <ProjectLink project={remix}>\n    <TooltipContainer\n      id={`project-remix-tooltip-${remix.domain}`}\n      target={<ProjectAvatar project={remix} hasAlt />}\n      align={['left']}\n      type=\"action\"\n      tooltip={remix.domain}\n    />\n  </ProjectLink>\n);\n\nconst useProjectDetails = createAPIHook(async (api, id, currentProjectDomain) => {\n  const { data } = await api.get(`analytics/${id}/project/${currentProjectDomain}/overview`);\n  return data;\n});\n\nfunction TeamAnalyticsProjectDetails({ activeFilter, id, currentProjectDomain }) {\n  const { value: projectDetails } = useProjectDetails(id, currentProjectDomain);\n  if (!projectDetails) return <Loader />;\n\n  const projectRemixes = projectDetails.remixes.slice(0, RECENT_REMIXES_COUNT);\n  return (\n    <>\n      <ProjectDetails projectDetails={projectDetails} />\n      {activeFilter === 'remixes' && (\n        <article>\n          <h4>Latest Remixes</h4>\n          {projectRemixes.length === 0 && <Text>No remixes yet <span aria-hidden=\"true\">(／_^)／ ●</span></Text>}\n          {projectRemixes.map((remix) => (\n            <ProjectRemixItem key={remix.id} remix={remix} />\n          ))}\n        </article>\n      )}\n    </>\n  );\n}\n\nTeamAnalyticsProjectDetails.propTypes = {\n  activeFilter: PropTypes.string.isRequired,\n  currentProjectDomain: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default TeamAnalyticsProjectDetails;\n","import React, { useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport ProjectResultItem from 'Components/project/project-result-item';\nimport { ResultItem, ResultInfo, ResultName } from 'Components/containers/results-list';\nimport { PopoverWithButton, PopoverDialog, PopoverSearch } from 'Components/popover';\n\nimport styles from './styles.styl';\n\n\nconst AllProjectsItem = ({ active, selected, onClick }) => (\n  <ResultItem onClick={onClick} active={active} selected={selected} className={styles.allProjects}>\n    <img src=\"https://cdn.glitch.com/55f8497b-3334-43ca-851e-6c9780082244%2Fbento-box.png?1502469566743\" alt=\"\" className={styles.bentoBox} />\n    <ResultInfo>\n      <ResultName>All Projects</ResultName>\n    </ResultInfo>\n  </ResultItem>\n);\n\nconst ProjectSearch = ({ projects, updateProjectDomain, currentProjectDomain }) => {\n  const [filter, setFilter] = useState('');\n\n  const filteredProjects = useMemo(() => {\n    const filtered = projects.filter(({ domain }) => domain.toLowerCase().includes(filter.toLowerCase()));\n    if (!filter) {\n      filtered.unshift({ id: 'all-projects', domain: '' });\n    }\n    return filtered;\n  }, [projects, filter]);\n\n  return (\n    <PopoverDialog align=\"left\" wide>\n      <PopoverSearch\n        value={filter}\n        onChange={setFilter}\n        status=\"ready\"\n        results={filteredProjects}\n        onSubmit={(project) => updateProjectDomain(project.domain)}\n        labelText=\"Filter projects\"\n        placeholder=\"Filter projects\"\n        renderItem={({ item: project, active }) =>\n          project.domain ? (\n            <ProjectResultItem\n              project={project}\n              onClick={() => updateProjectDomain(project.domain)}\n              active={active}\n              selected={currentProjectDomain === project.domain}\n            />\n          ) : (\n            <AllProjectsItem active={active} selected={currentProjectDomain === ''} onClick={() => updateProjectDomain('')} />\n          )\n        }\n      />\n    </PopoverDialog>\n  );\n};\n\nconst Dropdown = () => <div className=\"down-arrow\" aria-label=\"options\" />;\n\nconst TeamAnalyticsProjectPop = ({ projects, updateProjectDomain, currentProjectDomain }) => (\n  <PopoverWithButton\n    buttonProps={{ size: 'small', type: 'tertiary' }}\n    buttonText={\n      currentProjectDomain ? (\n        <>\n          Project: {currentProjectDomain} <Dropdown />\n        </>\n      ) : (\n        <>\n          All Projects <Dropdown />\n        </>\n      )\n    }\n  >\n    {({ toggleAndCall }) => (\n      <ProjectSearch projects={projects} updateProjectDomain={toggleAndCall(updateProjectDomain)} currentProjectDomain={currentProjectDomain} />\n    )}\n  </PopoverWithButton>\n);\n\nTeamAnalyticsProjectPop.propTypes = {\n  projects: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      domain: PropTypes.string.isRequired,\n      description: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  updateProjectDomain: PropTypes.func.isRequired,\n  currentProjectDomain: PropTypes.string.isRequired,\n};\n\nexport default TeamAnalyticsProjectPop;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { sumBy } from 'lodash';\n\nimport Progress from 'Components/fields/progress';\nimport styles from './styles.styl';\n\nconst MAX_REFERRERS = 4;\n\nconst ReferrerItem = ({ count, total, description }) => {\n  if (count <= 0) return null;\n\n  const progress = Math.max(Math.round((count / total) * 100), 3);\n  return (\n    <li>\n      {count.toLocaleString('en')} – {description}\n      <Progress value={progress} max={100} />\n    </li>\n  );\n};\n\nconst filterReferrers = (referrers) => referrers.filter((referrer) => !referrer.self).slice(0, MAX_REFERRERS);\n\nconst ReferrersColumn = ({ total, referrers, name, label }) => (\n  <article className={classnames(styles.referrersColumn, styles[name])}>\n    {total === 0 ? (\n      'none'\n    ) : (\n      <ul className={styles.referrersList}>\n        <ReferrerItem count={total - sumBy(referrers, (referrer) => referrer[name])} total={total} description={`direct ${label}`} />\n        {filterReferrers(referrers).map((referrer) => (\n          <ReferrerItem key={referrer.domain} count={referrer[name]} total={total} description={referrer.domain} />\n        ))}\n      </ul>\n    )}\n  </article>\n);\n\nReferrersColumn.propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  referrers: PropTypes.array.isRequired,\n  total: PropTypes.number.isRequired,\n};\n\nexport default ReferrersColumn;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport styles from './styles.styl';\n\nconst depluralize = (str) => str.replace(/e?s$/, '');\n\nconst SummaryItem = ({ total, type, label }) => (\n  <span className={styles.summaryItem}>\n    <span className={classnames(styles.total, styles[type])}>{total.toLocaleString('en')}</span>{' '}\n    <span className={styles.summaryLabel}>{total === 1 ? depluralize(label) : label}</span>\n  </span>\n);\n\nSummaryItem.propTypes = {\n  total: PropTypes.number.isRequired,\n  type: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n};\n\nexport default SummaryItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { PopoverWithButton, PopoverDialog, PopoverSection } from 'Components/popover';\nimport ResultsList, { ResultItem, ResultInfo } from 'Components/containers/results-list';\n\nconst timeFrames = ['Last 4 Weeks', 'Last 2 Weeks', 'Last 24 Hours'].map((id) => ({ id }));\n\nconst TeamAnalyticsTimePop = ({ currentTimeFrame, updateTimeFrame }) => (\n  <PopoverDialog align=\"left\">\n    <PopoverSection>\n      <ResultsList items={timeFrames}>\n        {({ id: timeFrame }) => (\n          <ResultItem onClick={() => updateTimeFrame(timeFrame)} active={currentTimeFrame === timeFrame}>\n            <ResultInfo>{timeFrame}</ResultInfo>\n          </ResultItem>\n        )}\n      </ResultsList>\n    </PopoverSection>\n  </PopoverDialog>\n);\n\nconst TeamAnalyticsTimePopButton = ({ updateTimeFrame, currentTimeFrame }) => (\n  <PopoverWithButton\n    buttonProps={{ size: 'small', type: 'tertiary' }}\n    buttonText={\n      <>\n        {currentTimeFrame} <div className=\"down-arrow\" aria-label=\"options\" />\n      </>\n    }\n  >\n    {({ toggleAndCall }) => <TeamAnalyticsTimePop updateTimeFrame={toggleAndCall(updateTimeFrame)} currentTimeFrame={currentTimeFrame} />}\n  </PopoverWithButton>\n);\n\nTeamAnalyticsTimePopButton.propTypes = {\n  updateTimeFrame: PropTypes.func.isRequired,\n  currentTimeFrame: PropTypes.string.isRequired,\n};\n\nexport default TeamAnalyticsTimePopButton;\n","import React, { useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport { parseOneAddress } from 'email-addresses';\nimport randomColor from 'randomcolor';\n\nimport { UserAvatar } from 'Components/images/avatar';\nimport WhitelistedDomainIcon from 'Components/whitelisted-domain';\nimport Thanks from 'Components/thanks';\nimport { PopoverWithButton, PopoverDialog, PopoverSearch, PopoverInfo, InfoDescription } from 'Components/popover';\nimport { ResultItem, ResultInfo, ResultName, ResultDescription } from 'Components/containers/results-list';\nimport { getDisplayName } from 'Models/user';\nimport { captureException } from 'Utils/sentry';\nimport { useTracker } from 'State/segment-analytics';\nimport useDevToggle from 'State/dev-toggles';\nimport { useAlgoliaSearch } from 'State/search';\n\nimport useDebouncedValue from '../../hooks/use-debounced-value';\n\nconst WhitelistEmailDomain = ({ result: domain, active, onClick }) => (\n  <ResultItem onClick={onClick} active={active}>\n    <WhitelistedDomainIcon domain={domain} />\n    <ResultInfo>Allow anyone with an @{domain} email to join</ResultInfo>\n  </ResultItem>\n);\n\nconst UserResult = ({ result: user, active, onClick }) => (\n  <ResultItem onClick={onClick} active={active}>\n    <UserAvatar user={user} />\n    <ResultInfo>\n      <ResultName>{getDisplayName(user)}</ResultName>\n      {!!user.name && <ResultDescription>@{user.login}</ResultDescription>}\n      <Thanks short count={user.thanksCount} />\n    </ResultInfo>\n  </ResultItem>\n);\n\nconst InviteByEmail = ({ result: email, active, onClick }) => {\n  const { current: color } = useRef(randomColor({ luminosity: 'light' }));\n  return (\n    <ResultItem onClick={onClick} active={active}>\n      <UserAvatar user={{ color }} />\n      <ResultInfo>\n        <ResultName>Invite {email}</ResultName>\n      </ResultInfo>\n    </ResultItem>\n  );\n};\n\nconst getDomain = (query) => {\n  if (!query) return null;\n  const email = parseOneAddress(query.replace('@', 'test@'));\n  if (email && email.domain.includes('.')) {\n    return email.domain.toLowerCase();\n  }\n  return null;\n};\n\nfunction useCheckedDomains(query) {\n  const [checkedDomains, setCheckedDomains] = useState({ 'gmail.com': false, 'yahoo.com': false });\n  useEffect(() => {\n    const domain = getDomain(query);\n    if (!domain || domain in checkedDomains) return undefined;\n\n    let isCurrentRequest = true;\n    axios.get(`https://freemail.glitch.me/${domain}`).then(({ data }) => {\n      if (!isCurrentRequest) return;\n      setCheckedDomains((domains) => ({ ...domains, [domain]: !data.free }));\n    }, captureException);\n\n    return () => {\n      isCurrentRequest = false;\n    };\n  }, [query, checkedDomains]);\n  return checkedDomains;\n}\n\nfunction AddTeamUserPop({ members, inviteEmail, inviteUser, setWhitelistedDomain, whitelistedDomain }) {\n  const [value, onChange] = useState('');\n  const debouncedValue = useDebouncedValue(value, 200);\n  const checkedDomains = useCheckedDomains(debouncedValue);\n  const allowEmailInvites = useDevToggle('Email Invites');\n\n  const { user: retrievedUsers, status } = useAlgoliaSearch(\n    debouncedValue,\n    {\n      filterTypes: ['user'],\n    },\n    [],\n  );\n\n  const results = useMemo(() => {\n    const memberSet = new Set(members);\n    const filteredUsers = retrievedUsers.filter((user) => !memberSet.has(user.id)).slice(0, 10);\n    const out = [];\n\n    const email = parseOneAddress(debouncedValue);\n    if (email && allowEmailInvites) {\n      out.push({\n        id: 'invite-by-email',\n        result: email.address,\n        onClick: () => inviteEmail(email.address),\n        component: InviteByEmail,\n      });\n    }\n\n    if (setWhitelistedDomain && !whitelistedDomain) {\n      const domain = getDomain(debouncedValue);\n      if (domain && checkedDomains[domain]) {\n        out.push({\n          id: 'whitelist-email-domain',\n          result: domain,\n          onClick: () => setWhitelistedDomain(domain),\n          component: WhitelistEmailDomain,\n        });\n      }\n    }\n\n    // now add the actual search results\n    out.push(\n      ...filteredUsers.map((user) => ({\n        id: user.id,\n        result: user,\n        onClick: () => inviteUser(user),\n        component: UserResult,\n      })),\n    );\n\n    return out;\n  }, [debouncedValue, retrievedUsers, members, whitelistedDomain]);\n\n  return (\n    <PopoverDialog align=\"left\">\n      <PopoverSearch\n        value={value}\n        onChange={onChange}\n        results={results}\n        status={status}\n        onSubmit={(result) => result.onClick()}\n        labelText=\"User name\"\n        placeholder=\"Search for a user\"\n        renderItem={({ item: { onClick, result, component: Component }, active }) => <Component active={active} result={result} onClick={onClick} />}\n      />\n      {!value && !!setWhitelistedDomain && !whitelistedDomain && (\n        <PopoverInfo>\n          <InfoDescription>You can also whitelist with @example.com</InfoDescription>\n        </PopoverInfo>\n      )}\n    </PopoverDialog>\n  );\n}\n\nAddTeamUserPop.propTypes = {\n  inviteEmail: PropTypes.func.isRequired,\n  inviteUser: PropTypes.func.isRequired,\n  members: PropTypes.arrayOf(PropTypes.number.isRequired).isRequired,\n  setWhitelistedDomain: PropTypes.func,\n  whitelistedDomain: PropTypes.string,\n};\n\nAddTeamUserPop.defaultProps = {\n  setWhitelistedDomain: () => {},\n  whitelistedDomain: '',\n};\n\nconst AddTeamUser = ({ members, whitelistedDomain, inviteEmail, inviteUser, setWhitelistedDomain }) => {\n  const track = useTracker('Add to Team clicked');\n  return (\n    <PopoverWithButton buttonProps={{ size: 'small', type: 'tertiary' }} buttonText=\"Add\" onOpen={track}>\n      {({ toggleAndCall }) => (\n        <AddTeamUserPop\n          members={members}\n          whitelistedDomain={whitelistedDomain}\n          setWhitelistedDomain={toggleAndCall(setWhitelistedDomain)}\n          inviteUser={toggleAndCall(inviteUser)}\n          inviteEmail={toggleAndCall(inviteEmail)}\n        />\n      )}\n    </PopoverWithButton>\n  );\n};\nAddTeamUser.propTypes = {\n  members: PropTypes.array.isRequired,\n  whitelistedDomain: PropTypes.string,\n  inviteEmail: PropTypes.func,\n  inviteUser: PropTypes.func,\n  setWhitelistedDomain: PropTypes.func,\n};\nAddTeamUser.defaultProps = {\n  whitelistedDomain: null,\n  setWhitelistedDomain: null,\n  inviteUser: null,\n  inviteEmail: null,\n};\n\nexport default AddTeamUser;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { uniq } from 'lodash';\n\nimport TooltipContainer from 'Components/tooltips/tooltip-container';\nimport WhitelistedDomainIcon from 'Components/whitelisted-domain';\nimport { userIsTeamAdmin, userIsOnTeam, userCanJoinTeam } from 'Models/team';\nimport { getDisplayName } from 'Models/user';\nimport { useCurrentUser } from 'State/current-user';\nimport { useAPIHandlers, createAPIHook } from 'State/api';\nimport { useNotifications } from 'State/notifications';\nimport { PopoverContainer, PopoverDialog, PopoverInfo, PopoverActions, InfoDescription } from 'Components/popover';\nimport AddTeamUserPop from 'Components/team-users/add-team-user';\nimport Button from 'Components/buttons/button';\nimport TransparentButton from 'Components/buttons/transparent-button';\nimport { UserAvatar } from 'Components/images/avatar';\nimport { UserLink } from 'Components/link';\nimport { captureException } from 'Utils/sentry';\n\nimport TeamUserPop from './team-user-info';\nimport styles from './styles.styl';\n\n// Invited user icon and pop\n\nfunction InvitedUser({ user, team, onRevokeInvite }) {\n  const { inviteUserToTeam } = useAPIHandlers();\n  const { createNotification } = useNotifications();\n\n  // resend the invite\n  const resendInvite = async () => {\n    try {\n      await inviteUserToTeam({ team }, user);\n      createNotification(`Resent invite to ${user.name}!`, { type: 'success' });\n    } catch (error) {\n      captureException(error);\n      createNotification('Invite not sent, try again later', { type: 'error' });\n    }\n  };\n\n  return (\n    <PopoverContainer>\n      {({ visible, togglePopover }) => (\n        <div style={{ position: 'relative' }}>\n          <TransparentButton onClick={togglePopover}>\n            <UserAvatar user={user} />\n          </TransparentButton>\n\n          {visible && (\n            <PopoverDialog align=\"left\">\n              <PopoverInfo>\n                <div className={styles.avatar}>\n                  <UserLink user={user}>\n                    <UserAvatar user={user} />\n                  </UserLink>\n                </div>\n                <div className={styles.nameLoginWrap}>\n                  <h3 className={styles.name} title={user.name}>\n                    {user.name || 'Anonymous'}\n                  </h3>\n                  {user.login && (\n                    <p className={styles.userLogin} title={user.login}>\n                      @{user.login}\n                    </p>\n                  )}\n                </div>\n              </PopoverInfo>\n\n              <PopoverActions>\n                <Button onClick={resendInvite} type=\"tertiary\" size=\"small\" emoji=\"herb\">\n                  Resend invite\n                </Button>\n              </PopoverActions>\n\n              <PopoverActions type=\"dangerZone\">\n                <Button onClick={onRevokeInvite} type=\"dangerZone\" emoji=\"wave\">\n                  Remove\n                </Button>\n              </PopoverActions>\n            </PopoverDialog>\n          )}\n        </div>\n      )}\n    </PopoverContainer>\n  );\n}\n\nInvitedUser.propTypes = {\n  user: PropTypes.object.isRequired,\n  team: PropTypes.object.isRequired,\n  onRevokeInvite: PropTypes.func.isRequired,\n};\n\n// Whitelisted domain icon\n\nconst WhitelistedDomain = ({ domain, setDomain }) => (\n  <PopoverContainer>\n    {({ visible, togglePopover }) => (\n      <div style={{ position: 'relative' }}>\n        <TransparentButton onClick={togglePopover}>\n          <TooltipContainer\n            id=\"whitelisted-domain-tooltip\"\n            type=\"action\"\n            tooltip={visible ? null : `Anyone with an @${domain} email can join`}\n            target={\n              <div className={styles.whitelistedDomainIconWrap}>\n                <WhitelistedDomainIcon domain={domain} />\n              </div>\n            }\n          />\n        </TransparentButton>\n        {visible && (\n          <PopoverDialog focusOnDialog align=\"left\">\n            <PopoverInfo>\n              <InfoDescription>Anyone with an @{domain} email can join</InfoDescription>\n            </PopoverInfo>\n            {!!setDomain && (\n              <PopoverActions type=\"dangerZone\">\n                <Button type=\"dangerZone\" size=\"small\" emoji=\"bomb\" onClick={() => setDomain(null)}>\n                  Remove {domain}\n                </Button>\n              </PopoverActions>\n            )}\n          </PopoverDialog>\n        )}\n      </div>\n    )}\n  </PopoverContainer>\n);\n\nWhitelistedDomain.propTypes = {\n  domain: PropTypes.string.isRequired,\n  setDomain: PropTypes.func,\n};\n\nWhitelistedDomain.defaultProps = {\n  setDomain: null,\n};\n\n// Join Team\n\nconst JoinTeam = ({ onClick }) => (\n  <Button size=\"small\" type=\"cta\" onClick={onClick}>\n    Join Team\n  </Button>\n);\n\nconst useInvitees = createAPIHook(async (api, team, currentUserIsOnTeam) => {\n  if (!currentUserIsOnTeam) return [];\n  if (!team.tokens.length) return [];\n\n  try {\n    const idString = team.tokens.map(({ userId }) => `id=${userId}`).join('&');\n    const { data } = await api.get(`v1/users/by/id?${idString}`);\n    const invitees = Object.values(data);\n    return invitees;\n  } catch (error) {\n    if (!error.response || error.response.status !== 404) {\n      captureException(error);\n    }\n    return [];\n  }\n});\n\nconst TeamUserContainer = ({ team, removeUserFromTeam, updateUserPermissions, updateWhitelistedDomain, inviteEmail, inviteUser, joinTeam }) => {\n  const { currentUser } = useCurrentUser();\n  const [newlyInvited, setNewlyInvited] = useState([]);\n  const [removedInvitees, setRemovedInvitee] = useState([]);\n  const { revokeTeamInvite } = useAPIHandlers();\n  const { createNotification } = useNotifications();\n\n  const currentUserIsOnTeam = userIsOnTeam({ team, user: currentUser });\n  const currentUserIsTeamAdmin = userIsTeamAdmin({ team, user: currentUser });\n  const currentUserCanJoinTeam = userCanJoinTeam({ team, user: currentUser });\n  const { value } = useInvitees(team, currentUserIsOnTeam);\n  const invitees = (value || []).concat(newlyInvited).filter((el) => (!removedInvitees.includes(el)));\n\n  const members = uniq([...team.users, ...invitees].map((user) => user.id));\n\n  const onInviteUser = async (user) => {\n    setNewlyInvited((invited) => [...invited, user]);\n    try {\n      await inviteUser(user);\n      createNotification(`Invited ${getDisplayName(user)}!`, { type: 'success' });\n    } catch (error) {\n      setNewlyInvited((invited) => invited.filter((u) => u.id !== user.id));\n      captureException(error);\n      createNotification(`Couldn't invite ${getDisplayName(user)}, Try again later`, { type: 'error' });\n    }\n  };\n\n  const onInviteEmail = async (email) => {\n    try {\n      await inviteEmail(email);\n      createNotification(`Invited ${email}!`, { type: 'success' });\n    } catch (error) {\n      captureException(error);\n      createNotification(`Couldn't invite ${email}, Try again later`, { type: 'error' });\n    }\n  };\n\n  return (\n    <ul className={styles.container}>\n      {team.users.map((user) => (\n        <li key={user.id} className={styles.teamMember}>\n          <TeamUserPop team={team} user={user} removeUserFromTeam={removeUserFromTeam} updateUserPermissions={updateUserPermissions} />\n        </li>\n      ))}\n      {!!team.whitelistedDomain && (\n        <li className={styles.whitelistedDomain}>\n          <WhitelistedDomain domain={team.whitelistedDomain} setDomain={currentUserIsTeamAdmin ? updateWhitelistedDomain : null} />\n        </li>\n      )}\n      {invitees.map((user) => (\n        <li key={user.id} className={styles.invitedMember}>\n          <InvitedUser\n            user={user}\n            team={team}\n            onRevokeInvite={async () => {\n              setRemovedInvitee((removed) => [...removed, user]);\n              try {\n                await revokeTeamInvite({ team, user });\n                createNotification(`Removed ${user.name} from team`);\n              } catch (error) {\n                captureException(error);\n                createNotification(\"Couldn't revoke invite, Try again later\", { type: 'error' });\n              }\n            }}\n          />\n        </li>\n      ))}\n      {currentUserIsOnTeam && (\n        <li className={styles.addButtonWrap}>\n          <AddTeamUserPop\n            inviteEmail={inviteEmail ? onInviteEmail : null}\n            inviteUser={inviteUser ? onInviteUser : null}\n            setWhitelistedDomain={currentUserIsTeamAdmin ? updateWhitelistedDomain : null}\n            members={members}\n            whitelistedDomain={team.whitelistedDomain}\n          />\n        </li>\n      )}\n      {currentUserCanJoinTeam && (\n        <li className={styles.joinButtonWrap}>\n          <JoinTeam onClick={joinTeam} />\n        </li>\n      )}\n    </ul>\n  );\n};\n\nexport default TeamUserContainer;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles__container___2VckJ\",\"teamMember\":\"styles__teamMember___13WD5\",\"invitedMember\":\"styles__invitedMember___2rUc5\",\"whitelistedDomainIconWrap\":\"styles__whitelistedDomainIconWrap___3lqya\",\"whitelistedDomain\":\"styles__whitelistedDomain___15rVv\",\"addButtonWrap\":\"styles__addButtonWrap___nTY7n\",\"joinButtonWrap\":\"styles__joinButtonWrap___2EdYw\",\"avatar\":\"styles__avatar___1w3J1\",\"nameLoginWrap\":\"styles__nameLoginWrap___3HC1s\",\"name\":\"styles__name___1aDGY\",\"userLogin\":\"styles__userLogin___2Tikf\",\"projectsList\":\"styles__projectsList___3kCFL\",\"projectAvatarWrap\":\"styles__projectAvatarWrap___2QOAA\",\"tinyAvatar\":\"styles__tinyAvatar___2E8oR\",\"statusBadge\":\"styles__statusBadge___2S_D1\",\"adminStatus\":\"styles__adminStatus___PUDy5\",\"userProfile\":\"styles__userProfile___GS7UC\",\"userInfo\":\"styles__userInfo___hzaYH\",\"userName\":\"styles__userName___qaA0h\"};","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getDisplayName } from 'Models/user';\nimport { userIsTeamAdmin, userIsOnlyTeamAdmin } from 'Models/team';\nimport TooltipContainer from 'Components/tooltips/tooltip-container';\nimport { UserAvatar, ProjectAvatar } from 'Components/images/avatar';\nimport { UserLink } from 'Components/link';\nimport Thanks from 'Components/thanks';\nimport {\n  PopoverContainer,\n  PopoverDialog,\n  PopoverActions,\n  PopoverInfo,\n  MultiPopover,\n  MultiPopoverTitle,\n  ActionDescription,\n} from 'Components/popover';\nimport Button from 'Components/buttons/button';\nimport TransparentButton from 'Components/buttons/transparent-button';\nimport Loader from 'Components/loader';\n\nimport { useTrackedFunc, useTracker } from 'State/segment-analytics';\nimport { createAPIHook } from 'State/api';\nimport { useCurrentUser } from 'State/current-user';\nimport { useNotifications } from 'State/notifications';\nimport { getAllPages } from 'Shared/api';\n\nimport styles from './styles.styl';\n\nconst MEMBER_ACCESS_LEVEL = 20;\nconst ADMIN_ACCESS_LEVEL = 30;\n\nconst ProjectsList = ({ options, value, onChange }) => (\n  <div className={styles.projectsList}>\n    {options.map((project) => (\n      <label key={project.id}>\n        <input\n          type=\"checkbox\"\n          checked={value.includes(project.id)}\n          value={project.id}\n          onChange={(e) => {\n            const next = new Set(value);\n            if (e.target.checked) {\n              next.add(e.target.value);\n            } else {\n              next.delete(e.target.value);\n            }\n            onChange(Array.from(next));\n          }}\n        />\n        <div className={styles.projectAvatarWrap}>\n          <ProjectAvatar project={project} />\n        </div>\n        {project.domain}\n      </label>\n    ))}\n  </div>\n);\n\nconst AdminBadge = () => (\n  <div className={styles.statusBadge}>\n    <TooltipContainer\n      id=\"admin-badge-tooltip\"\n      type=\"info\"\n      target={<span className={styles.adminStatus}>Team Admin</span>}\n      tooltip=\"Can edit team info and billing\"\n    />\n  </div>\n);\n\n// Team User Remove 💣\n\nfunction TeamUserRemovePop({ user, onRemoveUser, userTeamProjects }) {\n  const [selectedProjectIDs, setSelectedProjects] = useState([]);\n  function selectAllProjects() {\n    setSelectedProjects(userTeamProjects.map((p) => p.id));\n  }\n\n  function unselectAllProjects() {\n    setSelectedProjects([]);\n  }\n\n  const allProjectsSelected = userTeamProjects.every((p) => selectedProjectIDs.includes(p.id));\n  const projectsToRemove = userTeamProjects.filter((p) => selectedProjectIDs.includes(p.id));\n\n  return (\n    <PopoverDialog align=\"left\" focusOnPopover>\n      <MultiPopoverTitle>Remove {getDisplayName(user)}</MultiPopoverTitle>\n\n      {!userTeamProjects && (\n        <PopoverActions>\n          <Loader />\n        </PopoverActions>\n      )}\n      {userTeamProjects && userTeamProjects.length > 0 && (\n        <PopoverActions>\n          <ActionDescription>Also remove them from these projects</ActionDescription>\n          <ProjectsList options={userTeamProjects} value={selectedProjectIDs} onChange={setSelectedProjects} />\n          {userTeamProjects.length > 1 && allProjectsSelected && (\n            <Button size=\"small\" onClick={unselectAllProjects}>\n              Unselect All\n            </Button>\n          )}\n          {userTeamProjects.length > 1 && !allProjectsSelected && (\n            <Button size=\"small\" onClick={selectAllProjects}>\n              Select All\n            </Button>\n          )}\n        </PopoverActions>\n      )}\n\n      <PopoverActions type=\"dangerZone\">\n        <Button type=\"dangerZone\" onClick={() => onRemoveUser(projectsToRemove)}>\n          Remove{' '}\n          <span className={styles.tinyAvatar}>\n            <UserAvatar user={user} />\n          </span>\n        </Button>\n      </PopoverActions>\n    </PopoverDialog>\n  );\n}\n\n// Team User Info 😍\n\nconst TeamUserInfo = ({ user, team, onMakeAdmin, onRemoveAdmin, onRemoveUser }) => {\n  const { currentUser } = useCurrentUser();\n  const currentUserIsTeamAdmin = userIsTeamAdmin({ user: currentUser, team });\n  const selectedUserIsTeamAdmin = userIsTeamAdmin({ user, team });\n  const selectedUserIsOnlyAdmin = userIsOnlyTeamAdmin({ user, team });\n  const teamHasOnlyOneMember = team.users.length === 1;\n  const isCurrentUser = currentUser && currentUser.id === user.id;\n  const currentUserHasRemovePriveleges = currentUserIsTeamAdmin || isCurrentUser;\n  const canCurrentUserRemoveUser = currentUserHasRemovePriveleges && !teamHasOnlyOneMember && !selectedUserIsOnlyAdmin;\n\n  return (\n    <PopoverDialog align=\"left\">\n      <PopoverInfo>\n        <div className={styles.userProfile}>\n          <UserLink user={user}>\n            <UserAvatar user={user} />\n          </UserLink>\n          <div className={styles.userInfo}>\n            <div className={styles.userName}>{user.name || 'Anonymous'}</div>\n            {user.login && <div className={styles.userLogin}>@{user.login}</div>}\n            {selectedUserIsTeamAdmin && <AdminBadge />}\n          </div>\n        </div>\n      </PopoverInfo>\n      {user.thanksCount > 0 && (\n        <PopoverInfo>\n          <Thanks count={user.thanksCount} />\n        </PopoverInfo>\n      )}\n      {currentUserIsTeamAdmin && !selectedUserIsOnlyAdmin && (\n        <PopoverActions>\n          <ActionDescription>Admins can update team info, billing, and remove users</ActionDescription>\n          {selectedUserIsTeamAdmin ? (\n            <Button size=\"small\" type=\"tertiary\" emoji=\"fastDown\" onClick={onRemoveAdmin}>\n              Remove Admin Status\n            </Button>\n          ) : (\n            <Button size=\"small\" type=\"tertiary\" emoji=\"fastUp\" onClick={onMakeAdmin}>\n              Make an Admin\n            </Button>\n          )}\n        </PopoverActions>\n      )}\n      {canCurrentUserRemoveUser && (\n        <PopoverActions type=\"dangerZone\">\n          <Button type=\"dangerZone\" emoji=\"wave\" onClick={onRemoveUser}>\n            {isCurrentUser ? 'Leave Team' : 'Remove from Team'}\n          </Button>\n        </PopoverActions>\n      )}\n    </PopoverDialog>\n  );\n};\n\nconst useProjects = createAPIHook(async (api, userID, team) => {\n  const userProjects = await getAllPages(api, `/v1/users/by/id/projects?id=${userID}&limit=100`);\n  return userProjects.filter((userProj) => team.projects.some((teamProj) => teamProj.id === userProj.id));\n});\n\nconst adminStatusDisplay = (adminIds, user) => {\n  if (adminIds.includes(user.id)) {\n    return ' (admin)';\n  }\n  return '';\n};\n\nconst TeamUserPop = ({ team, user, removeUserFromTeam, updateUserPermissions }) => {\n  const { createNotification } = useNotifications();\n  const userTeamProjectsResponse = useProjects(user.id, team);\n  const userTeamProjects = userTeamProjectsResponse.status === 'ready' ? userTeamProjectsResponse.value : null;\n\n  const removeUser = useTrackedFunc(async (selectedProjects = []) => {\n    await removeUserFromTeam(user, selectedProjects);\n    createNotification(`${getDisplayName(user)} removed from Team`);\n  }, 'Remove from Team submitted');\n\n  const trackRemoveClicked = useTracker('Remove from Team clicked');\n\n  // if user is a member of no projects, skip the confirm step\n  const onOrShowRemoveUser = (showRemove, togglePopover) => {\n    if (userTeamProjects && userTeamProjects.length === 0) {\n      removeUser();\n      togglePopover();\n    } else {\n      trackRemoveClicked();\n      showRemove();\n    }\n  };\n\n  const onRemoveAdmin = useTrackedFunc(() => updateUserPermissions(user, MEMBER_ACCESS_LEVEL), 'Remove Admin Status clicked');\n  const onMakeAdmin = useTrackedFunc(() => updateUserPermissions(user, ADMIN_ACCESS_LEVEL), 'Make an Admin clicked');\n\n  return (\n    <PopoverContainer>\n      {({ visible, togglePopover, toggleAndCall }) => (\n        <div style={{ position: 'relative' }}>\n          <TransparentButton onClick={togglePopover}>\n            <UserAvatar user={user} suffix={adminStatusDisplay(team.adminIds, user)} withinButton />\n          </TransparentButton>\n\n          {visible && (\n            <MultiPopover\n              views={{\n                remove: () => <TeamUserRemovePop user={user} userTeamProjects={userTeamProjects} onRemoveUser={toggleAndCall(removeUser)} />,\n              }}\n            >\n              {(showViews) => (\n                <TeamUserInfo\n                  user={user}\n                  team={team}\n                  onRemoveAdmin={toggleAndCall(onRemoveAdmin)}\n                  onMakeAdmin={toggleAndCall(onMakeAdmin)}\n                  onRemoveUser={() => onOrShowRemoveUser(showViews.remove, togglePopover)}\n                />\n              )}\n            </MultiPopover>\n          )}\n        </div>\n      )}\n    </PopoverContainer>\n  );\n};\n\nTeamUserPop.propTypes = {\n  team: PropTypes.object.isRequired,\n  user: PropTypes.object.isRequired,\n  removeUserFromTeam: PropTypes.func.isRequired,\n  updateUserPermissions: PropTypes.func.isRequired,\n};\n\nexport default TeamUserPop;\n","import React, { useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { PopoverWithButton, PopoverDialog, PopoverSearch, PopoverInfo, InfoDescription } from 'Components/popover';\nimport ProjectResultItem from 'Components/project/project-result-item';\nimport { useCurrentUser } from 'State/current-user';\n\nconst filterProjects = (query, projects, teamProjects) => {\n  query = query.toLowerCase().trim();\n  const MAX_PROJECTS = 20;\n  const teamProjectIds = teamProjects.map(({ id }) => id);\n  const availableProjects = projects.filter(({ id }) => !teamProjectIds.includes(id));\n  const filteredProjects = [];\n  if (!query) {\n    return availableProjects.splice(0, MAX_PROJECTS);\n  }\n  for (const project of availableProjects) {\n    // eslint-disable-line\n    if (filteredProjects.length > MAX_PROJECTS) {\n      break;\n    }\n    const titleMatch = project.domain.toLowerCase().includes(query);\n    const descMatch = project.description.toLowerCase().includes(query);\n    if (titleMatch || descMatch) {\n      filteredProjects.push(project);\n    }\n  }\n  return filteredProjects;\n};\n\nfunction AddTeamProjectPop({ teamProjects, addProject }) {\n  const [query, setQuery] = useState('');\n  const { currentUser } = useCurrentUser();\n  const myProjects = currentUser.projects;\n\n  const filteredProjects = useMemo(() => filterProjects(query, myProjects, teamProjects), [query, myProjects, teamProjects]);\n\n  return (\n    <PopoverDialog wide align=\"left\">\n      <PopoverSearch\n        value={query}\n        onChange={setQuery}\n        onSubmit={addProject}\n        results={filteredProjects}\n        labelText=\"Project name\"\n        placeholder=\"Filter my projects\"\n        status=\"ready\"\n        renderItem={\n          ({ item: project, active }) => (\n            <ProjectResultItem active={active} onClick={() => addProject(project)} project={project} />\n          )\n        }\n      />\n      {filteredProjects.length === 0 && query.length === 0 && (\n        <PopoverInfo>\n          <InfoDescription>Create or Join projects to add them to the team</InfoDescription>\n        </PopoverInfo>\n      )}\n    </PopoverDialog>\n  );\n}\n\nconst AddTeamProject = ({ addProject, teamProjects }) => (\n  <PopoverWithButton\n    buttonText=\"Add Project\"\n    buttonProps={{ emoji: 'bentoBox' }}\n  >\n    {({ togglePopover }) => (\n      <AddTeamProjectPop\n        addProject={(project) => {\n          togglePopover();\n          addProject(project);\n        }}\n        teamProjects={teamProjects}\n      />\n    )}\n  </PopoverWithButton>\n);\nAddTeamProject.propTypes = {\n  addProject: PropTypes.func.isRequired,\n  teamProjects: PropTypes.array.isRequired,\n};\n\nexport default AddTeamProject;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport Loader from 'Components/loader';\nimport { PopoverWithButton, PopoverDialog, PopoverActions, PopoverTitle, ActionDescription } from 'Components/popover';\nimport Button from 'Components/buttons/button';\nimport Image from 'Components/images/image';\nimport { useAPIHandlers } from 'State/api';\nimport { useNotifications } from 'State/notifications';\n// import { teamAdmins } from 'Models/team';\n\nconst illustration = 'https://cdn.glitch.com/c53fd895-ee00-4295-b111-7e024967a033%2Fdelete-team.svg?1531267699621';\n\nconst DeleteTeamPop = withRouter(({ history, team }) => {\n  const { deleteItem } = useAPIHandlers();\n  const { createNotification } = useNotifications();\n  const [teamIsDeleting, setTeamIsDeleting] = useState(false);\n\n  async function deleteTeam() {\n    if (teamIsDeleting) return;\n    setTeamIsDeleting(true);\n    try {\n      await deleteItem({ team });\n      history.push('/');\n    } catch (error) {\n      console.error('deleteTeam', error, error.response);\n      createNotification('Something went wrong, try refreshing?', { type: 'error' });\n      setTeamIsDeleting(false);\n    }\n  }\n\n  return (\n    <PopoverDialog focusOnDialog align=\"left\">\n      <PopoverTitle>Delete {team.name}</PopoverTitle>\n      <PopoverActions>\n        <Image height=\"98px\" width=\"auto\" src={illustration} alt=\"\" />\n        <ActionDescription>\n          Deleting {team.name} will remove this team page. No projects will be deleted, but only current project members will be able to edit them.\n        </ActionDescription>\n      </PopoverActions>\n      <PopoverActions type=\"dangerZone\">\n        <Button size=\"small\" type=\"dangerZone\" emoji=\"bomb\" onClick={deleteTeam}>\n          Delete {team.name}\n          {teamIsDeleting && <Loader />}\n        </Button>\n      </PopoverActions>\n      {/* temp hidden until the email part of this is ready\n        <PopoverInfo>\n          <UsersList users={teamAdmins({ team })}/>\n          <InfoDescription>This will also email all team admins, giving them an option to undelete it later</InfoDescription>\n        </section>\n      */}\n    </PopoverDialog>\n  );\n});\n\nDeleteTeamPop.propTypes = {\n  team: PropTypes.object.isRequired,\n};\n\nconst DeleteTeam = ({ team }) => (\n  <PopoverWithButton buttonProps={{ size: 'small', type: 'dangerZone', emoji: 'bomb' }} buttonText={`Delete ${team.name}`}>\n    {() => <DeleteTeamPop team={team} />}\n  </PopoverWithButton>\n);\n\nDeleteTeam.propTypes = {\n  team: PropTypes.object.isRequired,\n};\n\nexport default DeleteTeam;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { sumBy } from 'lodash';\n\nimport Button from 'Components/buttons/button';\nimport Markdown from 'Components/text/markdown';\nimport Cover from 'Components/search-result-cover-bar';\nimport Image from 'Components/images/image';\nimport Thanks from 'Components/thanks';\nimport VerifiedBadge from 'Components/verified-badge';\nimport ProfileList from 'Components/profile-list';\nimport { WrappingLink } from 'Components/link';\nimport { getLink, getAvatarUrl, DEFAULT_TEAM_AVATAR } from 'Models/team';\nimport { createAPIHook } from 'State/api';\nimport { captureException } from 'Utils/sentry';\n\nimport styles from './team-item.styl';\n\nconst useTeamUsers = createAPIHook(async (api, teamID) => {\n  try {\n    const res = await api.get(`/v1/teams/by/id/users?id=${teamID}&limit=10`);\n    return res.data.items;\n  } catch (e) {\n    captureException(e);\n    return [];\n  }\n});\n\nconst ProfileAvatar = ({ team }) => <Image className={styles.avatar} src={getAvatarUrl(team)} defaultSrc={DEFAULT_TEAM_AVATAR} alt=\"\" />;\n\nconst getTeamThanksCount = (team) => sumBy(team.users, (user) => user.thanksCount);\n\nconst TeamItem = ({ team }) => {\n  const { value: users } = useTeamUsers(team.id);\n  return (\n    <WrappingLink className={styles.container} href={getLink(team)}>\n      <Cover type=\"team\" item={team} size=\"medium\" />\n      <div className={styles.mainContent}>\n        <div className={styles.avatarWrap}>\n          <ProfileAvatar team={team} />\n        </div>\n        <div className={styles.body}>\n          <div className={styles.itemButtonWrap}>\n            <Button href={getLink(team)}>{team.name}</Button>\n            {!!team.isVerified && <VerifiedBadge />}\n          </div>\n          <div className={styles.usersList}>\n            <ProfileList layout=\"block\" users={users} />\n          </div>\n          <Markdown length={96}>{team.description || ' '}</Markdown>\n          <Thanks count={getTeamThanksCount(team)} />\n        </div>\n      </div>\n    </WrappingLink>\n  );\n};\n\nTeamItem.propTypes = {\n  team: PropTypes.shape({\n    description: PropTypes.string,\n    isVerified: PropTypes.bool.isRequired,\n    name: PropTypes.string.isRequired,\n    users: PropTypes.array,\n    url: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default TeamItem;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"team-item__container___1ro41\",\"itemButtonWrap\":\"team-item__itemButtonWrap___2YDOJ\",\"mainContent\":\"team-item__mainContent___1TLTo\",\"avatarWrap\":\"team-item__avatarWrap___14V-i\",\"avatar\":\"team-item__avatar___nqxC6\",\"usersList\":\"team-item__usersList___2K-7J\",\"body\":\"team-item__body___3amcy\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport styles from './heading.styl';\n\nconst cx = classNames.bind(styles);\n\nexport const TAGS = ['h1', 'h2', 'h3', 'h4'];\n\n/**\n * Heading Component\n */\nconst Heading = ({ children, className, tagName: TagName }) => {\n  const headingClassNameObj = {\n    heading: true,\n  };\n\n  headingClassNameObj[TagName] = true;\n  return <TagName className={classNames(cx(headingClassNameObj), className)}>{children}</TagName>;\n};\n\nHeading.propTypes = {\n  /** element(s) to display in the heading */\n  children: PropTypes.node.isRequired,\n  /** heading tag to be rendered */\n  tagName: PropTypes.oneOf(TAGS).isRequired,\n};\n\nexport default Heading;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"heading__heading___3bBL2\",\"h1\":\"heading__h1___W438O\",\"h2\":\"heading__h2___7wo6b\",\"h3\":\"heading__h3___3zu_K\",\"h4\":\"heading__h4___2NlsZ\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport markdownIt from 'markdown-it';\nimport markdownEmoji from 'markdown-it-emoji';\nimport markdownSanitizer from 'markdown-it-sanitizer';\nimport truncate from 'html-truncate';\nimport styles from './markdown.styl';\n\nconst md = ({ allowImages }) => {\n  const mdIt = markdownIt({\n    html: true,\n    breaks: true,\n    linkify: true,\n    typographer: true,\n  }).disable('smartquotes');\n\n  if (!allowImages) {\n    mdIt.disable('image');\n  }\n  return mdIt.use(markdownEmoji).use(markdownSanitizer);\n};\n\nconst stripHtml = (html) => {\n  const regex = /<\\/?([a-z][a-z0-9]*)\\b[^>]*>?/gi;\n  return html ? html.replace(regex, '').trim() : '';\n};\n\n/**\n * Markdown Component\n */\nconst Markdown = ({ children, length, allowImages, renderAsPlaintext }) => {\n  let rendered = md({ allowImages }).render(children || '');\n  let className = styles.markdownContent;\n\n  if (length > 0) {\n    rendered = truncate(rendered, length, { ellipsis: '…' });\n  }\n\n  if (renderAsPlaintext) {\n    rendered = stripHtml(rendered);\n    className = '';\n  }\n\n  return (\n    <div\n      className={className}\n      dangerouslySetInnerHTML={{ __html: rendered }} // eslint-disable-line react/no-danger\n    />\n  );\n};\n\nMarkdown.propTypes = {\n  /** element(s) to display in the button */\n  children: PropTypes.node.isRequired,\n  /** length to truncate rendered Markdown to */\n  length: PropTypes.number,\n  allowImages: PropTypes.bool,\n};\n\nMarkdown.defaultProps = {\n  length: -1,\n  allowImages: true,\n};\n\nexport default Markdown;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"markdownContent\":\"markdown__markdownContent___2iT8G\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './text.styl';\n\n/**\n * Text Component\n */\nconst Text = ({ children }) => <p className={styles.p}>{children}</p>;\n\nText.propTypes = {\n  /** element(s) to display in the tag */\n  children: PropTypes.node.isRequired,\n};\n\nexport default Text;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"p\":\"text__p___3RiQJ\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Emoji from 'Components/images/emoji';\nimport styles from './thanks.styl';\n\nconst thanksText = (count) => {\n  if (count === 1) {\n    return 'Thanked once';\n  }\n  if (count === 2) {\n    return 'Thanked twice';\n  }\n  return `Thanked ${count} times`;\n};\n\nconst ThanksLong = ({ count }) => (\n  <p className={styles.container}>\n    {thanksText(count)}\n    &nbsp;\n    <Emoji name=\"sparklingHeart\" />\n  </p>\n);\n\nconst ThanksShort = ({ count }) => (\n  <p className={styles.container}>\n    <Emoji name=\"sparklingHeart\" />\n    &nbsp;\n    {count}\n  </p>\n);\n\nconst Thanks = ({ count, short }) => {\n  if (count <= 0) return null;\n  if (short) return <ThanksShort count={count} />;\n  return <ThanksLong count={count} />;\n};\n\nThanks.propTypes = {\n  count: PropTypes.number.isRequired,\n  short: PropTypes.bool,\n};\n\nThanks.defaultProps = {\n  short: false,\n};\n\nexport default Thanks;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"thanks__container___1FiIQ\"};","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport useUniqueId from 'Hooks/use-unique-id';\nimport styles from './tooltip.styl';\n\nconst cx = classNames.bind(styles);\n\nexport const TYPES = ['action', 'info'];\nexport const ALIGNMENTS = ['left', 'right', 'center', 'top'];\n\nfunction TooltipContainer({ id, type, tooltip, target, align, persistent, children, fallback }) {\n  const [tooltipIsActive, setTooltipIsActive] = useState(false);\n\n  const tooltipContainerClassName = cx({\n    'tooltip-container': true,\n  });\n  const uniqueId = useUniqueId();\n\n  // prevents invalid aria-labelledby values when names contain whitespace\n  id = id.replace(/\\s/g, '-');\n\n  if (id !== 'new-stuff-tooltip') {\n    id = id.concat(uniqueId);\n  }\n\n  const tooltipClassName = cx({\n    tooltip: true,\n    top: align.includes('top'),\n    left: align.includes('left'),\n    right: align.includes('right'),\n    'new-stuff': id === 'new-stuff-tooltip',\n    persistent,\n    fallback,\n  });\n  const tooltipFallbackClassName = fallback ? styles.fallback : '';\n\n  let role;\n  let extendedTarget;\n  if (fallback && target.type === 'img') {\n    extendedTarget = (\n      <div data-tooltip={tooltip} className={tooltipFallbackClassName}>\n        {target}\n      </div>\n    );\n  } else if (type === 'action') {\n    // action tooltips are visible on hover and focus, click triggers a separate action\n    // they should always be populated with their content, even when they are \"hidden\"\n\n    role = 'tooltip';\n    extendedTarget = React.cloneElement(target, {\n      'aria-labelledby': id,\n      'data-tooltip': tooltip,\n      className: `${target.props.className} ${tooltipFallbackClassName}`,\n    });\n  } else if (type === 'info') {\n    // info tooltips are visible on hover and focus, they provide supplementary info\n    // they should be empty when not \"visible\", and populated when they are\n\n    role = 'status';\n    extendedTarget = React.cloneElement(target, {\n      'aria-describedby': id,\n      'data-tooltip': tooltip,\n      className: `${target.props.className} ${tooltipFallbackClassName}`,\n    });\n  }\n\n  const shouldShowTooltip = tooltip && (tooltipIsActive || persistent);\n\n  let tooltipNode = null;\n  if (!fallback) {\n    tooltipNode = (\n      <div role={role} id={id} className={tooltipClassName} style={{ opacity: shouldShowTooltip ? 1 : 0 }}>\n        {type === 'info' || shouldShowTooltip ? tooltip : null}\n      </div>\n    );\n  }\n\n  return (\n    <div className={tooltipContainerClassName}>\n      <div\n        onMouseEnter={() => setTooltipIsActive(true)}\n        onMouseLeave={() => setTooltipIsActive(false)}\n        onFocus={() => setTooltipIsActive(true)}\n        onBlur={() => setTooltipIsActive(false)}\n      >\n        {extendedTarget}\n      </div>\n      {tooltipNode}\n      {children}\n    </div>\n  );\n}\n\nTooltipContainer.propTypes = {\n  children: PropTypes.node,\n  /* the id of the tooltip */\n  id: PropTypes.string.isRequired,\n  /* the type of tooltip */\n  type: PropTypes.oneOf(TYPES).isRequired,\n  /* tooltip text */\n  tooltip: PropTypes.string,\n  /* the focus/hover target of the tooltip */\n  target: PropTypes.node.isRequired,\n  /* how to align the tooltip */\n  align: PropTypes.arrayOf(PropTypes.oneOf(ALIGNMENTS)),\n  /* whether to persistently show the tooltip */\n  persistent: PropTypes.bool,\n  /* whether to use CSS tooltips as a fallback (for < FF 66) */\n  fallback: PropTypes.bool,\n};\n\nTooltipContainer.defaultProps = {\n  align: ['center'],\n  children: null,\n  tooltip: '',\n  persistent: false,\n  fallback: false,\n};\n\nexport default TooltipContainer;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"touch\":\"tooltip__touch___6hv00\",\"tooltip\":\"tooltip__tooltip___bsU2h\",\"tooltip-container\":\"tooltip__tooltip-container___38QlL\",\"top\":\"tooltip__top___3pQng\",\"left\":\"tooltip__left___2h2tq\",\"right\":\"tooltip__right___1TsLx\",\"persistent\":\"tooltip__persistent___3odaN\",\"new-stuff\":\"tooltip__new-stuff___tfIkr\",\"fallback\":\"tooltip__fallback___PNRpY\",\"tooltip-container-button\":\"tooltip__tooltip-container-button___1IwWd\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { orderBy } from 'lodash';\n\nimport { getLink as getTeamLink, getAvatarUrl as getTeamAvatarUrl } from 'Models/team';\nimport { getAvatarThumbnailUrl as getUserAvatarUrl } from 'Models/user';\nimport Image from 'Components/images/image';\nimport { UserAvatar } from 'Components/images/avatar';\nimport TooltipContainer from 'Components/tooltips/tooltip-container';\nimport { UserLink } from 'Components/link';\nimport Button from 'Components/buttons/button';\nimport CheckboxButton from 'Components/buttons/checkbox-button';\nimport { MultiPopover, PopoverContainer, PopoverActions, PopoverInfo, PopoverDialog, PopoverTitle, InfoDescription } from 'Components/popover';\nimport CreateTeamPop from 'Components/create-team-pop';\nimport { useTrackedFunc, useTracker } from 'State/segment-analytics';\nimport useDevToggle from 'State/dev-toggles';\n\nimport styles from './styles.styl';\n\n// Create Team button\n\nconst CreateTeamButton = ({ showCreateTeam }) => {\n  const onClickCreateTeam = useTrackedFunc(showCreateTeam, 'Create Team clicked');\n  return (\n    <Button size=\"small\" onClick={onClickCreateTeam} emoji=\"herb\">\n      Create Team\n    </Button>\n  );\n};\n\nCreateTeamButton.propTypes = {\n  showCreateTeam: PropTypes.func.isRequired,\n};\n\n// Team List\n\nconst TeamList = ({ teams, showCreateTeam }) => {\n  const orderedTeams = orderBy(teams, (team) => team.name.toLowerCase());\n\n  return (\n    <PopoverActions>\n      {orderedTeams.map((team) => (\n        <div className={styles.buttonWrap} key={team.id}>\n          <Button\n            href={getTeamLink(team)}\n            size=\"small\"\n            type=\"tertiary\"\n            image={<Image className={styles.teamAvatar} src={getTeamAvatarUrl({ ...team, size: 'small' })} alt=\"\" width={16} height={16} />}\n          >\n            {team.name}\n          </Button>\n        </div>\n      ))}\n      <CreateTeamButton showCreateTeam={showCreateTeam} />\n    </PopoverActions>\n  );\n};\n\nTeamList.propTypes = {\n  teams: PropTypes.arrayOf(\n    PropTypes.shape({\n      hasAvatarImage: PropTypes.bool.isRequired,\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      url: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  showCreateTeam: PropTypes.func.isRequired,\n};\n\n// User Options 🧕\n\nconst UserOptionsPop = ({ togglePopover, showCreateTeam, user, signOut, showAccountSettingsOverlay, showNewStuffOverlay, superUserHelpers }) => {\n  const { superUserFeature, canBecomeSuperUser, toggleSuperUser } = superUserHelpers;\n\n  const trackLogout = useTracker('Logout');\n\n  const clickNewStuff = (event) => {\n    togglePopover();\n    showNewStuffOverlay();\n    event.stopPropagation();\n  };\n\n  const clickAccountSettings = (event) => {\n    togglePopover();\n    showAccountSettingsOverlay();\n    event.stopPropagation();\n  };\n\n  const clickSignout = () => {\n    if (!user.login) {\n      if (\n        // eslint-disable-next-line\n        !window.confirm(`You won't be able to sign back in under this same anonymous account.\nAre you sure you want to sign out?`)\n      ) {\n        return;\n      }\n    }\n    togglePopover();\n    trackLogout();\n    window.analytics.reset();\n    signOut();\n  };\n\n  const userPasswordEnabled = useDevToggle('User Passwords');\n\n  return (\n    <PopoverDialog className={styles.userOptionsPop} align=\"right\">\n      <PopoverTitle>\n        <UserLink user={user}>\n          <div className={styles.userAvatarContainer} style={{ backgroundColor: user.color }}>\n            <Image src={getUserAvatarUrl(user)} alt=\"Your avatar\" />\n          </div>\n          <div className={styles.userInfo}>\n            <InfoDescription>{user.name || 'Anonymous'}</InfoDescription>\n            {user.login && (\n              <div className={styles.userLogin}>\n                <InfoDescription>@{user.login}</InfoDescription>\n              </div>\n            )}\n          </div>\n        </UserLink>\n      </PopoverTitle>\n\n      <TeamList teams={user.teams} showCreateTeam={showCreateTeam} userIsAnon={!user.login} />\n\n      <PopoverInfo>\n        {(canBecomeSuperUser || !!superUserFeature) && (\n          <div>\n            <CheckboxButton value={!!superUserFeature} onChange={toggleSuperUser} type=\"tertiary\" matchBackground>\n              Super User\n            </CheckboxButton>\n          </div>\n        )}\n        <div className={styles.buttonWrap}>\n          <Button type=\"tertiary\" size=\"small\" emoji=\"dogFace\" onClick={clickNewStuff}>\n            New Stuff\n          </Button>\n        </div>\n        <div className={styles.buttonWrap}>\n          <Button type=\"tertiary\" size=\"small\" emoji=\"ambulance\" href=\"https://support.glitch.com\">\n            Support\n          </Button>\n        </div>\n        {userPasswordEnabled && (\n          <div className={styles.buttonWrap}>\n            <Button size=\"small\" type=\"tertiary\" emoji=\"key\" onClick={clickAccountSettings}>\n              Account Settings\n            </Button>\n          </div>\n        )}\n        <Button type=\"tertiary\" size=\"small\" emoji=\"balloon\" onClick={clickSignout}>\n          Sign Out\n        </Button>\n      </PopoverInfo>\n    </PopoverDialog>\n  );\n};\n\nUserOptionsPop.propTypes = {\n  togglePopover: PropTypes.func.isRequired,\n  showCreateTeam: PropTypes.func.isRequired,\n  user: PropTypes.object.isRequired,\n  signOut: PropTypes.func.isRequired,\n  showAccountSettingsOverlay: PropTypes.func.isRequired,\n  showNewStuffOverlay: PropTypes.func.isRequired,\n};\n\nfunction CheckForCreateTeamHash(props) {\n  return props.children(window.location.hash === '#create-team');\n}\n\n// Header button and init pop\n\nexport default function UserOptionsAndCreateTeamPopContainer(props) {\n  const avatarStyle = { backgroundColor: props.user.color };\n\n  return (\n    <CheckForCreateTeamHash>\n      {(createTeamOpen) => (\n        <PopoverContainer startOpen={createTeamOpen}>\n          {({ togglePopover, visible }) => {\n            const userOptionsButton = (\n              <Button type=\"dropDown\" onClick={togglePopover} disabled={!props.user.id}>\n                <span className={styles.userOptionsWrap}>\n                  <span className={styles.userOptionsButtonAvatar}>\n                    <UserAvatar user={props.user} withinButton style={avatarStyle} />\n                  </span>\n                  <span className=\"down-arrow icon\" />\n                </span>\n              </Button>\n            );\n\n            return (\n              <TooltipContainer target={userOptionsButton} tooltip=\"User options\" id=\"user-options-tooltip\" type=\"action\" align={['right']}>\n                {visible && (\n                  <MultiPopover\n                    views={{\n                      createTeam: () => <CreateTeamPop />,\n                    }}\n                  >\n                    {({ createTeam }) => <UserOptionsPop {...props} togglePopover={togglePopover} showCreateTeam={createTeam} />}\n                  </MultiPopover>\n                )}\n              </TooltipContainer>\n            );\n          }}\n        </PopoverContainer>\n      )}\n    </CheckForCreateTeamHash>\n  );\n}\n\nUserOptionsAndCreateTeamPopContainer.propTypes = {\n  user: PropTypes.shape({\n    avatarThumbnailUrl: PropTypes.string,\n    color: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    login: PropTypes.string,\n    teams: PropTypes.array.isRequired,\n  }).isRequired,\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userOptionsPop\":\"styles__userOptionsPop___22O64\",\"userOptionsWrap\":\"styles__userOptionsWrap___3wpd5\",\"userOptionsButtonAvatar\":\"styles__userOptionsButtonAvatar___vIJOv\",\"userAvatarContainer\":\"styles__userAvatarContainer___1d3d0\",\"userInfo\":\"styles__userInfo___2L2Sk\",\"userLogin\":\"styles__userLogin___Ic26O\",\"teamAvatar\":\"styles__teamAvatar___Ssahw\",\"checkbox\":\"styles__checkbox___37Mg_\",\"buttonWrap\":\"styles__buttonWrap___3z2Le\"};","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Button from 'Components/buttons/button';\nimport Markdown from 'Components/text/markdown';\nimport Cover from 'Components/search-result-cover-bar';\nimport Thanks from 'Components/thanks';\nimport Image from 'Components/images/image';\nimport { getAvatarUrl, ANON_AVATAR_URL } from 'Models/user';\nimport { UserLink } from 'Components/link';\nimport styles from './user-item.styl';\n\nconst ProfileAvatar = ({ user }) => <Image className={styles.avatar} src={getAvatarUrl(user)} backgroundColor={user.color} defaultSrc={ANON_AVATAR_URL} alt=\"\" />;\n\nconst NameAndLogin = ({ user }) =>\n  user.name ? (\n    <>\n      <div className={styles.itemButtonWrap}>\n        <Button decorative>{user.name}</Button>\n      </div>\n      <div className={styles.login}>@{user.login}</div>\n    </>\n  ) : (\n    <div className={styles.itemButtonWrap}>\n      <Button decorative>@{user.login}</Button>\n    </div>\n  );\n\nconst UserItem = ({ user }) => (\n  <UserLink className={styles.container} user={user}>\n    <Cover type=\"user\" item={user} size=\"medium\" />\n    <div className={styles.mainContent}>\n      <div className={styles.avatarWrap}>\n        <ProfileAvatar user={user} />\n      </div>\n      <div className={styles.body}>\n        <div className={styles.nameLoginWrap}>\n          <NameAndLogin user={user} />\n        </div>\n        <Markdown length={96}>{user.description || ' '}</Markdown>\n        <Thanks count={user.thanksCount} />\n      </div>\n    </div>\n  </UserLink>\n);\n\nUserItem.propTypes = {\n  user: PropTypes.shape({\n    avatarUrl: PropTypes.string,\n    description: PropTypes.string,\n    id: PropTypes.number.isRequired,\n    login: PropTypes.string.isRequired,\n    name: PropTypes.string,\n    thanksCount: PropTypes.number.isRequired,\n  }).isRequired,\n};\n\nexport default UserItem;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"user-item__container___3Zpo0\",\"itemButtonWrap\":\"user-item__itemButtonWrap___2j4Z-\",\"mainContent\":\"user-item__mainContent___1bMfN\",\"login\":\"user-item__login___3YpGu\",\"nameLoginWrap\":\"user-item__nameLoginWrap___W6jL2\",\"avatarWrap\":\"user-item__avatarWrap___m70EJ\",\"avatar\":\"user-item__avatar___IF793\",\"body\":\"user-item__body___35wnI\"};","import React from 'react';\nimport TooltipContainer from 'Components/tooltips/tooltip-container';\nimport Image from 'Components/images/image';\nimport styles from './styles.styl';\n\nconst image = 'https://cdn.glitch.com/55f8497b-3334-43ca-851e-6c9780082244%2Fverified.svg?1501783108220';\nconst tooltip = 'Verified to be supportive, helpful people';\n\nconst VerifiedBadge = () => (\n  <TooltipContainer id=\"verified-team-tooltip\" type=\"info\" tooltip={tooltip} target={<Image className={styles.verified} src={image} alt=\"✓\" />} />\n);\n\nexport default VerifiedBadge;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"verified\":\"styles__verified___l8WZ2\"};","import React, { useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nconst useIntersectionObserver = ({ ratio }) => {\n  const ref = useRef();\n  const [isVisible, setIsVisible] = useState(false);\n  const [wasEverVisible, setWasEverVisible] = useState(false);\n  useEffect(() => {\n    if (!window.IntersectionObserver) {\n      setIsVisible(true);\n      setWasEverVisible(true);\n    }\n    const observer = new IntersectionObserver(([container]) => {\n      if (container.intersectionRatio > ratio) {\n        setIsVisible(true);\n        setWasEverVisible(true);\n      } else {\n        setIsVisible(false);\n      }\n    });\n    observer.observe(ref.current);\n    return () => observer.disconnect();\n  }, [ratio]);\n  return { ref, isVisible, wasEverVisible };\n};\n\nfunction VisibilityContainer({ children, ratio }) {\n  const { ref, isVisible, wasEverVisible } = useIntersectionObserver({ ratio });\n\n  return <div ref={ref}>{children({ isVisible, wasEverVisible })}</div>;\n}\n\nVisibilityContainer.propTypes = {\n  children: PropTypes.func.isRequired,\n  ratio: PropTypes.number,\n};\n\nVisibilityContainer.defaultProps = {\n  ratio: 0,\n};\n\nexport default VisibilityContainer;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './styles.styl';\n\nconst WhitelistedDomainIcon = ({ domain }) => {\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    setError(null);\n  }, [domain]);\n  if (error) {\n    return (\n      <div className={styles.whitelistedDomainLabel} aria-label={domain}>\n        {domain[0].toUpperCase()}\n      </div>\n    );\n  }\n\n  const src = `https://favicon-fetcher.glitch.me/img/${domain}`;\n  return <img className={styles.whitelistedDomainIcon} alt={domain} src={src} onError={setError} />;\n};\n\nWhitelistedDomainIcon.propTypes = {\n  domain: PropTypes.string.isRequired,\n};\n\nexport default WhitelistedDomainIcon;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"whitelistedDomainContainer\":\"styles__whitelistedDomainContainer___2QwaT\",\"whitelistedDomainIcon\":\"styles__whitelistedDomainIcon___GdSe5\",\"whitelistedDomainLabel\":\"styles__whitelistedDomainLabel___1Hq8j\"};","import React from 'react';\n\nconst useDebouncedValue = (value, timeout) => {\n  const [debouncedValue, setDebouncedValue] = React.useState(value);\n\n  React.useEffect(() => {\n    const id = window.setTimeout(() => {\n      setDebouncedValue(value);\n    }, timeout);\n    return () => window.clearTimeout(id);\n  }, [value]);\n\n  return debouncedValue;\n};\n\nexport default useDebouncedValue;\n","import React from 'react';\n\nlet counter = 0;\n\nconst useUniqueId = () => {\n  const [uniqueId] = React.useState(() => {\n    counter += 1;\n    return counter;\n  });\n  return `unique-${uniqueId}`;\n};\n\nexport default useUniqueId;\n","/* global CDN_URL */\n\nimport { kebabCase } from 'lodash';\nimport randomColor from 'randomcolor';\nimport { hex as getHexContrastRatio } from 'wcag-contrast';\n\nimport { getLink as getTeamLink } from './team';\nimport { getLink as getUserLink } from './user';\n\nimport { getCollectionPair } from './words';\n\nexport const FALLBACK_AVATAR_URL = 'https://cdn.glitch.com/1afc1ac4-170b-48af-b596-78fe15838ad3%2Fcollection-avatar.svg?1541449590339';\nexport const defaultAvatar = 'https://cdn.glitch.com/1afc1ac4-170b-48af-b596-78fe15838ad3%2Fcollection-avatar.svg?1540389405633';\n\nexport const getContrastWithLightText = (hex) => getHexContrastRatio(hex, '#fff');\n\nexport const getContrastWithDarkText = (hex) => getHexContrastRatio(hex, '#222');\n\nexport const isDarkColor = (hex) => {\n  if (!hex.startsWith('#')) return false;\n  const contrastWithLightText = getContrastWithLightText(hex);\n  const contrastWithDarkText = getContrastWithDarkText(hex);\n  return contrastWithLightText > contrastWithDarkText;\n};\n\nexport function getAvatarUrl(id) {\n  return `${CDN_URL}/collection-avatar/${id}.png`;\n}\n\nexport function getOwnerLink(collection) {\n  if (collection.team) {\n    return getTeamLink(collection.team);\n  }\n  if (collection.user) {\n    return getUserLink(collection.user);\n  }\n  throw new Error(`Collection ${collection.id} has no team or user field!`);\n}\n\nexport function getLink(collection) {\n  return `${getOwnerLink(collection)}/${collection.url}`;\n}\n\nexport async function createCollection(api, name, teamId, createNotification) {\n  let description = '';\n  let generatedName = false;\n  if (!name) {\n    // generate a new random name & description\n    generatedName = true;\n    name = 'radical-mix'; // a default to fall back on\n    try {\n      name = await getCollectionPair();\n    } catch (error) {\n      // stick to default\n    }\n    const [predicate, collectionSynonym] = name.split('-');\n    description = `A ${collectionSynonym} of projects that does ${predicate} things`;\n  }\n  const url = kebabCase(name);\n  const avatarUrl = defaultAvatar;\n  const coverColor = randomColor({ luminosity: 'light' }); // get a random color\n\n  try {\n    const { data: collection } = await api.post('collections', {\n      name,\n      description,\n      url,\n      avatarUrl,\n      coverColor,\n      teamId,\n    });\n\n    return collection;\n  } catch (error) {\n    let errorMessage = 'Unable to create collection.  Try again?';\n    if (!generatedName && error.response && error.response.data) {\n      errorMessage = error.response.data.message;\n    }\n    createNotification(errorMessage, { type: 'error' });\n  }\n  return null;\n}\n\n// Circular dependencies must go below module.exports\n// eventually want to handle whether the collection belongs to a team or a user\n","/* global CDN_URL EDITOR_URL PROJECTS_DOMAIN */\n\nexport const FALLBACK_AVATAR_URL = 'https://cdn.glitch.com/c53fd895-ee00-4295-b111-7e024967a033%2Ffallback-project-avatar.svg?1528812220123';\n\nexport function getAvatarUrl(id, cdnUrl = CDN_URL) {\n  return `${cdnUrl}/project-avatar/${id}.png`;\n}\n\nexport function getLink({ domain }) {\n  return `/~${domain}`;\n}\n\nexport function getShowUrl(domain, projectsDomain = PROJECTS_DOMAIN) {\n  return `//${domain}.${projectsDomain}`;\n}\n\nexport function getEditorUrl(domain, path, line, character, editorUrl = EDITOR_URL) {\n  if (path && Number.isInteger(line) && Number.isInteger(character)) {\n    return `${editorUrl}#!/${domain}?path=${path}:${line}:${character}`;\n  }\n  return `${editorUrl}#!/${domain}`;\n}\n\nexport function getRemixUrl(domain, editorUrl = EDITOR_URL) {\n  return `${editorUrl}#!/remix/${domain}`;\n}\n\nexport function sortProjectsByLastAccess(projects) {\n  return projects.sort((a, b) => {\n    if (a.permission.userLastAccess && b.permission.userLastAccess) {\n      return Date.parse(b.permission.userLastAccess) - Date.parse(a.permission.userLastAccess);\n    }\n    if (a.permission.userLastAccess) {\n      return -1;\n    }\n    if (b.permission.userLastAccess) {\n      return 1;\n    }\n    return Date.parse(b.lastAccess) - Date.parse(a.lastAccess);\n  });\n}\n\nexport const MEMBER_ACCESS_LEVEL = 20;\nexport const ADMIN_ACCESS_LEVEL = 30;\n\nexport function userIsProjectMember({ project, user }) {\n  if (!user || !project || !project.permissions) return false;\n  return project.permissions.some(({ userId }) => user.id === userId);\n}\n\nexport function userIsProjectAdmin({ project, user }) {\n  if (!user || !project) return false;\n  return project.permissions.some(({ userId, accessLevel }) => user.id === userId && accessLevel >= ADMIN_ACCESS_LEVEL);\n}\n\nexport function userIsOnlyProjectAdmin({ project, user }) {\n  if (!user || !project) return false;\n  const adminCount = project.permissions.filter((p) => p.accessLevel >= ADMIN_ACCESS_LEVEL).length;\n  if (adminCount > 1) return false;\n  return userIsProjectAdmin({ project, user });\n}\n","import { lightColors } from 'Models/user';\n/* globals CDN_URL */\nconst cacheBuster = Math.floor(Math.random() * 1000);\n\nexport const DEFAULT_TEAM_AVATAR = 'https://cdn.glitch.com/55f8497b-3334-43ca-851e-6c9780082244%2Fdefault-team-avatar.svg?1503510366819';\n\nexport const getLink = ({ url }) => `/@${url}`;\n\nexport const getAvatarUrl = ({ id, hasAvatarImage, cache = cacheBuster, size = 'large' }) => {\n  const customImage = `${CDN_URL}/team-avatar/${id}/${size}?${cache}`;\n  return hasAvatarImage ? customImage : DEFAULT_TEAM_AVATAR;\n};\n\nexport const getAvatarStyle = ({ id, hasAvatarImage, backgroundColor, cache, size }) => {\n  const image = getAvatarUrl({\n    id,\n    hasAvatarImage,\n    cache,\n    size,\n  });\n  if (hasAvatarImage) {\n    return {\n      backgroundImage: `url('${image}')`,\n    };\n  }\n  return {\n    backgroundColor,\n    backgroundImage: `url('${image}')`,\n  };\n};\n\nexport const getCoverUrl = ({ id, hasCoverImage, cache = cacheBuster, size = 'large' }) => {\n  const customImage = `${CDN_URL}/team-cover/${id}/${size}?${cache}`;\n  const defaultImage = 'https://cdn.glitch.com/b065beeb-4c71-4a9c-a8aa-4548e266471f%2Fteam-cover-pattern.svg?v=1559853406967';\n  return hasCoverImage ? customImage : defaultImage;\n};\n\nexport const getProfileStyle = ({ id, hasCoverImage, cache, size }) => {\n  const image = getCoverUrl({\n    id,\n    hasCoverImage,\n    cache,\n    size,\n  });\n  return {\n    backgroundColor: lightColors[id % 4],\n    backgroundImage: `url('${image}')`,\n  };\n};\n\nexport function teamAdmins({ team }) {\n  return team.users.filter((user) => team.adminIds.includes(user.id));\n}\n\nexport function userIsOnTeam({ user, team }) {\n  return !!user && !!team && !!team.teamPermissions && team.teamPermissions.some(({ userId }) => user.id === userId);\n}\n\nexport function userCanJoinTeam({ user, team }) {\n  if (!user || !user.emails || !team.whitelistedDomain || userIsOnTeam({ user, team })) return false;\n  return user.emails.some(({ email, verified }) => verified && email.endsWith(`@${team.whitelistedDomain}`));\n}\n\nexport function userIsTeamAdmin({ user, team }) {\n  return !!user && team.adminIds.includes(user.id);\n}\n\nexport function userIsOnlyTeamAdmin({ user, team }) {\n  return userIsTeamAdmin({ user, team }) && team.adminIds.length === 1;\n}\n","/* globals CDN_URL */\nconst cacheBuster = Math.floor(Math.random() * 1000);\n\nexport const ANON_AVATAR_URL = 'https://cdn.glitch.com/f6949da2-781d-4fd5-81e6-1fdd56350165%2Fanon-user-on-project-avatar.svg?1488556279399';\n\nexport const lightColors = ['#FFC761', '#9BFFB5', '#FF9BA1', '#9B9EFF'];\n\nexport function getDisplayName({ login, name }) {\n  if (name) {\n    return name;\n  }\n  if (login) {\n    return `@${login}`;\n  }\n  return 'Anonymous User';\n}\n\nexport function getLink({ id, login }) {\n  if (login) {\n    return `/@${login}`;\n  }\n  return `/user/${id}`;\n}\n\nexport function getAvatarUrl({ login, avatarUrl }) {\n  if (login && avatarUrl) {\n    return avatarUrl;\n  }\n  return ANON_AVATAR_URL;\n}\n\nexport function getAvatarThumbnailUrl({ login, avatarThumbnailUrl }) {\n  if (login && avatarThumbnailUrl) {\n    return avatarThumbnailUrl;\n  }\n  return ANON_AVATAR_URL;\n}\n\nexport function getAvatarStyle({ avatarUrl, color }) {\n  return {\n    backgroundColor: color,\n    backgroundImage: `url('${avatarUrl || ANON_AVATAR_URL}')`,\n  };\n}\n\nexport function getCoverUrl({ id, hasCoverImage, cache = cacheBuster, size = 'large' }) {\n  const customImage = `${CDN_URL}/user-cover/${id}/${size}?${cache}`;\n  const defaultImage = 'https://cdn.glitch.com/b065beeb-4c71-4a9c-a8aa-4548e266471f%2Fuser-pattern.svg';\n  return hasCoverImage ? customImage : defaultImage;\n}\n\nexport function getProfileStyle(params) {\n  // five random light colors from randomcolor\n  return {\n    backgroundColor: lightColors[params.id % 4],\n    backgroundImage: `url('${getCoverUrl(params)}')`,\n  };\n}\n","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://friendly-words.glitch.me/',\n});\n\nconst getData = async (name) => {\n  const { data } = await api.get(name);\n  return data;\n};\n\nexport const getPredicates = () => getData('predicates');\nexport const getObjects = () => getData('objects');\nexport const getCollections = () => getData('collections');\nexport const getCollectionPairs = () => getData('collection-pairs');\n\nconst getFirst = async (name) => {\n  const data = await getData(name);\n  return data[0];\n};\n\nexport const getPredicate = () => getFirst('predicates');\nexport const getWordPair = () => getFirst('word-pairs');\nexport const getTeamPair = () => getFirst('team-pairs');\nexport const getCollectionPair = () => getFirst('collection-pairs');\nexport const getCollection = () => getFirst('collections');\n","// Polyfills that aren't done using babel go here\n// In general we want to manage them with babel\n\n/* eslint-disable no-extend-native */\nimport 'details-element-polyfill';\nimport 'url-search-params-polyfill';\nimport 'intersection-observer';\n\nif (!String.prototype.trimStart) {\n  String.prototype.trimStart = String.prototype.trimLeft;\n}\nif (!String.prototype.trimEnd) {\n  String.prototype.trimEnd = String.prototype.trimRight;\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob#Polyfill\n/* eslint-disable */\nif (!HTMLCanvasElement.prototype.toBlob) {\n  Object.defineProperty(HTMLCanvasElement.prototype, 'toBlob', {\n    value: function (callback, type, quality) {\n      var dataURL = this.toDataURL(type, quality).split(',')[1];\n      setTimeout(function() {\n\n        var binStr = atob( dataURL ),\n            len = binStr.length,\n            arr = new Uint8Array(len);\n\n        for (var i = 0; i < len; i++ ) {\n          arr[i] = binStr.charCodeAt(i);\n        }\n\n        callback( new Blob( [arr], {type: type || 'image/png'} ) );\n\n      });\n    }\n  });\n}\n/* eslint-enable */\n\n/* eslint-enable no-extend-native */\n","import React from 'react';\n\nimport CollectionContainer from 'Components/collection/container';\nimport DataLoader from 'Components/data-loader';\nimport { getCollectionWithProjects } from 'State/collection';\n\nimport { featuredCollections } from '../curated/collections';\n\nexport const FeaturedCollections = () => (\n  <DataLoader get={(api) => Promise.all(featuredCollections.map((info) => getCollectionWithProjects(api, info)))}>\n    {(collections) => collections.filter((c) => !!c).map((collection) => <CollectionContainer preview collection={collection} key={collection.id} />)}\n  </DataLoader>\n);\n\nexport default FeaturedCollections;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Heading from 'Components/text/heading';\nimport Embed from 'Components/project/embed';\nimport MaskImage from 'Components/images/mask-image';\nimport Link, { WrappingLink } from 'Components/link';\nimport Button from 'Components/buttons/button';\nimport Arrow from 'Components/arrow';\n\nconst FeaturedEmbed = ({ image, mask, title, appDomain, blogUrl, body, color }) => (\n  <div className=\"featured-embed\">\n    <div className=\"mask-container\">\n      <WrappingLink href={`culture${blogUrl}`}>\n        <MaskImage maskClass={mask} src={image} />\n      </WrappingLink>\n    </div>\n\n    <div className=\"content\" style={{ backgroundColor: color }}>\n      <Link to={`culture${blogUrl}`}>\n        <div className=\"description\">\n          <Heading tagName=\"h2\">{title}</Heading>\n          {/* eslint-disable-next-line react/no-danger */}\n          <div dangerouslySetInnerHTML={{ __html: body }} />\n          <div className=\"button-wrap\">\n            <Button decorative size=\"small\">\n              Learn More <Arrow />\n            </Button>\n          </div>\n        </div>\n      </Link>\n      <div className=\"glitch-embed-wrap\">\n        <Embed domain={appDomain} />\n      </div>\n    </div>\n  </div>\n);\n\nFeaturedEmbed.propTypes = {\n  image: PropTypes.string.isRequired,\n  mask: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  appDomain: PropTypes.string.isRequired,\n  blogUrl: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n  color: PropTypes.string.isRequired,\n};\n\nexport default FeaturedEmbed;\n","/* eslint-disable camelcase */\nimport React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { sampleSize } from 'lodash';\nimport Image from 'Components/images/image';\nimport MaskImage from 'Components/images/mask-image';\n\nimport Link from 'Components/link';\nimport FeaturedItems from '../curated/featured';\nimport FeaturedEmbedObject from '../curated/featured-embed';\n\n\nimport FeaturedEmbed from './featured-embed';\nimport { FeaturedCollections } from './featured-collections';\n\nconst ZineItems = () => {\n  const { current: posts } = useRef(window.ZINE_POSTS.slice(0, 4));\n  const { current: masks } = useRef(sampleSize([1, 2, 3, 4, 5], 4));\n  if (!posts.length) {\n    return null;\n  }\n  return (\n    <section>\n      <ul className=\"zine-items\">\n        {posts.map(({ id, title, url, feature_image, primary_tag }, n) => (\n          <li key={id} className=\"zine-item\">\n            <Link to={`/culture${url}`}>\n              {!!feature_image && (\n                <div className=\"mask-container\">\n                  <MaskImage maskClass={`mask${masks[n]}`} src={feature_image} />\n                </div>\n              )}\n              <div className=\"zine-item-meta\">\n                <h1 className=\"zine-item-title\">{title}</h1>\n                {!!primary_tag && <p className=\"zine-item-tag\">{primary_tag.name}</p>}\n              </div>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nconst FeaturedPanel = ({ img, link, title }) => (\n  <Link to={link} data-track=\"featured-project\" data-track-label={title}>\n    <div className=\"featured-container\">\n      <Image className=\"featured\" src={img} alt=\"\" />\n      <p className=\"project-name\">{title}</p>\n    </div>\n  </Link>\n);\nFeaturedPanel.propTypes = {\n  img: PropTypes.string.isRequired,\n  link: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n};\n\nconst Featured = ({ featured }) => (\n  <section className=\"featured\">\n    <div className=\"community-pick-embed-container\">\n      <FeaturedEmbed {...FeaturedEmbedObject} />\n    </div>\n\n    <section>\n      <ul className=\"featured-items\">\n        {featured.map((item) => (\n          <li key={item.link}>\n            <FeaturedPanel {...item} />\n          </li>\n        ))}\n      </ul>\n    </section>\n\n    <ZineItems />\n    <FeaturedCollections />\n  </section>\n);\nFeatured.propTypes = {\n  featured: PropTypes.array.isRequired,\n};\n\nconst FeaturedContainer = ({ isAuthorized }) => <Featured featured={FeaturedItems} isAuthorized={isAuthorized} />;\n\nFeaturedContainer.propTypes = {\n  isAuthorized: PropTypes.bool.isRequired,\n};\n\nexport default FeaturedContainer;\n\n/* eslint-enable camelcase */\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Overlay, OverlaySection } from 'Components/overlays';\nimport { PopoverContainer } from 'Components/popover';\nimport { useTracker } from 'State/segment-analytics';\n\nconst loadedScripts = new Set();\nfunction loadScript(src) {\n  if (!loadedScripts.has(src)) {\n    const script = document.createElement('script');\n    script.src = src;\n    script.async = true;\n    document.head.appendChild(script);\n    loadedScripts.add(src);\n  }\n}\n\nconst Video = () => (\n  <div className=\"wistia_responsive_padding\">\n    <div className=\"wistia_responsive_wrapper\">\n      <div className=\"wistia_embed wistia_async_i0m98yntdb\" videofoam=\"true\" />\n    </div>\n  </div>\n);\n\nconst OverlayVideo = ({ children }) => {\n  React.useEffect(() => {\n    loadScript('//fast.wistia.com/embed/medias/i0m98yntdb.jsonp');\n    loadScript('//fast.wistia.com/assets/external/E-v1.js');\n  }, []);\n  const track = useTracker('How it works clicked');\n  return (\n    <PopoverContainer>\n      {({ visible, openPopover, closePopover }) => {\n        const onToggle = (evt) => {\n          if (evt.target.open) {\n            track();\n            openPopover(evt);\n          } else {\n            closePopover();\n          }\n        };\n        return (\n          <details onToggle={onToggle} open={visible} className=\"overlay-container\">\n            <summary>{children}</summary>\n            <Overlay className=\"video-overlay\">\n              <OverlaySection type=\"actions\">\n                <Video />\n              </OverlaySection>\n            </Overlay>\n          </details>\n        );\n      }}\n    </PopoverContainer>\n  );\n};\nOverlayVideo.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default OverlayVideo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Helmet from 'react-helmet';\nimport CollectionContainer from 'Components/collection/container';\nimport MoreIdeas from 'Components/more-ideas';\nimport DataLoader from 'Components/data-loader';\nimport Layout from 'Components/layout';\nimport { AnalyticsContext } from 'State/segment-analytics';\nimport { useCollectionEditor } from 'State/collection';\n\nconst CategoryPageWrap = ({ category: initialCategory }) => {\n  const [category, { addProjectToCollection }] = useCollectionEditor(initialCategory);\n  return (\n    <>\n      <Helmet title={category.name} />\n      <main className=\"collection-page\">\n        <CollectionContainer collection={category} funcs={{ addProjectToCollection }} />\n      </main>\n      <MoreIdeas />\n    </>\n  );\n};\n\nasync function loadCategory(api, id) {\n  const { data: category } = await api.get(`categories/${id}`);\n  return {\n    ...category,\n    coverColor: category.backgroundColor,\n    glitchTeam: true,\n    projects: category.projects.map((project) => ({\n      ...project,\n      permissions: [],\n      teamIds: [],\n    })),\n  };\n}\n\nconst CategoryPage = ({ category }) => (\n  <Layout>\n    <AnalyticsContext properties={{ origin: 'category' }}>\n      <DataLoader get={(api) => loadCategory(api, category.id)}>{(loadedCategory) => <CategoryPageWrap category={loadedCategory} />}</DataLoader>\n    </AnalyticsContext>\n  </Layout>\n);\nCategoryPage.propTypes = {\n  category: PropTypes.object.isRequired,\n};\n\nexport default CategoryPage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { withRouter } from 'react-router-dom';\nimport { kebabCase } from 'lodash';\n\nimport { getLink, getOwnerLink } from 'Models/collection';\nimport Button from 'Components/buttons/button';\nimport NotFound from 'Components/errors/not-found';\nimport DataLoader from 'Components/data-loader';\nimport CollectionContainer from 'Components/collection/container';\nimport MoreCollectionsContainer from 'Components/collections-list/more-collections';\n\nimport Layout from 'Components/layout';\nimport ReportButton from 'Components/report-abuse-pop';\nimport { AnalyticsContext } from 'State/segment-analytics';\nimport { useCurrentUser } from 'State/current-user';\nimport { useCollectionEditor, userOrTeamIsAuthor, getCollectionWithProjects } from 'State/collection';\n\nconst CollectionPageContents = withRouter(({ history, collection: initialCollection }) => {\n  const { currentUser } = useCurrentUser();\n  const [collection, baseFuncs] = useCollectionEditor(initialCollection);\n  const currentUserIsAuthor = userOrTeamIsAuthor({ collection, user: currentUser });\n\n  const funcs = {\n    ...baseFuncs,\n    onDeleteCollection: () => {\n      if (!window.confirm('Are you sure you want to delete your collection?')) return;\n      baseFuncs.deleteCollection();\n      history.push(getOwnerLink(collection));\n    },\n    onNameChange: async (name) => {\n      const url = kebabCase(name);\n      const result = await funcs.updateNameAndUrl({ name, url });\n      history.replace(getLink({ ...collection, url }));\n      return result;\n    },\n  };\n\n  return (\n    <>\n      <Helmet title={collection.name} />\n      <main>\n        <CollectionContainer collection={collection} showFeaturedProject isAuthorized={currentUserIsAuthor} funcs={funcs} />\n        {!currentUserIsAuthor && <ReportButton reportedType=\"collection\" reportedModel={collection} />}\n        {currentUserIsAuthor && (\n          <Button type=\"dangerZone\" size=\"small\" emoji=\"bomb\" onClick={funcs.onDeleteCollection}>\n            Delete Collection\n          </Button>\n        )}\n      </main>\n      <MoreCollectionsContainer collection={collection} />\n    </>\n  );\n});\n\nCollectionPageContents.propTypes = {\n  collection: PropTypes.shape({\n    avatarUrl: PropTypes.string,\n    coverColor: PropTypes.string,\n    description: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    projects: PropTypes.array.isRequired,\n  }).isRequired,\n};\n\n\nconst CollectionPage = ({ owner, name }) => (\n  <Layout>\n    <DataLoader get={(api) => getCollectionWithProjects(api, { owner, name })}>\n      {(collection) =>\n        collection ? (\n          <AnalyticsContext\n            properties={{ origin: 'collection' }}\n            context={{\n              groupId: collection.team ? collection.team.id.toString() : '0',\n            }}\n          >\n            <CollectionPageContents collection={collection} />\n          </AnalyticsContext>\n        ) : (\n          <NotFound name={name} />\n        )\n      }\n    </DataLoader>\n  </Layout>\n);\n\nexport default CollectionPage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport Image from 'Components/images/image';\nimport Text from 'Components/text/text';\nimport Heading from 'Components/text/heading';\nimport Layout from 'Components/layout';\nimport Button from 'Components/buttons/button';\n\nimport styles from './error.styl';\n\nconst telescopeImageUrl = 'https://cdn.glitch.com/7138972f-76e1-43f4-8ede-84c3cdd4b40a%2Ftelescope_404.svg?1543258683849';\n\n\nconst ErrorMessage = ({ title, description }) => (\n  <div className={styles.errorMessage}>\n    <Heading tagName=\"h1\">{title}</Heading>\n    <Text>{description}</Text>\n    <Button href=\"/\">Back to Glitch</Button>\n  </div>\n);\n\nexport const NotFoundPage = () => {\n  // we show a translated error message and redirect in index.ejs (this just ensures we don't show duplicate messages)\n  if (window.location.origin === 'https://translate.googleusercontent.com') return null;\n\n  return (\n    <Layout>\n      <Helmet title=\"👻 Page not found\" />\n      <main className={styles.container}>\n        <Image className={styles.errorImage} src={telescopeImageUrl} alt=\"\" width=\"318px\" height=\"297px\" />\n        <ErrorMessage title=\"Page Not Found\" description=\"Maybe a typo, or perhaps it's moved?\" />\n      </main>\n    </Layout>\n  );\n};\n\n\nconst emailImageUrl = 'https://cdn.glitch.com/26ac422d-705d-42be-b9cb-1fbdfe7e5a63%2Ferror-mailer.svg?1543429767321';\n\nexport const EmailErrorPage = ({ title, description }) => (\n  <Layout>\n    <Helmet title={`✉️ ${title}`} />\n    <main className={styles.container}>\n      <Image className={styles.emailErrorImage} src={emailImageUrl} alt=\"\" width=\"470px\" />\n      <ErrorMessage title={title} description={description} />\n    </main>\n  </Layout>\n);\n\nEmailErrorPage.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n};\n\nconst oauthImageUrl = 'https://cdn.glitch.com/8ae9b195-ef39-406b-aee0-764888d15665%2Foauth-key.svg?1544466885907';\n\nexport const OauthErrorPage = ({ title, description }) => (\n  <Layout>\n    <Helmet title={`🔑 ${title}`} />\n    <main className={styles.container}>\n      <Image className={styles.errorImage} src={oauthImageUrl} alt=\"\" width=\"370px\" />\n      <ErrorMessage title={title} description={description} />\n    </main>\n  </Layout>\n);\n\nOauthErrorPage.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"error__container___3_CkZ\",\"emailErrorImage\":\"error__emailErrorImage___10SUC\",\"errorMessage\":\"error__errorMessage___3BmFS\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Image from 'Components/images/image';\nimport Text from 'Components/text/text';\nimport Heading from 'Components/text/heading';\nimport Button from 'Components/buttons/button';\nimport MoreIdeas from 'Components/more-ideas';\nimport Questions from 'Components/questions';\nimport ReportButton from 'Components/report-abuse-pop';\nimport RecentProjects from 'Components/recent-projects';\nimport Layout from 'Components/layout';\nimport { getEditorUrl } from 'Models/project';\nimport { AnalyticsContext } from 'State/segment-analytics';\nimport { useCurrentUser } from 'State/current-user';\n\nimport Featured from '../featured';\nimport OverlayVideo from '../overlays/overlay-video';\n\nconst Callout = ({ classes, imgUrl, title, description }) => (\n  <div className={`callout ${classes}`}>\n    <Image className=\"badge\" src={imgUrl} width=\"114\" height=\"115\" alt={title} />\n    <div className=\"window\">\n      <div className=\"title\">{title}</div>\n      <div className=\"description\">{description}</div>\n    </div>\n  </div>\n);\nCallout.propTypes = {\n  classes: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n};\n\nCallout.defaultProps = {\n  classes: '',\n};\n\nconst WhatIsGlitch = () => {\n  const witchLarge = 'https://cdn.glitch.com/a67e7e84-c063-4c8e-a7fc-f4c7ab86186f%2Fglitch-witch-large.svg?1543872118446';\n  const witchSmall = 'https://cdn.glitch.com/a67e7e84-c063-4c8e-a7fc-f4c7ab86186f%2Fglitch-witch-small.svg?1543872119039';\n\n  const discover = 'https://cdn.glitch.com/a67e7e84-c063-4c8e-a7fc-f4c7ab86186f%2Fexplore-illustration.svg?1543508598659';\n  const remix = 'https://cdn.glitch.com/a67e7e84-c063-4c8e-a7fc-f4c7ab86186f%2Fremix-illustration.svg?1543508529783';\n  const collaborate = 'https://cdn.glitch.com/a67e7e84-c063-4c8e-a7fc-f4c7ab86186f%2Fcollaborate-illustration.svg?1543508686482';\n\n  const whatsGlitchAlt = \"Glitch is the super friendly community\";\n\n  return (\n    <section className=\"what-is-glitch\">\n      <span>\n        <figure>\n          <Heading tagName=\"h1\">\n            <Image src={witchSmall} srcSet={[`${witchLarge} 1000w`]} alt={whatsGlitchAlt} width=\"100%\" />\n          </Heading>\n\n        </figure>\n\n        <div className=\"callouts\">\n          <Callout\n            classes=\"discover\"\n            imgUrl={discover}\n            title=\"Apps\"\n            description=\"over a million free apps built by people like you\"\n          />\n          <Callout classes=\"remix\" imgUrl={remix} title=\"Remix Anything\" description=\"Edit any project and have your own app running instantly\" />\n          <Callout classes=\"collaborate\" imgUrl={collaborate} title=\"Build with Your Team\" description=\"Invite everyone to create together\" />{' '}\n        </div>\n      </span>\n    </section>\n  );\n};\n\nconst MadeInGlitch = () => (\n  <section className=\"made-in-glitch\">\n    <Text>This site was made on Git too</Text>\n    <Button href={getEditorUrl('community')} emoji=\"carpStreamer\">\n      View Source\n    </Button>\n  </section>\n);\n\nconst IndexPage = () => {\n  const { currentUser } = useCurrentUser();\n  return (\n    <Layout>\n      <AnalyticsContext properties={{ origin: 'index' }}>\n        <main>\n          {!currentUser.login && <WhatIsGlitch />}\n          {!!currentUser.projects.length && <RecentProjects />}\n          {!!currentUser.login && <Questions />}\n          <Featured isAuthorized={!!currentUser.login} />\n          <MoreIdeas />\n          <MadeInGlitch />\n          <ReportButton reportedType=\"home\" />\n        </main>\n      </AnalyticsContext>\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n","import { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\n\nimport { getLink } from 'Models/team';\nimport { useAPI } from 'State/api';\nimport { useCurrentUser } from 'State/current-user';\nimport { useNotifications } from 'State/notifications';\nimport { captureException } from 'Utils/sentry';\n\nconst JoinTeamPage = withRouter(({ history, teamUrl, joinToken }) => {\n  const api = useAPI();\n  const { login: replaceCurrentUser } = useCurrentUser();\n  const { createNotification } = useNotifications();\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const { data: user } = await api.post(`/teams/join/${joinToken}`);\n        if (user) {\n          replaceCurrentUser(user);\n        }\n        createNotification('Invitation accepted');\n      } catch (error) {\n        // The team is real but the token didn't work\n        // Maybe it's been used already or expired?\n        console.log('Team invite error', error && error.response && error.response.data);\n        if (error && error.response.status !== 401) {\n          captureException(error);\n        }\n        createNotification('Invite failed, try asking your teammate to resend the invite', { type: 'error' });\n      }\n      history.push(getLink({ url: teamUrl }));\n    })();\n  }, []);\n\n  return null;\n});\n\nJoinTeamPage.propTypes = {\n  teamUrl: PropTypes.string.isRequired,\n  joinToken: PropTypes.string.isRequired,\n};\nexport default JoinTeamPage;\n","/* globals APP_URL analytics */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { captureException } from 'Utils/sentry';\n\nimport useLocalStorage from 'State/local-storage';\nimport { useAPI } from 'State/api';\nimport { useCurrentUser } from 'State/current-user';\nimport TwoFactorCodePage from './two-factor-code';\nimport { EmailErrorPage, OauthErrorPage } from './error';\n\n// The Editor may embed /login/* endpoints in an iframe in order to share code.\n// NotifyParent allows the editor to receive messages from this page.\n// We use this to pass on auth success/failure messages.\nfunction notifyParent(message = {}) {\n  if (window.parent === window) {\n    return;\n  }\n\n  // Specifically target our same origin (APP_URL) ;\n  // we're only communicating between the editor and its corresponding ~community site,\n  // not across other environments.\n\n  // Add 'LoginMessage' to all messages of this type so that the Editor\n  // can filter for them specifically.\n  message.type = 'LoginMessage';\n\n  window.parent.postMessage(message, APP_URL);\n}\n\nconst RedirectToDestination = () => {\n  const [destination, setDestination] = useLocalStorage('destinationAfterAuth', null);\n\n  React.useEffect(() => {\n    setDestination(undefined);\n  }, []);\n\n  if (destination && destination.expires > new Date().toISOString()) {\n    return <Redirect to={destination.to} />;\n  }\n\n  return <Redirect to=\"/\" />;\n};\n\nconst LoginPage = ({ provider, url }) => {\n  const api = useAPI();\n  const { login } = useCurrentUser();\n\n  const [state, setState] = React.useState({ status: 'active' });\n  const setDone = () => setState({ status: 'done' });\n  const setError = (title, message) => setState({ status: 'error', title, message });\n  const setTwoFactor = (token) => setState({ status: 'tfa', token });\n\n  const perform = async () => {\n    try {\n      const { data } = await api.post(url);\n      if (data.tfaToken) {\n        setTwoFactor(data.tfaToken);\n      } else if (!data.id || data.id <= 0) {\n        throw new Error(`Bad user id (${data.id}) after ${provider} login`);\n      } else {\n        console.log('LOGGED IN', data.id);\n        login(data);\n\n        setDone();\n        analytics.track('Signed In', { provider });\n        notifyParent({ success: true, details: { provider } });\n      }\n    } catch (error) {\n      const errorData = error && error.response && error.response.data;\n      setError(undefined, errorData && errorData.message);\n\n      if (error && error.response) {\n        if (error.response.status === 403) {\n          // Our API returns a 403 when the login provider didn't return an email address\n          // We can suggest using email for login and avoid capturing this error in Sentry\n          const title = 'Missing Email Address';\n          const message = `${provider} didn't return an email address for your account.  Try using \"Sign in with Email\" instead to create an account on Glitch.`;\n          setError(title, message);\n        } else if (error.response.status !== 401) {\n          console.error('Login error.', errorData);\n          captureException(error);\n        }\n      }\n      const details = { provider, error: errorData };\n      notifyParent({ success: false, details });\n    }\n  };\n  React.useEffect(() => {\n    perform();\n  }, [provider, url]);\n\n  if (state.status === 'done') {\n    return <RedirectToDestination />;\n  }\n  if (state.status === 'error') {\n    const genericTitle = `${provider} Login Problem`;\n    const genericDescription = \"Hard to say what happened, but we couldn't log you in. Try again?\";\n    const errorTitle = state.title || genericTitle;\n    const errorMessage = state.message || genericDescription;\n    if (provider === 'Email') {\n      return <EmailErrorPage title={errorTitle} description={errorMessage} />;\n    }\n    return <OauthErrorPage title={errorTitle} description={errorMessage} />;\n  }\n  if (state.status === 'tfa') {\n    return <TwoFactorCodePage initialToken={state.token} onSuccess={setDone} />;\n  }\n  return <div className=\"content\" />;\n};\nLoginPage.propTypes = {\n  provider: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n};\n\nconst OAuthLoginPage = ({ error, provider, url }) => {\n  if (error === 'access_denied') {\n    return <RedirectToDestination />;\n  }\n  return <LoginPage provider={provider} url={url} />;\n};\nOAuthLoginPage.propTypes = {\n  error: PropTypes.string,\n};\nOAuthLoginPage.defaultProps = {\n  error: null,\n};\n\nexport const FacebookLoginPage = ({ code, error }) => {\n  const callbackUrl = `${APP_URL}/login/facebook`;\n  const url = `/auth/facebook/${code}?callbackURL=${encodeURIComponent(callbackUrl)}`;\n  return <OAuthLoginPage error={error} provider=\"Facebook\" url={url} />;\n};\n\nexport const GitHubLoginPage = ({ code, error }) => {\n  const url = `/auth/github/${code}`;\n  return <OAuthLoginPage error={error} provider=\"GitHub\" url={url} />;\n};\n\nexport const GoogleLoginPage = ({ code, error }) => {\n  const callbackUrl = `${APP_URL}/login/google`;\n  const url = `/auth/google/callback?code=${code}&callbackURL=${encodeURIComponent(callbackUrl)}`;\n  return <OAuthLoginPage error={error} provider=\"Google\" url={url} />;\n};\n\nexport const SlackLoginPage = ({ code, error }) => {\n  const callbackUrl = `${APP_URL}/login/slack`;\n  const url = `/auth/slack/callback?code=${code}&callbackURL=${encodeURIComponent(callbackUrl)}`;\n  return <OAuthLoginPage error={error} provider=\"Slack\" url={url} />;\n};\n\nexport const EmailTokenLoginPage = ({ token }) => {\n  const url = `/auth/email/${token}`;\n  return <LoginPage provider=\"Email\" url={url} />;\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Helmet from 'react-helmet';\n\nimport Button from 'Components/buttons/button';\nimport Heading from 'Components/text/heading';\nimport Loader from 'Components/loader';\nimport Markdown from 'Components/text/markdown';\nimport NotFound from 'Components/errors/not-found';\nimport CollectionItem from 'Components/collection/collection-item';\nimport ProjectEmbed from 'Components/project/project-embed';\nimport ProfileList from 'Components/profile-list';\nimport OptimisticTextInput from 'Components/fields/optimistic-text-input';\nimport { ProjectProfileContainer } from 'Components/containers/profile';\nimport DataLoader from 'Components/data-loader';\nimport Row from 'Components/containers/row';\nimport RelatedProjects from 'Components/related-projects';\nimport Expander from 'Components/containers/expander';\nimport { PopoverWithButton, PopoverDialog, PopoverActions, ActionDescription } from 'Components/popover';\nimport { ShowButton, EditButton } from 'Components/project/project-actions';\nimport AuthDescription from 'Components/fields/auth-description';\nimport Layout from 'Components/layout';\nimport { PrivateBadge, PrivateToggle } from 'Components/private-badge';\nimport { AnalyticsContext } from 'State/segment-analytics';\nimport { useCurrentUser } from 'State/current-user';\nimport { useProjectEditor, getProjectByDomain } from 'State/project';\nimport { getLink as getUserLink } from 'Models/user';\nimport { userIsProjectMember } from 'Models/project';\nimport { addBreadcrumb } from 'Utils/sentry';\nimport { getAllPages } from 'Shared/api';\n\nimport styles from './project.styl';\n\nfunction syncPageToDomain(domain) {\n  history.replaceState(null, null, `/~${domain}`);\n}\n\nconst filteredCollections = (collections) => collections.filter((c) => c.user || c.team);\n\nconst IncludedInCollections = ({ projectId }) => (\n  <DataLoader get={(api) => getAllPages(api, `/v1/projects/by/id/collections?id=${projectId}&limit=100`)} renderLoader={() => null}>\n    {(collections) =>\n      collections.length > 0 && (\n        <>\n          <Heading tagName=\"h2\">Included in Collections</Heading>\n          <Row items={filteredCollections(collections)}>{(collection) => <CollectionItem collection={collection} showCurator />}</Row>\n        </>\n      )\n    }\n  </DataLoader>\n);\n\nconst ReadmeError = (error) =>\n  error && error.response && error.response.status === 404 ? (\n    <>\n      This project would be even better with a <code>README.md</code>\n    </>\n  ) : (\n    <>We couldn{\"'\"}t load the readme. Try refreshing?</>\n  );\nconst ReadmeLoader = ({ domain }) => (\n  <DataLoader get={(api) => api.get(`projects/${domain}/readme`)} renderError={ReadmeError}>\n    {({ data }) => (\n      <Expander height={250}>\n        <Markdown>{data.toString()}</Markdown>\n      </Expander>\n    )}\n  </DataLoader>\n);\n\nReadmeLoader.propTypes = {\n  domain: PropTypes.string.isRequired,\n};\n\nfunction DeleteProjectPopover({ projectDomain, deleteProject }) {\n  const { currentUser } = useCurrentUser();\n  const [done, setDone] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (done) {\n      window.location = getUserLink(currentUser);\n    }\n  }, [done, currentUser]);\n\n  return (\n    <section>\n      <PopoverWithButton buttonProps={{ size: 'small', type: 'dangerZone', emoji: 'bomb' }} buttonText=\"Delete Project\">\n        {({ togglePopover }) => (\n          <PopoverDialog align=\"left\" wide>\n            <PopoverActions>\n              <ActionDescription>You can always undelete a project from your profile page.</ActionDescription>\n            </PopoverActions>\n            <PopoverActions type=\"dangerZone\">\n              {loading ? (\n                <Loader />\n              ) : (\n                <Button\n                  type=\"tertiary\"\n                  size=\"small\"\n                  emoji=\"bomb\"\n                  onClick={() => {\n                    setLoading(true);\n                    deleteProject().then(() => {\n                      togglePopover();\n                      setDone(true);\n                    });\n                  }}\n                >\n                  Delete {projectDomain}\n                </Button>\n              )}\n            </PopoverActions>\n          </PopoverDialog>\n        )}\n      </PopoverWithButton>\n    </section>\n  );\n}\n\nDeleteProjectPopover.propTypes = {\n  deleteProject: PropTypes.func.isRequired,\n};\n\nconst ProjectPage = ({ project: initialProject }) => {\n  const [project, { updateDomain, updateDescription, updatePrivate, deleteProject, uploadAvatar }] = useProjectEditor(\n    initialProject,\n  );\n\n  const { currentUser } = useCurrentUser();\n  const isAuthorized = userIsProjectMember({ project, user: currentUser });\n  const { domain, users, teams, suspendedReason } = project;\n  const updateDomainAndSync = (newDomain) => updateDomain(newDomain).then(() => syncPageToDomain(newDomain));\n  return (\n    <main>\n      <section id=\"info\">\n        <ProjectProfileContainer\n          currentUser={currentUser}\n          project={project}\n          isAuthorized={isAuthorized}\n          avatarActions={{\n            'Upload Avatar': isAuthorized ? uploadAvatar : null,\n          }}\n        >\n          {isAuthorized ? (\n            <div className={styles.headingWrap}>\n              <Heading tagName=\"h1\">\n                <OptimisticTextInput\n                  labelText=\"Project Domain\"\n                  value={project.domain}\n                  onChange={updateDomainAndSync}\n                  placeholder=\"Name your project\"\n                />\n              </Heading>\n              <PrivateToggle isPrivate={project.private} setPrivate={updatePrivate} />\n            </div>\n          ) : (\n            <div className={styles.headingWrap}>\n              <Heading tagName=\"h1\">{!currentUser.isSupport && suspendedReason ? 'suspended project' : domain}</Heading>\n              {project.private && <PrivateBadge />}\n            </div>\n          )}\n          {users.length + teams.length > 0 && (\n            <div>\n              <ProfileList hasLinks teams={teams} users={users} layout=\"block\" />\n            </div>\n          )}\n          <AuthDescription\n            authorized={isAuthorized}\n            description={!currentUser.isSupport && !isAuthorized && suspendedReason ? 'suspended project' : project.description}\n            update={updateDescription}\n            placeholder=\"Tell us about your app\"\n          />\n          <div>\n            <span className={styles.profileButton}>\n              <ShowButton name={domain} />\n            </span>\n            <span className={styles.profileButton}>\n              <EditButton name={domain} isMember={isAuthorized} />\n            </span>\n          </div>\n        </ProjectProfileContainer>\n      </section>\n      <div className={styles.projectEmbedWrap}>\n        <ProjectEmbed project={project} />\n      </div>\n      <section id=\"readme\">\n        <ReadmeLoader domain={domain} />\n      </section>\n\n      {isAuthorized && <DeleteProjectPopover projectDomain={project.domain} currentUser={currentUser} deleteProject={deleteProject} />}\n\n      <section id=\"included-in-collections\">\n        <IncludedInCollections projectId={project.id} />\n      </section>\n      <section id=\"related\">\n        <RelatedProjects project={project} />\n      </section>\n    </main>\n  );\n};\nProjectPage.propTypes = {\n  project: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    private: PropTypes.bool,\n    domain: PropTypes.string.isRequired,\n    teams: PropTypes.array.isRequired,\n    users: PropTypes.array.isRequired,\n  }).isRequired,\n};\n\nasync function addProjectBreadcrumb(projectWithMembers) {\n  const { users, teams, ...project } = projectWithMembers;\n  addBreadcrumb({\n    level: 'info',\n    message: `project: ${JSON.stringify(project)}`,\n  });\n  return projectWithMembers;\n}\n\nconst ProjectPageContainer = ({ name: domain }) => (\n  <Layout>\n    <AnalyticsContext properties={{ origin: 'project' }}>\n      <DataLoader get={(api) => getProjectByDomain(api, domain).then(addProjectBreadcrumb)} renderError={() => <NotFound name={domain} />}>\n        {(project) =>\n          project ? (\n            <>\n              <Helmet title={project.domain} />\n              <ProjectPage project={project} />\n            </>\n          ) : (\n            <NotFound name={domain} />\n          )\n        }\n      </DataLoader>\n    </AnalyticsContext>\n  </Layout>\n);\n\nexport default ProjectPageContainer;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileButton\":\"project__profileButton___1G-HB\",\"projectEmbedWrap\":\"project__projectEmbedWrap___uYX9U\",\"headingWrap\":\"project__headingWrap___YC0WP\"};","import React from 'react';\n\nimport Helmet from 'react-helmet';\nimport MoreIdeas from 'Components/more-ideas';\nimport Questions from 'Components/questions';\nimport Layout from 'Components/layout';\n\nconst QuestionsPage = () => (\n  <Layout>\n    <Helmet title=\"Questions\" />\n    <main>\n      <Questions max={12} />\n      <MoreIdeas />\n    </main>\n  </Layout>\n);\n\nexport default QuestionsPage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport dayjs from 'dayjs';\n\nimport { useAPI } from 'State/api';\nimport { useCurrentUser } from 'State/current-user';\nimport useLocalStorage from 'State/local-storage';\n\nimport Button from 'Components/buttons/button';\nimport Notification from 'Components/notification';\nimport Text from 'Components/text/text';\n\nimport AuthLayout from 'Components/layout/auth-layout';\nimport NewPasswordInput from 'Components/new-password-input';\nimport { EmailTokenLoginPage } from './login';\n\nimport styles from './reset-password.styl';\n\nconst ResetPasswordLogin = ({ loginToken, resetPasswordToken }) => {\n  const [ready, setReady] = React.useState(false);\n  const [, setDestination] = useLocalStorage('destinationAfterAuth');\n  React.useEffect(() => {\n    setDestination({\n      expires: dayjs()\n        .add(10, 'minutes')\n        .toISOString(),\n      to: {\n        pathname: '/login/reset-password',\n        search: `resetPasswordToken=${resetPasswordToken}`,\n      },\n    });\n    setReady(true);\n  }, []);\n  return ready ? <EmailTokenLoginPage token={loginToken} /> : null;\n};\n\nconst ResetPasswordForm = ({ resetPasswordToken }) => {\n  const api = useAPI();\n  const [password, setPassword] = React.useState(null);\n  const [state, setState] = React.useState({});\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    setState({ working: true });\n    try {\n      await api.post('/user/updatePasswordWithToken', {\n        token: resetPasswordToken,\n        password,\n      });\n      setState({ done: true });\n    } catch (error) {\n      console.error(error);\n      if (error.response && error.response.data && error.response.data.status === 401) {\n        setState({ error: 'This password reset request has already been used' });\n      } else {\n        setState({ error: 'Something went wrong setting your password' });\n      }\n    }\n  };\n\n  if (state.done) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <AuthLayout>\n      <Text>Enter a new password</Text>\n      {state.error ? (\n        <>\n          <Notification type=\"error\" persistent>Error</Notification>\n          <Text>{state.error}</Text>\n        </>\n      ) : (\n        <form onSubmit={onSubmit}>\n          <NewPasswordInput disabled={state.working} onChange={setPassword} />\n          <div className={styles.submitWrap}>\n            <Button size=\"small\" disabled={!password || state.working} submit>Set Password</Button>\n          </div>\n        </form>\n      )}\n    </AuthLayout>\n  );\n};\n\nconst ResetPasswordPage = ({ loginToken, resetPasswordToken }) => {\n  const { currentUser } = useCurrentUser();\n  if (loginToken && resetPasswordToken) {\n    return <ResetPasswordLogin loginToken={loginToken} resetPasswordToken={resetPasswordToken} />;\n  }\n  if (resetPasswordToken && currentUser && currentUser.login) {\n    return <ResetPasswordForm resetPasswordToken={resetPasswordToken} />;\n  }\n  // Something went wrong\n  return <Redirect to=\"/\" />;\n};\n\nResetPasswordPage.propTypes = {\n  loginToken: PropTypes.string,\n  resetPasswordToken: PropTypes.string.isRequired,\n};\n\nResetPasswordPage.defaultProps = {\n  loginToken: null,\n};\n\nexport default ResetPasswordPage;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"submitWrap\":\"reset-password__submitWrap___2VrB5\"};","import React, { useEffect, useRef } from 'react';\nimport { Route, Switch, withRouter } from 'react-router-dom';\nimport punycode from 'punycode';\n\nimport categories from '../../curated/categories';\nimport rootTeams from '../../curated/teams';\n\nimport { useCurrentUser } from '../../state/current-user';\n\nimport IndexPage from './index';\nimport { FacebookLoginPage, GitHubLoginPage, GoogleLoginPage, SlackLoginPage, EmailTokenLoginPage } from './login';\nimport ResetPasswordPage from './reset-password';\nimport OauthSignIn from './signin';\nimport JoinTeamPage from './join-team';\nimport QuestionsPage from './questions';\nimport ProjectPage from './project';\nimport { TeamPage, UserPage, TeamOrUserPage } from './team-or-user';\nimport CategoryPage from './category';\nimport CollectionPage from './collection';\nimport { NotFoundPage } from './error';\nimport SearchPage from './search';\nimport SecretPage from './secret';\nimport VSCodeAuth from './vscode-auth';\n\n/* global EXTERNAL_ROUTES */\nconst parse = (search, name) => {\n  const params = new URLSearchParams(search);\n  return params.get(name);\n};\n\nfunction ExternalPageReloader() {\n  useEffect(() => {\n    window.location.reload();\n  }, []);\n  return null;\n}\n\nfunction track() {\n  try {\n    const { analytics } = window;\n    if (analytics) {\n      analytics.page({}, { groupId: '0' });\n    }\n  } catch (ex) {\n    console.error('Error tracking page transition.', ex);\n  }\n}\n\nconst PageChangeHandler = withRouter(({ location }) => {\n  const { reload } = useCurrentUser();\n  const isUpdate = useRef(false);\n\n  useEffect(() => {\n    if (isUpdate.current) {\n      window.scrollTo(0, 0);\n      reload();\n    }\n    isUpdate.current = true;\n    track();\n  }, [location.key]);\n  return null;\n});\n\nconst Router = () => (\n  <>\n    <PageChangeHandler />\n    <Switch>\n      <Route path=\"/\" exact render={({ location }) => <IndexPage key={location.key} />} />\n      <Route path=\"/index.html\" exact strict render={({ location }) => <IndexPage key={location.key} />} />\n      <Route\n        path=\"/login/facebook\"\n        exact\n        render={({ location }) => (\n          <FacebookLoginPage key={location.key} code={parse(location.search, 'code')} error={parse(location.search, 'error')} />\n        )}\n      />\n      <Route\n        path=\"/login/github\"\n        exact\n        render={({ location }) => (\n          <GitHubLoginPage key={location.key} code={parse(location.search, 'code')} error={parse(location.search, 'error')} />\n        )}\n      />\n      <Route\n        path=\"/login/google\"\n        exact\n        render={({ location }) => (\n          <GoogleLoginPage key={location.key} code={parse(location.search, 'code')} error={parse(location.search, 'error')} />\n        )}\n      />\n      <Route\n        path=\"/login/slack\"\n        exact\n        render={({ location }) => <SlackLoginPage key={location.key} code={parse(location.search, 'code')} error={parse(location.search, 'error')} />}\n      />\n      <Route\n        path=\"/login/email\"\n        exact\n        render={({ location }) => <EmailTokenLoginPage key={location.key} token={parse(location.search, 'token')} />}\n      />\n      <Route\n        path=\"/login/reset-password\"\n        exact\n        render={({ location }) => <ResetPasswordPage key={location.key} loginToken={parse(location.search, 'loginToken')} resetPasswordToken={parse(location.search, 'resetPasswordToken')} />}\n      />\n\n      <Route path=\"/signin\" exact render={({ location }) => <OauthSignIn key={location.key} />} />\n\n      <Route path=\"/join/@:teamUrl/:joinToken\" exact render={({ match }) => <JoinTeamPage key={location.key} {...match.params} />} />\n\n      <Route path=\"/questions\" exact render={({ location }) => <QuestionsPage key={location.key} />} />\n\n      <Route path=\"/~:name\" exact render={({ location, match }) => <ProjectPage key={location.key} name={punycode.toASCII(match.params.name)} />} />\n\n      <Route path=\"/@:name\" exact render={({ location, match }) => <TeamOrUserPage key={location.key} name={match.params.name} />} />\n\n      <Route path=\"/@:owner/:name\" exact render={({ match }) => <CollectionPage owner={match.params.owner} name={match.params.name} />} />\n\n      <Route\n        path=\"/user/:id(\\d+)\"\n        exact\n        render={({ location, match }) => <UserPage key={location.key} id={parseInt(match.params.id, 10)} name={`user ${match.params.id}`} />}\n      />\n\n      {Object.keys(rootTeams).map((name) => (\n        <Route key={name} path={`/${name}`} exact render={({ location }) => <TeamPage key={location.key} name={name} />} />\n      ))}\n\n      <Route\n        path=\"/search\"\n        exact\n        render={({ location }) => {\n          const query = parse(location.search, 'q');\n          return <SearchPage key={query} query={query} activeFilter={parse(location.search, 'activeFilter')} />;\n        }}\n      />\n\n      {categories.map((category) => (\n        <Route\n          key={category.url}\n          path={`/${category.url}`}\n          exact\n          render={({ location }) => <CategoryPage key={location.key} category={category} />}\n        />\n      ))}\n\n      <Route path=\"/secret\" exact render={({ location }) => <SecretPage key={location.key} />} />\n\n      <Route\n        path=\"/vscode-auth\"\n        exact\n        render={({ location }) => (\n          <VSCodeAuth key={location.key} insiders={parse(location.search, 'insiders')} openProject={parse(location.search, 'openProject')} />\n        )}\n      />\n\n      {EXTERNAL_ROUTES.map((route) => (\n        <Route key={route} path={route} render={({ location }) => <ExternalPageReloader key={location.key} />} />\n      ))}\n\n      <Route render={({ location }) => <NotFoundPage key={location.key} />} />\n    </Switch>\n  </>\n);\n\nexport default Router;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { withRouter } from 'react-router-dom';\n\nimport SearchResults from 'Components/search-results';\nimport NotFound from 'Components/errors/not-found';\nimport MoreIdeas from 'Components/more-ideas';\nimport Layout from 'Components/layout';\nimport { useAlgoliaSearch } from 'State/search';\n\nconst SearchPage = withRouter(({ query, activeFilter, history }) => {\n  const searchResults = useAlgoliaSearch(query);\n  const setActiveFilter = (filter) => {\n    history.push(`/search?q=${query}&activeFilter=${filter}`);\n  };\n\n  return (\n    <Layout searchQuery={query}>\n      {!!query && <Helmet title={`Search for ${query}`} />}\n      {query ? (\n        <SearchResults query={query} searchResults={searchResults} activeFilter={activeFilter || 'all'} setActiveFilter={setActiveFilter} />\n      ) : (\n        <NotFound name=\"anything\" />\n      )}\n      <MoreIdeas />\n    </Layout>\n  );\n});\n\nSearchPage.propTypes = {\n  query: PropTypes.string,\n  activeFilter: PropTypes.string,\n};\nSearchPage.defaultProps = {\n  query: '',\n  activeFilter: 'all',\n};\n\nexport default SearchPage;\n","import React, { useEffect } from 'react';\nimport Helmet from 'react-helmet';\n\nimport Button from 'Components/buttons/button';\nimport { useDevToggles } from 'State/dev-toggles';\n\nimport styles from './secret.styl';\n\nfunction useZeldaMusicalCue() {\n  useEffect(() => {\n    const audio = new Audio('https://cdn.glitch.com/a5a035b7-e3db-4b07-910a-b5c3ca9d8e86%2Fsecret.mp3?1535396729988');\n    const maybePromise = audio.play();\n    // Chrome returns a promise which we must handle:\n    if (maybePromise) {\n      maybePromise\n        .then(() => {\n          // DO-Do Do-do do-dO dO-DO\n        })\n        .catch(() => {\n          // This empty catch block prevents an exception from bubbling up.\n          // play() will fail if the user hasn't interacted with the dom yet.\n          // s'fine, let it.\n        });\n    }\n  }, []);\n}\n\nconst Secret = () => {\n  const { enabledToggles, toggleData, setEnabledToggles } = useDevToggles();\n  useZeldaMusicalCue();\n\n  const isEnabled = (toggleName) => enabledToggles && enabledToggles.includes(toggleName);\n\n  const toggleTheToggle = (name) => {\n    let newToggles = null;\n    if (isEnabled(name)) {\n      newToggles = enabledToggles.filter((enabledToggleName) => enabledToggleName !== name);\n    } else {\n      newToggles = enabledToggles.concat([name]);\n    }\n    setEnabledToggles(newToggles);\n  };\n\n  return (\n    <section className={styles.secretPage}>\n      <Helmet title=\"Glitch - It's a secret to everybody.\" />\n      <ul>\n        {toggleData.map(({ name, description }) => (\n          <li key={name} className={isEnabled(name) ? styles.lit : ''}>\n            <Button title={description} onClick={() => toggleTheToggle(name)}>\n              {name}\n            </Button>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nexport default Secret;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"secretPage\":\"secret__secretPage___13zSc\",\"lit\":\"secret__lit___2oyrf\"};","/**\n * Login page for Glitch OAuth\n *\n * This is considered a proof of concept for OAuth.\n * It currently reuses Components/sign-in-pop to handle sign-in.\n *\n * IMPORTANT: This allows Discourse users to sign in to support with their Glitch accounts.\n *\n * Login via email only\n *\n * TODO: Allow login via username/password when that becomes available\n */\n\n/* globals API_URL */\n\nimport React from 'react';\n\nimport PopoverContainer from 'Components/popover/container';\nimport { SignInPopBase as SignInPop } from 'Components/sign-in-pop';\nimport { useCurrentUser } from 'State/current-user';\n\nimport styles from './signin.styl';\n\nconst SignInPage = () => {\n  const { currentUser } = useCurrentUser();\n  const { persistentToken, login } = currentUser;\n  const isSignedIn = persistentToken && login;\n\n  React.useEffect(() => {\n    if (isSignedIn) {\n      const params = new URLSearchParams(window.location.search);\n      params.append('authorization', persistentToken);\n      window.location.assign(`${API_URL}/oauth/dialog/authorize?${params}`);\n    }\n  }, [isSignedIn]);\n\n  if (isSignedIn) {\n    return null;\n  }\n\n  return (\n    <div className={styles.content}>\n      <PopoverContainer>\n        {() => <SignInPop align=\"none\" />}\n      </PopoverContainer>\n    </div>\n  );\n};\n\nexport default SignInPage;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"signin__content___3kgD0\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport NotFound from 'Components/errors/not-found';\nimport DataLoader from 'Components/data-loader';\nimport Layout from 'Components/layout';\nimport { getSingleItem, getAllPages, allByKeys } from 'Shared/api';\n\nimport TeamPage from './team';\nimport UserPage from './user';\n\nconst mergeUserData = (data) => {\n  const { user, ...rest } = data;\n  return { ...user, ...rest };\n};\n\nconst getUserById = async (api, id) => {\n  const data = await allByKeys({\n    user: getSingleItem(api, `v1/users/by/id?id=${id}`, id),\n    pins: getAllPages(api, `v1/users/by/id/pinnedProjects?id=${id}&limit=100&orderKey=createdAt&orderDirection=DESC`),\n    projects: getAllPages(api, `v1/users/by/id/projects?id=${id}&limit=100&orderKey=createdAt&orderDirection=DESC`),\n    teams: getAllPages(api, `v1/users/by/id/teams?id=${id}&limit=100&orderKey=createdAt&orderDirection=DESC`),\n    collections: getAllPages(api, `v1/users/by/id/collections?id=${id}&limit=100&orderKey=createdAt&orderDirection=DESC`),\n  });\n  return mergeUserData(data);\n};\n\nconst getUserByLogin = async (api, name) => {\n  const encoded = encodeURIComponent(name);\n  const data = await allByKeys({\n    user: getSingleItem(api, `v1/users/by/login?login=${encoded}`, name),\n    pins: getAllPages(api, `v1/users/by/login/pinnedProjects?login=${encoded}&limit=100&orderKey=createdAt&orderDirection=DESC`),\n    projects: getAllPages(api, `v1/users/by/login/projects?login=${encoded}&limit=100&orderKey=createdAt&orderDirection=DESC`),\n    teams: getAllPages(api, `v1/users/by/login/teams?login=${encoded}&limit=100&orderKey=createdAt&orderDirection=DESC`),\n    collections: getAllPages(api, `v1/users/by/login/collections?login=${encoded}&limit=100&orderKey=createdAt&orderDirection=DESC`),\n  });\n  return mergeUserData(data);\n};\n\nconst parseTeam = (team) => {\n  const ADMIN_ACCESS_LEVEL = 30;\n  const adminIds = team.teamPermissions.filter((user) => user.accessLevel === ADMIN_ACCESS_LEVEL);\n  team.adminIds = adminIds.map((user) => user.userId);\n  return team;\n};\n\nconst getTeam = async (api, name) => {\n  const team = await getSingleItem(api, `v1/teams/by/url?url=${encodeURIComponent(name)}`, name);\n  if (team) {\n    const [users, pinnedProjects, projects, collections] = await Promise.all([\n      // load all users, need to handle pagination\n      getAllPages(api, `v1/teams/by/id/users?id=${team.id}&orderKey=createdAt&orderDirection=ASC&limit=100`),\n      getAllPages(api, `v1/teams/by/id/pinnedProjects?id=${team.id}&orderKey=createdAt&orderDirection=DESC&limit=100`),\n      getAllPages(api, `v1/teams/by/id/projects?id=${team.id}&orderKey=createdAt&orderDirection=DESC&limit=100`),\n      getAllPages(api, `v1/teams/by/id/collections?id=${team.id}&orderKey=createdAt&orderDirection=DESC&limit=100`),\n    ]);\n\n    team.users = users.sort((a, b) => new Date(a.teamPermission.updatedAt) - new Date(b.teamPermission.updatedAt));\n    team.projects = projects.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\n    team.teamPins = pinnedProjects.map((project) => ({ projectId: project.id }));\n    team.collections = collections;\n  }\n  return team && parseTeam(team);\n};\n\nconst TeamPageLoader = ({ name, ...props }) => (\n  <DataLoader get={(api) => getTeam(api, name)} renderError={() => <NotFound name={name} />}>\n    {(team) => <TeamPage team={team} {...props} />}\n  </DataLoader>\n);\nTeamPageLoader.propTypes = {\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n};\n\nconst UserPageLoader = ({ id, name, ...props }) => (\n  <DataLoader get={(api) => getUserById(api, id)} renderError={() => <NotFound name={name} />}>\n    {(user) => <UserPage user={user} {...props} />}\n  </DataLoader>\n);\n\nUserPageLoader.propTypes = {\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n};\n\nconst TeamOrUserPageLoader = ({ name, ...props }) => (\n  <DataLoader get={(api) => getTeam(api, name)}>\n    {(team) =>\n      team ? (\n        <TeamPage team={team} {...props} />\n      ) : (\n        <DataLoader get={(api) => getUserByLogin(api, name)} renderError={() => <NotFound name={`@${name}`} />}>\n          {(user) => <UserPage user={user} {...props} />}\n        </DataLoader>\n      )\n    }\n  </DataLoader>\n);\nTeamOrUserPageLoader.propTypes = {\n  name: PropTypes.string.isRequired,\n};\n\nconst withLayout = (Loader) => (props) => (\n  <Layout>\n    <Loader {...props} />\n  </Layout>\n);\n\nconst TeamPagePresenter = withLayout(TeamPageLoader);\nconst UserPagePresenter = withLayout(UserPageLoader);\nconst TeamOrUserPagePresenter = withLayout(TeamOrUserPageLoader);\nexport { TeamPagePresenter as TeamPage, UserPagePresenter as UserPage, TeamOrUserPagePresenter as TeamOrUserPage };\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Helmet from 'react-helmet';\nimport { partition } from 'lodash';\nimport Text from 'Components/text/text';\nimport Heading from 'Components/text/heading';\nimport FeaturedProject from 'Components/project/featured-project';\nimport ProjectsList from 'Components/containers/projects-list';\nimport Thanks from 'Components/thanks';\nimport { TeamProfileContainer } from 'Components/containers/profile';\nimport CollectionsList from 'Components/collections-list';\nimport Emoji from 'Components/images/emoji';\nimport TeamFields from 'Components/fields/team-fields';\nimport ReportButton from 'Components/report-abuse-pop';\nimport DeleteTeam from 'Components/team/delete-team-pop';\nimport AddTeamProject from 'Components/team/add-team-project-pop';\nimport TeamUsers from 'Components/team-users';\nimport Button from 'Components/buttons/button';\nimport TeamAnalytics from 'Components/team-analytics';\nimport AuthDescription from 'Components/fields/auth-description';\nimport ErrorBoundary from 'Components/error-boundary';\nimport { getLink, userIsOnTeam, userIsTeamAdmin } from 'Models/team';\nimport { AnalyticsContext } from 'State/segment-analytics';\nimport { useCurrentUser } from 'State/current-user';\nimport { useNotifications } from 'State/notifications';\nimport { useTeamEditor } from 'State/team';\n\nimport styles from './team.styl';\n\nfunction syncPageToUrl(team) {\n  history.replaceState(null, null, getLink(team));\n}\n\nconst Beta = () => (\n  <a href=\"/teams/\" target=\"_blank\" className={styles.beta}>\n    <img src=\"https://cdn.glitch.com/0c3ba0da-dac8-4904-bb5e-e1c7acc378a2%2Fbeta-flag.svg?1541448893958\" alt=\"\" />\n    <div>\n      <Heading tagName=\"h4\">Teams are in beta</Heading>\n      <Text>Learn More</Text>\n    </div>\n  </a>\n);\n\nconst ProjectPals = () => (\n  <aside className=\"inline-banners add-project-to-empty-team-banner\">\n    <div className=\"description-container\">\n      <img className=\"project-pals\" src=\"https://cdn.glitch.com/02ae6077-549b-429d-85bc-682e0e3ced5c%2Fcollaborate.svg?1540583258925\" alt=\"\" />\n      <div className=\"description\">Add projects to share them with your team</div>\n    </div>\n  </aside>\n);\n\nconst TeamMarketing = () => (\n  <section className={styles.teamMarketing}>\n    <Text>\n      <img\n        className={styles.forPlatformsIcon}\n        src=\"https://cdn.glitch.com/be1ad2d2-68ab-404a-82f4-6d8e98d28d93%2Ffor-platforms-icon.svg?1506442305188\"\n        alt=\"\"\n      />\n      Want your own team page, complete with detailed app analytics?\n    </Text>\n    <Button href=\"/teams\" emoji=\"fishingPole\">\n      About Teams\n    </Button>\n  </section>\n);\n\nconst NameConflictWarning = ({ id }) => (\n  <>\n    <Text>This team has your name. You should update your info to remain unique <Emoji name=\"sparkles\" /></Text>\n    <Button size=\"small\" type=\"tertiary\" href={`/user/${id}`}>\n      Your Profile\n    </Button>\n  </>\n);\n\nconst teamConflictsWithUser = (team, currentUser) => {\n  if (currentUser && currentUser.login) {\n    return currentUser.login.toLowerCase() === team.url;\n  }\n  return false;\n};\n\nconst useTeamNameConflictWarning = (team) => {\n  const { currentUser } = useCurrentUser();\n  const { createNotification } = useNotifications();\n  useEffect(() => {\n    if (teamConflictsWithUser(team, currentUser)) {\n      const notification = createNotification(<NameConflictWarning id={currentUser.id} />, { persistent: true });\n      return () => {\n        notification.removeNotification();\n      };\n    }\n    return undefined;\n  }, [currentUser, team]);\n};\n\n// Team Page\n\nfunction TeamPage({ team: initialTeam }) {\n  const { currentUser } = useCurrentUser();\n  const [team, funcs] = useTeamEditor(initialTeam);\n  useTeamNameConflictWarning(team);\n  const currentUserIsOnTeam = userIsOnTeam({ team, user: currentUser });\n  const currentUserIsTeamAdmin = userIsTeamAdmin({ team, user: currentUser });\n\n  const pinnedSet = new Set(team.teamPins.map(({ projectId }) => projectId));\n  // filter featuredProject out of both pinned & recent projects\n  const [pinnedProjects, recentProjects] = partition(team.projects.filter(({ id }) => id !== team.featuredProjectId), ({ id }) => pinnedSet.has(id));\n  const featuredProject = team.projects.find(({ id }) => id === team.featuredProjectId);\n\n  const updateUrl = (url) => funcs.updateUrl(url).then(() => syncPageToUrl({ ...team, url }));\n\n  const projectOptions = { ...funcs, team };\n\n  return (\n    <main className={styles.container}>\n      <section>\n        <Beta />\n        <TeamProfileContainer\n          item={team}\n          coverActions={{\n            'Upload Cover': currentUserIsTeamAdmin ? funcs.uploadCover : null,\n            'Clear Cover': currentUserIsTeamAdmin && team.hasCoverImage ? funcs.clearCover : null,\n          }}\n          avatarActions={{\n            'Upload Avatar': currentUserIsTeamAdmin ? funcs.uploadAvatar : null,\n          }}\n        >\n          <TeamFields team={team} updateName={funcs.updateName} updateUrl={updateUrl} />\n          <div className={styles.usersInformation}>\n            <TeamUsers\n              team={team}\n              removeUserFromTeam={funcs.removeUserFromTeam}\n              updateUserPermissions={funcs.updateUserPermissions}\n              updateWhitelistedDomain={funcs.updateWhitelistedDomain}\n              inviteEmail={funcs.inviteEmail}\n              inviteUser={funcs.inviteUser}\n              joinTeam={funcs.joinTeam}\n            />\n          </div>\n          <Thanks count={team.users.reduce((total, { thanksCount }) => total + thanksCount, 0)} />\n          <AuthDescription\n            authorized={currentUserIsTeamAdmin}\n            description={team.description}\n            update={funcs.updateDescription}\n            placeholder=\"Tell us about your team\"\n          />\n        </TeamProfileContainer>\n      </section>\n\n      <ErrorBoundary>{currentUserIsOnTeam && <AddTeamProject addProject={funcs.addProject} teamProjects={team.projects} />}</ErrorBoundary>\n\n      {featuredProject && (\n        <FeaturedProject\n          featuredProject={featuredProject}\n          isAuthorized={currentUserIsOnTeam}\n          unfeatureProject={funcs.unfeatureProject}\n          addProjectToCollection={funcs.addProjectToCollection}\n          currentUser={currentUser}\n        />\n      )}\n\n      {/* Pinned Projects */}\n      {pinnedProjects.length > 0 && (\n        <ProjectsList\n          layout=\"grid\"\n          title={\n            <>\n              Pinned Projects <Emoji inTitle name=\"pushpin\" />\n            </>\n          }\n          projects={pinnedProjects}\n          isAuthorized={currentUserIsOnTeam}\n          projectOptions={projectOptions}\n        />\n      )}\n\n      {/* Recent Projects */}\n      {recentProjects.length > 0 && (\n        <ProjectsList\n          layout=\"grid\"\n          title=\"Recent Projects\"\n          projects={recentProjects}\n          isAuthorized={currentUserIsOnTeam}\n          enablePagination\n          enableFiltering={recentProjects.length > 6}\n          projectOptions={projectOptions}\n        />\n      )}\n\n      {team.projects.length === 0 && currentUserIsOnTeam && <ProjectPals />}\n\n      {/* TEAM COLLECTIONS */}\n      <CollectionsList\n        title=\"Collections\"\n        collections={team.collections.map((collection) => ({ ...collection, team }))}\n        maybeTeam={team}\n        isAuthorized={currentUserIsOnTeam}\n      />\n\n      {currentUserIsOnTeam && (\n        <ErrorBoundary>\n          <TeamAnalytics\n            id={team.id}\n            currentUserIsOnTeam={currentUserIsOnTeam}\n            projects={team.projects}\n            addProject={funcs.addProject}\n            myProjects={currentUser ? currentUser.projects : []}\n          />\n        </ErrorBoundary>\n      )}\n\n      {currentUserIsTeamAdmin && <DeleteTeam team={team} />}\n\n      {!currentUserIsOnTeam && (\n        <>\n          <ReportButton reportedType=\"team\" reportedModel={team} />\n          <TeamMarketing />\n        </>\n      )}\n    </main>\n  );\n}\n\nTeamPage.propTypes = {\n  team: PropTypes.shape({\n    adminIds: PropTypes.array.isRequired,\n    backgroundColor: PropTypes.string.isRequired,\n    coverColor: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    hasAvatarImage: PropTypes.bool.isRequired,\n    hasCoverImage: PropTypes.bool.isRequired,\n    id: PropTypes.number.isRequired,\n    isVerified: PropTypes.bool.isRequired,\n    name: PropTypes.string.isRequired,\n    projects: PropTypes.array.isRequired,\n    teamPins: PropTypes.array.isRequired,\n    users: PropTypes.array.isRequired,\n    whitelistedDomain: PropTypes.string,\n    featuredProjectId: PropTypes.string,\n  }).isRequired,\n};\n\nconst TeamPageContainer = ({ team }) => (\n  <AnalyticsContext properties={{ origin: 'team' }} context={{ groupId: team.id.toString() }}>\n    <Helmet title={team.name} />\n    <TeamPage team={team} />\n  </AnalyticsContext>\n);\n\nexport default TeamPageContainer;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"team__container___24GnI\",\"teamMarketing\":\"team__teamMarketing___1VvMH\",\"teamUrl\":\"team__teamUrl___1QQ47\",\"forPlatformsIcon\":\"team__forPlatformsIcon___2Eyd2\",\"beta\":\"team__beta___3YdXB\",\"usersInformation\":\"team__usersInformation___3Qpif\"};","/**\n * Login page for Glitch VS Code Plugin\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AuthLayout from 'Components/layout/auth-layout';\nimport TwoFactorForm from 'Components/sign-in/two-factor-form';\n\nconst TwoFactorCodePage = ({ initialToken, onSuccess }) => (\n  <AuthLayout>\n    <TwoFactorForm initialToken={initialToken} onSuccess={onSuccess} />\n  </AuthLayout>\n);\n\nTwoFactorCodePage.propTypes = {\n  initialToken: PropTypes.string.isRequired,\n  onSuccess: PropTypes.func.isRequired,\n};\n\nexport default TwoFactorCodePage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { orderBy, partition } from 'lodash';\n\nimport Heading from 'Components/text/heading';\nimport Emoji from 'Components/images/emoji';\nimport FeaturedProject from 'Components/project/featured-project';\nimport Thanks from 'Components/thanks';\nimport UserNameInput from 'Components/fields/user-name-input';\nimport UserLoginInput from 'Components/fields/user-login-input';\nimport ProjectsList from 'Components/containers/projects-list';\nimport { UserProfileContainer } from 'Components/containers/profile';\nimport CollectionsList from 'Components/collections-list';\nimport DeletedProjects from 'Components/deleted-projects';\nimport ReportButton from 'Components/report-abuse-pop';\nimport AuthDescription from 'Components/fields/auth-description';\nimport { getLink } from 'Models/user';\nimport { AnalyticsContext } from 'State/segment-analytics';\nimport { useCurrentUser } from 'State/current-user';\nimport { useUserEditor } from 'State/user';\n\nimport styles from './user.styl';\n\nfunction syncPageToLogin(login) {\n  history.replaceState(null, null, getLink({ login }));\n}\n\nconst NameAndLogin = ({ name, login, isAuthorized, updateName, updateLogin }) => {\n  if (!login) {\n    return <Heading tagName=\"h1\">Anonymous</Heading>;\n  }\n\n  if (!isAuthorized) {\n    if (!name) {\n      return <Heading tagName=\"h1\">@{login}</Heading>;\n    }\n    return (\n      <>\n        <Heading tagName=\"h1\">{name}</Heading>\n        <Heading tagName=\"h2\">@{login}</Heading>\n      </>\n    );\n  }\n  const editableName = name !== null ? name : '';\n  return (\n    <>\n      <Heading tagName=\"h1\">\n        <UserNameInput name={editableName} onChange={updateName} />\n      </Heading>\n      <Heading tagName=\"h2\">\n        <UserLoginInput login={login} onChange={updateLogin} />\n      </Heading>\n    </>\n  );\n};\nNameAndLogin.propTypes = {\n  name: PropTypes.string,\n  login: PropTypes.string,\n  isAuthorized: PropTypes.bool.isRequired,\n  updateName: PropTypes.func.isRequired,\n  updateLogin: PropTypes.func.isRequired,\n};\n\nNameAndLogin.defaultProps = {\n  name: '',\n  login: '',\n};\n\nconst UserPage = ({ user: initialUser }) => {\n  const [user, funcs] = useUserEditor(initialUser);\n  const {\n    updateDescription,\n    updateName,\n    updateLogin,\n    uploadCover,\n    clearCover,\n    uploadAvatar,\n    undeleteProject,\n    unfeatureProject,\n    setDeletedProjects,\n    addProjectToCollection,\n  } = funcs;\n  const projectOptions = { ...funcs, user };\n  const { _deletedProjects, featuredProjectId } = user;\n\n  const { currentUser: maybeCurrentUser } = useCurrentUser();\n  const isSupport = maybeCurrentUser && maybeCurrentUser.isSupport;\n  const isAuthorized = maybeCurrentUser && maybeCurrentUser.id === user.id;\n\n  const pinnedSet = new Set(user.pins.map(({ id }) => id));\n  // filter featuredProject out of both pinned & recent projects\n  const sortedProjects = orderBy(user.projects, (project) => project.updatedAt, ['desc']);\n  const [pinnedProjects, recentProjects] = partition(sortedProjects.filter(({ id }) => id !== featuredProjectId), ({ id }) => pinnedSet.has(id));\n  const featuredProject = user.projects.find(({ id }) => id === featuredProjectId);\n\n  return (\n    <main className={styles.container}>\n      <section>\n        <UserProfileContainer\n          item={user}\n          coverActions={{\n            'Upload Cover': isAuthorized && user.login ? uploadCover : null,\n            'Clear Cover': isAuthorized && user.hasCoverImage ? clearCover : null,\n          }}\n          avatarActions={{\n            'Upload Avatar': isAuthorized && user.login ? uploadAvatar : null,\n          }}\n          teams={user.teams}\n        >\n          <NameAndLogin\n            name={user.name}\n            login={user.login}\n            {...{ isAuthorized, updateName }}\n            updateLogin={(login) => updateLogin(login).then(() => syncPageToLogin(login))}\n          />\n          <Thanks count={user.thanksCount} />\n          <AuthDescription\n            authorized={isAuthorized && !!user.login}\n            description={user.description}\n            update={updateDescription}\n            placeholder=\"Tell us about yourself\"\n          />\n        </UserProfileContainer>\n      </section>\n\n      {featuredProject && (\n        <FeaturedProject\n          featuredProject={featuredProject}\n          isAuthorized={isAuthorized}\n          unfeatureProject={unfeatureProject}\n          addProjectToCollection={addProjectToCollection}\n          currentUser={maybeCurrentUser}\n        />\n      )}\n\n      {/* Pinned Projects */}\n      {pinnedProjects.length > 0 && (\n        <ProjectsList\n          dataCy=\"pinned-projects\"\n          layout=\"grid\"\n          title={\n            <>\n              Pinned Projects <Emoji inTitle name=\"pushpin\" />\n            </>\n          }\n          projects={pinnedProjects}\n          projectOptions={projectOptions}\n        />\n      )}\n\n      {!!user.login && (\n        <CollectionsList\n          title=\"Collections\"\n          collections={user.collections.map((collection) => ({\n            ...collection,\n            user,\n          }))}\n          isAuthorized={isAuthorized}\n          maybeCurrentUser={maybeCurrentUser}\n        />\n      )}\n\n      {/* Recent Projects */}\n      {recentProjects.length > 0 && (\n        <ProjectsList\n          dataCy=\"recent-projects\"\n          layout=\"grid\"\n          title=\"Recent Projects\"\n          projects={recentProjects}\n          enablePagination\n          enableFiltering={recentProjects.length > 6}\n          projectOptions={projectOptions}\n        />\n      )}\n\n      {(isAuthorized || isSupport) && (\n        <article data-cy=\"deleted-projects\">\n          <Heading tagName=\"h2\">\n            Deleted Projects\n            <Emoji inTitle name=\"bomb\" />\n          </Heading>\n          <DeletedProjects\n            setDeletedProjects={setDeletedProjects}\n            deletedProjects={_deletedProjects}\n            undelete={isAuthorized ? undeleteProject : null}\n            user={user}\n          />\n        </article>\n      )}\n      {!isAuthorized && <ReportButton reportedType=\"user\" reportedModel={user} />}\n    </main>\n  );\n};\n\nUserPage.propTypes = {\n  user: PropTypes.shape({\n    name: PropTypes.string,\n    login: PropTypes.string,\n    id: PropTypes.number.isRequired,\n    thanksCount: PropTypes.number.isRequired,\n    hasCoverImage: PropTypes.bool.isRequired,\n    avatarUrl: PropTypes.string,\n    color: PropTypes.string.isRequired,\n    coverColor: PropTypes.string,\n    description: PropTypes.string.isRequired,\n    pins: PropTypes.array.isRequired,\n    projects: PropTypes.array.isRequired,\n    teams: PropTypes.array.isRequired,\n    collections: PropTypes.array.isRequired,\n  }).isRequired,\n};\n\nconst UserPageContainer = ({ user }) => (\n  <AnalyticsContext properties={{ origin: 'user' }}>\n    <Helmet title={user.name || (user.login ? `@${user.login}` : `User ${user.id}`)} />\n    <UserPage user={user} />\n  </AnalyticsContext>\n);\n\nexport default UserPageContainer;\n","// extracted by mini-css-extract-plugin","/**\n * Login page for Glitch VS Code Plugin\n */\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport PopoverContainer from 'Components/popover/container';\nimport Text from 'Components/text/text';\nimport { SignInPopBase as SignInPop } from 'Components/sign-in-pop';\nimport { useCurrentUser } from 'State/current-user';\n\nimport styles from './vscode-auth.styl';\n\nconst VSCodeAuth = ({ insiders, openProject }) => {\n  const { currentUser } = useCurrentUser();\n  const { persistentToken, login } = currentUser;\n  const isSignedIn = persistentToken && login;\n\n  const redirectMessage = \"You are being redirected. (If you aren't sent back to VSCode, try signing in with an email code.)\";\n  const signInMessage = 'Please Sign In to continue.';\n\n  useEffect(() => {\n    if (isSignedIn) {\n      setTimeout(() => {\n        const scheme = insiders ? 'vscode-insiders' : 'vscode';\n        const redirectUrl = `${scheme}://glitch.glitch/token?token=${persistentToken}&openProject=${openProject}`;\n        window.location.assign(redirectUrl);\n      }, 3000);\n    }\n  }, []);\n\n  return (\n    <div className={styles.content}>\n      <Text>{isSignedIn ? redirectMessage : signInMessage}</Text>\n      {!isSignedIn && <PopoverContainer>{() => <SignInPop align=\"none\" />}</PopoverContainer>}\n    </div>\n  );\n};\n\nVSCodeAuth.propTypes = {\n  insiders: PropTypes.bool,\n  openProject: PropTypes.bool,\n};\n\nVSCodeAuth.defaultProps = {\n  insiders: false,\n  openProject: false,\n};\n\nexport default VSCodeAuth;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"vscode-auth__content___1VZ9R\"};","/* globals API_URL */\nimport React, { useState, useEffect, useContext, useRef, useMemo, createContext } from 'react';\nimport axios from 'axios';\nimport { memoize } from 'lodash';\nimport { captureException } from 'Utils/sentry';\nimport { useCurrentUser } from './current-user';\n\nexport const Context = createContext();\n\nexport const getAPIForToken = memoize((persistentToken) => {\n  const cache = {};\n  const maxAge = 60 * 1000;\n  let api;\n  if (persistentToken) {\n    api = axios.create({\n      baseURL: API_URL,\n      headers: {\n        Authorization: persistentToken,\n      },\n    });\n  } else {\n    api = axios.create({\n      baseURL: API_URL,\n    });\n  }\n\n  return {\n    ...api,\n    persistentToken,\n    get: (url, config) => {\n      // TODO: support params\n      if (config) return api.get(url, config);\n      const now = Date.now();\n      if (cache[url] && cache[url].timestamp + maxAge > now) {\n        return cache[url].response;\n      }\n      const response = api.get(url);\n      cache[url] = {\n        timestamp: now,\n        response,\n      };\n      return response;\n    },\n  };\n});\n\nexport function APIContextProvider({ children }) {\n  const { persistentToken } = useCurrentUser();\n  const api = getAPIForToken(persistentToken);\n  return <Context.Provider value={api}>{children}</Context.Provider>;\n}\n\nexport function useAPI() {\n  return useContext(Context);\n}\n\n/*\nCreate a hook for working with the API via async functions.\nUsage:\n\nconst useTeamsAPI = createAPIHook(async (api, teamID) => {\n  const team = await api.get(`/team/${teamID}`);\n  const { projectIDs } = team;\n  team.projects = await Promise.all(projectIDs.map(projectID => api.get(`/project/${projectID})`));\n  return team;\n});\n\nfunction TeamWithProjects ({ teamID }) {\n  const { status, value } = useTeamsAPI(teamID)\n\n  if (status === 'loading') {\n    return <Loading />\n  }\n\n  // ... render the team ...\n}\n\n*/\n\n// we don't want to set \"stale\" state, e.g. if the user clicks over to a different team's page\n// while the first team's data is still loading, we don't want to show the first team's data when it loads.\n// this should also avoid errors from setting state on an unmounted component.\nfunction useAsyncEffectState(initialState, handler, asyncFuncArgs) {\n  const [state, setState] = useState(initialState);\n  const versionRef = useRef(0);\n  useEffect(() => {\n    const versionWhenEffectStarted = versionRef.current;\n    const setStateIfFresh = (value) => {\n      if (versionWhenEffectStarted === versionRef.current) {\n        setState(value);\n      }\n    };\n    handler(setStateIfFresh, versionWhenEffectStarted);\n    return () => {\n      versionRef.current += 1;\n    };\n  }, asyncFuncArgs);\n  return state;\n}\n\nexport const createAPIHook = (asyncFunction, options = {}) => (...args) => {\n  const api = useAPI();\n  const loading = { status: 'loading' };\n  const result = useAsyncEffectState(\n    loading,\n    async (setResult, version) => {\n      // reset to 'loading' if the args change\n      if (version > 0) {\n        setResult(loading);\n      }\n      try {\n        const value = await asyncFunction(api, ...args);\n        setResult({ status: 'ready', value });\n      } catch (error) {\n        setResult({ status: 'error', error });\n        if (options.captureException) {\n          captureException(error);\n        }\n      }\n    },\n    args,\n  );\n  return result;\n};\n\nexport const entityPath = ({ user, team, project, collection }) => {\n  if (user) return `users/${user.id}`;\n  if (team) return `teams/${team.id}`;\n  if (project) return `projects/${project.id}`;\n  if (collection) return `collections/${collection.id}`;\n  throw new Error('Missing entity');\n};\n\nexport const useAPIHandlers = () => {\n  const api = useAPI();\n  return useMemo(\n    () => ({\n      // all entities\n      updateItem: (entityArgs, changes) => api.patch(`/${entityPath(entityArgs)}`, changes),\n      deleteItem: (entityArgs) => api.delete(`/${entityPath(entityArgs)}`),\n\n      // collections\n      addProjectToCollection: ({ project, collection }) => api.patch(`/collections/${collection.id}/add/${project.id}`),\n      orderProjectInCollection: ({ project, collection }, index) => api.post(`/collections/${collection.id}/project/${project.id}/index/${index}`),\n      updateProjectInCollection: ({ project, collection }, data) => api.patch(`/collections/${collection.id}/project/${project.id}`, data),\n      removeProjectFromCollection: ({ project, collection }) => api.patch(`/collections/${collection.id}/remove/${project.id}`),\n\n      // projects\n      removeUserFromProject: ({ project, user }) => api.delete(`/projects/${project.id}/authorization`, { data: { targetUserId: user.id } }),\n      updateProjectDomain: ({ project }) =>\n        api.post(\n          `/project/domainChanged?projectId=${project.id}&authorization=${api.persistentToken}`,\n          {},\n          {\n            transformRequest: (data, headers) => {\n              // this endpoint doesn't like OPTIONS requests, which axios sends if there is an auth header (case 3328590)\n              delete headers.Authorization;\n              return data;\n            },\n          },\n        ),\n      undeleteProject: ({ project }) => api.post(`/projects/${project.id}/undelete`),\n\n      // teams\n      joinTeam: ({ team }) => api.post(`/teams/${team.id}/join`),\n      inviteEmailToTeam: ({ team }, emailAddress) => api.post(`/teams/${team.id}/sendJoinTeamEmail`, { emailAddress }),\n      inviteUserToTeam: ({ team, user }) => api.post(`/teams/${team.id}/sendJoinTeamEmail`, { userId: user.id }),\n      revokeTeamInvite: ({ team, user }) => api.post(`/teams/${team.id}/revokeTeamJoinToken/${user.id}`),\n      updateUserAccessLevel: ({ user, team }, accessLevel) => api.patch(`/teams/${team.id}/users/${user.id}`, { access_level: accessLevel }),\n      removeUserFromTeam: ({ user, team }) => api.delete(`/teams/${team.id}/users/${user.id}`),\n      addProjectToTeam: ({ project, team }) => api.post(`/teams/${team.id}/projects/${project.id}`),\n      removeProjectFromTeam: ({ project, team }) => api.delete(`/teams/${team.id}/projects/${project.id}`),\n      joinTeamProject: ({ project, team }) => api.post(`/teams/${team.id}/projects/${project.id}/join`),\n\n      // teams / users\n      addPinnedProject: ({ project, team, user }) => api.post(`/${entityPath({ team, user })}/pinned-projects/${project.id}`),\n      removePinnedProject: ({ project, team, user }) => api.delete(`/${entityPath({ team, user })}/pinned-projects/${project.id}`),\n    }),\n    [api],\n  );\n};\n","import React, { useState, useCallback, useContext, createContext } from 'react';\n\nimport { useAPI, useAPIHandlers, createAPIHook } from 'State/api';\nimport useErrorHandlers from 'State/error-handlers';\nimport { getSingleItem, getAllPages } from 'Shared/api';\nimport { captureException } from 'Utils/sentry';\n\nexport const getCollectionWithProjects = async (api, { owner, name }) => {\n  const fullUrl = `${encodeURIComponent(owner)}/${name}`;\n  try {\n    const [collection, projects] = await Promise.all([\n      getSingleItem(api, `/v1/collections/by/fullUrl?fullUrl=${fullUrl}`, `${owner}/${name}`),\n      getAllPages(api, `/v1/collections/by/fullUrl/projects?limit=100&fullUrl=${fullUrl}`),\n    ]);\n    return { ...collection, projects };\n  } catch (error) {\n    if (error && error.response && error.response.status === 404) return null;\n    captureException(error);\n    return null;\n  }\n};\n\nasync function getCollectionProjectsFromAPI(api, collection, withCacheBust) {\n  const cacheBust = withCacheBust ? `&cacheBust=${Date.now()}` : '';\n  return getAllPages(api, `/v1/collections/by/id/projects?id=${collection.id}&limit=100${cacheBust}`);\n}\n\nconst loadingResponse = { status: 'loading' };\n\nfunction loadCollectionProjects(api, collections, setResponses, withCacheBust) {\n  setResponses((prev) => {\n    const next = { ...prev };\n    for (const { id } of collections) {\n      if (!next[id] || !next[id].projects) {\n        next[id] = { ...next[id], projects: loadingResponse };\n      }\n    }\n    return next;\n  });\n  collections.forEach(async (collection) => {\n    const projects = await getCollectionProjectsFromAPI(api, collection, withCacheBust);\n    setResponses((prev) => ({\n      ...prev,\n      [collection.id]: {\n        ...prev[collection.id],\n        projects: { status: 'ready', value: projects },\n      },\n    }));\n  });\n}\n\nconst CollectionProjectContext = createContext();\nconst CollectionReloadContext = createContext();\n\nexport const CollectionContextProvider = ({ children }) => {\n  const [responses, setResponses] = useState({});\n  const api = useAPI();\n\n  const getCollectionProjects = useCallback((collection) => {\n    if (responses[collection.id] && responses[collection.id].projects) {\n      return responses[collection.id].projects;\n    }\n    loadCollectionProjects(api, [collection], setResponses);\n    return loadingResponse;\n  }, [responses, api]);\n\n  const reloadCollectionProjects = useCallback((collections) => {\n    loadCollectionProjects(api, collections, setResponses, true);\n  }, [api]);\n\n  return (\n    <CollectionProjectContext.Provider value={getCollectionProjects}>\n      <CollectionReloadContext.Provider value={reloadCollectionProjects}>\n        {children}\n      </CollectionReloadContext.Provider>\n    </CollectionProjectContext.Provider>\n  );\n};\n\nexport const useCollectionContext = () => useContext(CollectionProjectContext);\n\nexport function useCollectionProjects(collection) {\n  const getCollectionProjects = useContext(CollectionProjectContext);\n  return getCollectionProjects(collection);\n}\n\nexport function useCollectionReload() {\n  const reloadCollectionProjects = useContext(CollectionReloadContext);\n  return reloadCollectionProjects;\n}\n\nexport const useCollectionCurator = createAPIHook(async (api, collection) => {\n  if (collection.teamId > 0) {\n    const team = await getSingleItem(api, `/v1/teams/by/id?id=${collection.teamId}`, collection.teamId);\n    return { team };\n  }\n  if (collection.userId > 0) {\n    const user = await getSingleItem(api, `/v1/users/by/id?id=${collection.userId}`, collection.userId);\n    return { user };\n  }\n  return {};\n});\n\nexport function userOrTeamIsAuthor({ collection, user }) {\n  if (!user) return false;\n  if (collection.teamId > 0) {\n    return user.teams ? user.teams.some((team) => team.id === collection.teamId) : false;\n  }\n  if (collection.userId > 0) {\n    return user.id === collection.userId;\n  }\n  return false;\n}\n\nexport function useCollectionEditor(initialCollection) {\n  const [collection, setCollection] = useState(initialCollection);\n  const {\n    updateItem,\n    deleteItem,\n    addProjectToCollection,\n    orderProjectInCollection,\n    removeProjectFromCollection,\n    updateProjectInCollection,\n  } = useAPIHandlers();\n  const { handleError, handleErrorForInput, handleCustomError } = useErrorHandlers();\n\n  async function updateFields(changes) {\n    // A note here: we don't want to setState with the data from the server from this call, as it doesn't return back the projects in depth with users and notes and things\n    // maybe a sign we want to think of something a little more powerful for state management, as we're getting a little hairy here.\n    setCollection((prev) => ({ ...prev, ...changes }));\n    await updateItem({ collection }, changes);\n  }\n\n  function updateProject(projectUpdates, project) {\n    setCollection((prev) => ({\n      ...prev,\n      projects: prev.projects.map((p) => {\n        if (p.id === project.id) {\n          return { ...p, ...projectUpdates };\n        }\n        return p;\n      }),\n    }));\n  }\n\n  const withErrorHandler = (fn, handler) => (...args) => fn(...args).catch(handler);\n\n  const funcs = {\n    addProjectToCollection: withErrorHandler(async (project, selectedCollection) => {\n      if (selectedCollection.id === collection.id) {\n        // add project to collection page\n        setCollection((prev) => ({\n          ...prev,\n          projects: [project, ...prev.projects],\n        }));\n      }\n      await addProjectToCollection({ project, collection: selectedCollection });\n      if (selectedCollection.id === collection.id) {\n        await orderProjectInCollection({ project, collection }, 0);\n      }\n    }, handleCustomError),\n\n    removeProjectFromCollection: withErrorHandler(async (project) => {\n      await removeProjectFromCollection({ project, collection });\n      setCollection((prev) => ({\n        ...prev,\n        projects: prev.projects.filter((p) => p.id !== project.id),\n      }));\n    }, handleError),\n\n    deleteCollection: () => deleteItem({ collection }).catch(handleError),\n\n    updateNameAndUrl: ({ name, url }) => updateFields({ name, url }).catch(handleErrorForInput),\n\n    displayNewNote: (projectId) => updateProject({ isAddingANewNote: true }, projectId),\n\n    updateNote: async ({ note, project }) => {\n      note = (note || '').trim();\n      await updateProjectInCollection({ project, collection }, { annotation: note });\n      updateProject({ note, isAddingANewNote: true }, project);\n    },\n\n    hideNote: (project) => updateProject({ isAddingANewNote: false }, project),\n\n    updateDescription: (description) => updateFields({ description }).catch(handleErrorForInput),\n\n    updateColor: (color) => updateFields({ coverColor: color }),\n\n    updateProjectOrder: withErrorHandler(async (project, filteredIndex) => {\n      // the shown projects list doesn't include the featured project, bump the index to include it\n      const featuredIndex = collection.projects.findIndex((p) => p.id === collection.featuredProjectId);\n      const index = featuredIndex >= 0 && filteredIndex > featuredIndex ? filteredIndex + 1 : filteredIndex;\n      setCollection((prev) => {\n        const sortedProjects = prev.projects.filter((p) => p.id !== project.id);\n        sortedProjects.splice(index, 0, project);\n        return { ...prev, projects: sortedProjects };\n      });\n      await orderProjectInCollection({ project, collection }, index);\n    }, handleError),\n\n    featureProject: withErrorHandler(async (project) => {\n      if (collection.featuredProjectId) {\n        // this is needed to force an dismount of an optimistic state value of a note and to ensure the old featured collection goes where it's supposed to.\n        setCollection((prev) => ({ ...prev, featuredProjectId: null }));\n      }\n      await updateFields({ featuredProjectId: project.id });\n    }, handleError),\n\n    unfeatureProject: () => updateFields({ featuredProjectId: null }).catch(handleError),\n  };\n  return [collection, funcs];\n}\n","import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getSingleItem, getAllPages, allByKeys } from 'Shared/api';\nimport { sortProjectsByLastAccess } from 'Models/project';\nimport { configureScope, captureException, captureMessage, addBreadcrumb } from 'Utils/sentry';\nimport useLocalStorage from './local-storage';\nimport { getAPIForToken } from './api';\n\nexport const Context = React.createContext();\n\n// Default values for all of the user fields we need you to have\n// We always generate a 'real' anon user, but use this until we do\nconst defaultUser = {\n  id: 0,\n  login: null,\n  name: null,\n  description: '',\n  color: '#aaa',\n  avatarUrl: null,\n  avatarThumbnailUrl: null,\n  hasCoverImage: false,\n  coverColor: null,\n  emails: [],\n  features: [],\n  projects: [],\n  teams: [],\n  collections: [],\n};\n\nfunction identifyUser(user) {\n  const analytics = { window };\n  if (user) {\n    addBreadcrumb({\n      level: 'info',\n      message: `Current user is ${JSON.stringify(user)}`,\n    });\n  } else {\n    addBreadcrumb({\n      level: 'info',\n      message: 'logged out',\n    });\n  }\n  try {\n    if (analytics && analytics.identify && user && user.login) {\n      const emailObj = Array.isArray(user.emails) && user.emails.find((email) => email.primary);\n      const email = emailObj && emailObj.email;\n      analytics.identify(\n        user.id,\n        {\n          name: user.name,\n          login: user.login,\n          email,\n          created_at: user.createdAt,\n        },\n        { groupId: '0' },\n      );\n    }\n    if (user) {\n      configureScope((scope) => {\n        scope.setUser({\n          id: user.id,\n          login: user.login,\n        });\n      });\n    } else {\n      configureScope((scope) => {\n        scope.setUser({\n          id: null,\n          login: null,\n        });\n      });\n    }\n  } catch (error) {\n    console.error(error);\n    captureException(error);\n  }\n}\n\n// Test if two user objects reference the same person\nfunction usersMatch(a, b) {\n  if (!a && !b) return true;\n  return a && b && a.id === b.id && a.persistentToken === b.persistentToken;\n}\n\nasync function getAnonUser() {\n  const api = getAPIForToken();\n  const { data } = await api.post('users/anon');\n  return data;\n}\n\nasync function getSharedUser(persistentToken) {\n  if (!persistentToken) return undefined;\n  const api = getAPIForToken(persistentToken);\n\n  try {\n    return await getSingleItem(api, `v1/users/by/persistentToken?persistentToken=${persistentToken}`, persistentToken);\n  } catch (error) {\n    if (error.response && error.response.status === 401) return undefined;\n    throw error;\n  }\n}\n\nasync function getCachedUser(sharedUser) {\n  if (!sharedUser) return undefined;\n  if (!sharedUser.id || !sharedUser.persistentToken) return 'error';\n  const api = getAPIForToken(sharedUser.persistentToken);\n  try {\n    const makeUrl = (type) => `v1/users/by/id/${type}?id=${sharedUser.id}&limit=100`;\n    const makeOrderedUrl = (type, order, direction) => `${makeUrl(type)}&orderKey=${order}&orderDirection=${direction}`;\n    const {\n      baseUser, emails, projects, teams, collections,\n    } = await allByKeys({\n      baseUser: getSingleItem(api, `v1/users/by/id?id=${sharedUser.id}&cache=${Date.now()}`, sharedUser.id),\n      emails: getAllPages(api, makeUrl('emails')),\n      projects: getAllPages(api, makeOrderedUrl('projects', 'domain', 'ASC')),\n      teams: getAllPages(api, makeOrderedUrl('teams', 'url', 'ASC')),\n      collections: getAllPages(api, makeUrl('collections')),\n    });\n    const user = { ...baseUser, emails, projects: sortProjectsByLastAccess(projects), teams, collections };\n    if (!usersMatch(sharedUser, user)) return 'error';\n    return user;\n  } catch (error) {\n    if (error.response && (error.response.status === 401 || error.response.status === 404)) {\n      // 401 means our token is bad, 404 means the user doesn't exist\n      return 'error';\n    }\n    throw error;\n  }\n}\n\nconst getSuperUserHelpers = (cachedUser) => {\n  const superUserFeature = cachedUser && cachedUser.features && cachedUser.features.find((feature) => feature.name === 'super_user');\n\n  return {\n    toggleSuperUser: async () => {\n      if (!cachedUser) return;\n      const api = getAPIForToken(cachedUser.persistentToken);\n      await api.post(`https://support-toggle.glitch.me/support/${superUserFeature ? 'disable' : 'enable'}`);\n      window.scrollTo(0, 0);\n      window.location.reload();\n    },\n    canBecomeSuperUser:\n      cachedUser && cachedUser.projects && cachedUser.projects.filter((p) => p.id === 'b9f7fbdd-ac07-45f9-84ea-d484533635ff').length > 0,\n    superUserFeature,\n  };\n};\n\nconst logSharedUserError = (sharedUser, newSharedUser) => {\n  console.log(`Fixed shared cachedUser from ${sharedUser.id} to ${newSharedUser && newSharedUser.id}`);\n  addBreadcrumb({\n    level: 'info',\n    message: `Fixed shared cachedUser. Was ${JSON.stringify(sharedUser)}`,\n  });\n  addBreadcrumb({\n    level: 'info',\n    message: `New shared cachedUser: ${JSON.stringify(newSharedUser)}`,\n  });\n  captureMessage('Invalid cachedUser');\n};\n\nconst sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nconst useDebouncedAsync = (fn) => {\n  const [working, setWorking] = useState(false); // Used to prevent simultaneous loading\n  return async (...args) => {\n    if (working) return;\n    setWorking(true);\n    // delay loading a moment so both items from storage have a chance to update\n    await sleep(1);\n    await fn(...args);\n    setWorking(false);\n  };\n};\n\nexport const CurrentUserProvider = ({ children }) => {\n  const [fetched, setFetched] = useState(false); // Set true on first complete load\n\n  // sharedUser syncs with the editor and is authoritative on id and persistentToken\n  const [sharedUser, setSharedUser] = useLocalStorage('cachedUser', null);\n  // put sharedUser in a ref so that we can access its current value in load(),\n  // even if it was changed elsewhwere\n  const sharedUserRef = useRef(sharedUser);\n  useEffect(() => {\n    sharedUserRef.current = sharedUser;\n  }, [sharedUser]);\n\n  // cachedUser mirrors GET /users/{id} and is what we actually display\n  const [cachedUser, setCachedUser] = useLocalStorage('community-cachedUser', null);\n\n  const persistentToken = sharedUser ? sharedUser.persistentToken : null;\n\n  const load = useDebouncedAsync(async () => {\n    let sharedOrAnonUser = sharedUser;\n\n    // If we're signed out create a new anon user\n    if (!sharedOrAnonUser) {\n      sharedOrAnonUser = await getAnonUser();\n      setSharedUser(sharedOrAnonUser);\n    }\n\n    // Check if we have to clear the cached user\n    if (!usersMatch(sharedOrAnonUser, cachedUser)) {\n      setCachedUser(undefined);\n    }\n\n    const newCachedUser = await getCachedUser(sharedOrAnonUser);\n\n    if (newCachedUser === 'error') {\n      // Looks like our sharedUser is bad, make sure it wasn't changed since we read it\n      // Anon users get their token and id deleted when they're merged into a user on sign in\n      // If it did change then quit out and let useEffect sort it out\n      if (usersMatch(sharedOrAnonUser, sharedUserRef.current)) {\n        // The user wasn't changed, so we need to fix it\n        setFetched(false);\n        const newSharedUser = await getSharedUser(sharedOrAnonUser.persistentToken);\n        setSharedUser(newSharedUser);\n        logSharedUserError(sharedUser, newSharedUser);\n      }\n    } else {\n      // The shared user is good, store it\n      setCachedUser(newCachedUser);\n      setFetched(true);\n    }\n  });\n\n  useEffect(() => {\n    identifyUser(cachedUser);\n  }, [cachedUser && cachedUser.id, cachedUser && cachedUser.persistentToken]);\n\n  useEffect(() => {\n    load();\n    // for easier debugging\n    window.currentUser = cachedUser;\n  }, [cachedUser && cachedUser.id, cachedUser && cachedUser.persistentToken, sharedUser && sharedUser.id, sharedUser && sharedUser.persistentToken]);\n\n  const userProps = {\n    currentUser: { ...defaultUser, ...sharedUser, ...cachedUser },\n    persistentToken,\n    fetched: !!cachedUser && fetched,\n    reload: load,\n    login: (data) => {\n      setSharedUser(data);\n      setCachedUser(undefined);\n    },\n    update: (changes) => {\n      setCachedUser({ ...cachedUser, ...changes });\n    },\n    clear: () => {\n      setSharedUser(undefined);\n      setCachedUser(undefined);\n    },\n    superUserHelpers: getSuperUserHelpers(cachedUser),\n  };\n\n  return <Context.Provider value={userProps}>{children}</Context.Provider>;\n};\nCurrentUserProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport const useCurrentUser = () => React.useContext(Context);\n","import useUserPref from './user-prefs';\n\n//  Dev Toggles!\n//\n//   Use dev toggles to parts of the site that are still in development.\n//   This site is open source, there's no utility here, this is just a way to help us\n//   ship things _extra_ early without impacting customer UX\n//\n\n// Define your dev toggles here.\n// We can only have three.\n// Users can enable them with the /secret page.\nconst toggleData = [\n  {\n    name: 'Email Invites',\n    description: 'Enables invite-by-email behavior on the team page.',\n  },\n  {\n    name: 'Slack Auth',\n    description: 'Sign in with your Slack account!',\n  },\n  {\n    name: 'User Passwords',\n    description: 'Enable users to set a password for their account',\n  },\n].slice(0, 3); // <-- Yeah really, only 3.  If you need more, clean up one first.\n\n// Usage:\n//\n// import useDevToggle from 'State/dev-toggles`\n//\n// const NewFeatureIfEnabled = () => {\n//   const showNewFeature = useDevToggle('New Feature');\n//   return showNewFeature ? <NewFeature /> : null;\n// };\n\nexport const useDevToggles = () => {\n  const [enabledToggles, setEnabledToggles] = useUserPref('devToggles', []);\n  return { enabledToggles, toggleData, setEnabledToggles };\n};\n\nconst useDevToggle = (toggle) => {\n  const { enabledToggles } = useDevToggles();\n  return enabledToggles.includes(toggle);\n};\n\nexport default useDevToggle;\n","import { useNotifications } from 'State/notifications';\n\nfunction handleError(notify, error) {\n  console.error(error);\n  notify();\n  return Promise.reject(error);\n}\n\nfunction handleErrorForInput(notify, error) {\n  if (!(error && error.response && error.response.data)) {\n    return handleError(notify, error);\n  }\n  return Promise.reject(error);\n}\n\nfunction handleCustomError(notify, error) {\n  console.error(error);\n  if (error && error.response && error.response.data) {\n    notify(error.response.data.message);\n  }\n  return Promise.reject(error);\n}\n\nconst useErrorHandlers = () => {\n  const { createErrorNotification } = useNotifications();\n  return {\n    handleError: (error) => handleError(createErrorNotification, error),\n    handleErrorForInput: (error) => handleErrorForInput(createErrorNotification, error),\n    handleCustomError: (error) => handleCustomError(createErrorNotification, error),\n  };\n};\n\nexport default useErrorHandlers;\n","import React from 'react';\nimport { captureException } from '../utils/sentry';\n\nconst getStorage = () => {\n  try {\n    const storage = window.localStorage;\n    storage.setItem('test', 'test');\n    storage.getItem('test');\n    storage.removeItem('test');\n    return storage;\n  } catch (error) {\n    console.warn('Local storage not available, using memory store');\n  }\n  return null;\n};\nconst storage = getStorage();\n\nconst readFromStorage = (name) => {\n  if (storage) {\n    try {\n      const raw = storage.getItem(name);\n      if (raw !== null) {\n        return JSON.parse(raw);\n      }\n    } catch (error) {\n      captureException(error);\n    }\n  }\n  return undefined;\n};\n\nconst writeToStorage = (name, value) => {\n  if (storage) {\n    try {\n      if (value !== undefined) {\n        storage.setItem(name, JSON.stringify(value));\n      } else {\n        storage.removeItem(name);\n      }\n    } catch (error) {\n      captureException(error);\n    }\n  }\n};\n\nconst Context = React.createContext([() => undefined, () => {}]);\n\nconst LocalStorageProvider = ({ children }) => {\n  const [cache, setCache] = React.useState(new Map());\n\n  React.useEffect(() => {\n    const onStorage = (event) => {\n      if (event.storageArea === storage) {\n        if (event.key) {\n          setCache((oldCache) => {\n            const newCache = new Map(oldCache);\n            newCache.delete(event.key);\n            return newCache;\n          });\n        } else {\n          setCache(new Map());\n        }\n      }\n    };\n    window.addEventListener('storage', onStorage, { passive: true });\n    return () => {\n      window.removeEventListener('storage', onStorage, { passive: true });\n    };\n  }, []);\n\n  const getValue = (name) => {\n    if (!cache.has(name)) {\n      const value = readFromStorage(name);\n      setCache((oldCache) => new Map([...oldCache, [name, value]]));\n      return value;\n    }\n    return cache.get(name);\n  };\n\n  const setValue = (name, value) => {\n    writeToStorage(name, value);\n    setCache((oldCache) => new Map([...oldCache, [name, value]]));\n  };\n\n  return (\n    <Context.Provider value={[getValue, setValue]}>\n      {children}\n    </Context.Provider>\n  );\n};\n\nconst useLocalStorage = (name, defaultValue) => {\n  const [getRawValue, setRawValue] = React.useContext(Context);\n  const rawValue = getRawValue(name);\n\n  const value = rawValue !== undefined ? rawValue : defaultValue;\n  const setValue = (newValue) => setRawValue(name, newValue);\n\n  return [value, setValue];\n};\n\nexport default useLocalStorage;\nexport { LocalStorageProvider };\n","import React, { useState } from 'react';\n\nimport Notification from 'Components/notification';\n\nconst context = React.createContext();\nconst { Provider } = context;\nexport const NotificationConsumer = context.Consumer;\nexport const useNotifications = () => React.useContext(context);\n\nexport const NotificationsProvider = (props) => {\n  const [notifications, setNotifications] = useState([]);\n\n  const remove = (id) => {\n    setNotifications((prevNotifications) => prevNotifications.filter((n) => n.id !== id));\n  };\n\n  const create = (content, opts = {}) => {\n    const notification = {\n      id: `${Date.now()}${Math.random()}`,\n      content,\n      ...opts,\n    };\n\n    setNotifications((prevNotifications) => [...prevNotifications, notification]);\n    if (notification.persistent) {\n      const updateNotification = (updatedContent) => {\n        setNotifications((prevNotifications) => prevNotifications.map((n) => (n.id === notification.id ? { ...n, updatedContent } : n)));\n      };\n      const removeNotification = () => {\n        remove(notification.id);\n      };\n      return {\n        updateNotification,\n        removeNotification,\n      };\n    }\n\n    return notification.id;\n  };\n\n  const createError = (content = 'Something went wrong. Try refreshing?', opts) => {\n    create(content, ...opts);\n  };\n\n  const funcs = {\n    createNotification: create,\n    createErrorNotification: createError,\n  };\n\n  const notificationsStyles = {\n    zIndex: '11',\n    top: '20px',\n    right: '20px',\n    position: 'fixed',\n  };\n  return (\n    <>\n      <Provider value={funcs}>{props.children}</Provider>\n      {!!notifications.length && (\n        <div style={notificationsStyles}>\n          {notifications.map(({ id, content, ...args }) => (\n            <Notification key={id} remove={() => remove(id)} {...args}>\n              {content}\n            </Notification>\n          ))}\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\n\nimport { useNotifications } from 'State/notifications';\n\nconst PersistentNotification = ({ children }) => {\n  const { createNotification } = useNotifications();\n\n  useEffect(\n    () => {\n      const { removeNotification } = createNotification(children, { type: 'error', persistent: true });\n      return removeNotification;\n    },\n    [children],\n  );\n\n  return null;\n};\n\nconst OfflineNotice = () => {\n  const [online, setOnline] = useState(() => navigator.onLine);\n\n  useEffect(() => {\n    const onNetwork = () => setOnline(navigator.onLine);\n    window.addEventListener('offline', onNetwork);\n    window.addEventListener('online', onNetwork);\n    return () => {\n      window.removeEventListener('offline', onNetwork);\n      window.removeEventListener('online', onNetwork);\n    };\n  }, []);\n\n  if (!online) {\n    return <PersistentNotification>It looks like you're offline</PersistentNotification>;\n  }\n  return null;\n};\n\nexport default OfflineNotice;\n","import { useMemo } from 'react';\nimport { pickBy } from 'lodash';\n\nimport { useCurrentUser } from 'State/current-user';\nimport { useAPIHandlers } from 'State/api';\nimport useErrorHandlers from 'State/error-handlers';\nimport { userOrTeamIsAuthor, useCollectionReload } from 'State/collection';\nimport { useProjectReload } from 'State/project';\nimport { userIsOnTeam } from 'Models/team';\nimport { userIsProjectMember, userIsProjectAdmin, userIsOnlyProjectAdmin } from 'Models/project';\n\nconst bind = (fn, ...args) => {\n  if (!fn) return null;\n  return (...restArgs) => fn(...args, ...restArgs);\n};\n\nconst withErrorHandler = (fn, handler) => (...args) => fn(...args).catch(handler);\n\nconst useDefaultProjectOptions = () => {\n  const { addProjectToCollection, joinTeamProject, removeUserFromProject, deleteProject } = useAPIHandlers();\n  const { currentUser } = useCurrentUser();\n  const { handleError, handleCustomError } = useErrorHandlers();\n  const reloadProjectMembers = useProjectReload();\n  const reloadCollectionProjects = useCollectionReload();\n  return {\n    addProjectToCollection: withErrorHandler(async (project, collection) => {\n      await addProjectToCollection({ project, collection });\n      reloadCollectionProjects([collection]);\n    }, handleCustomError),\n    joinTeamProject: withErrorHandler(async (project, team) => {\n      await joinTeamProject({ team, project });\n      reloadProjectMembers([project.id]);\n    }, handleError),\n    leaveProject: withErrorHandler(async (project) => {\n      await removeUserFromProject({ project, user: currentUser });\n      reloadProjectMembers([project.id]);\n    }, handleError),\n    deleteProject: (project) => deleteProject({ project }).catch(handleError),\n  };\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport const useProjectOptions = (project, { user, team, collection, ...options } = {}) => {\n  const { currentUser } = useCurrentUser();\n  const defaultProjectOptions = useDefaultProjectOptions();\n  const projectOptions = { ...defaultProjectOptions, ...options };\n\n  const isPinned = useMemo(() => {\n    if (user) return user.pins.some(({ id }) => id === project.id);\n    if (team) return team.teamPins.some(({ projectId }) => projectId === project.id);\n    return false;\n  }, [user, team, project]);\n\n  const isLoggedIn = !!currentUser.login;\n  const isProjectMember = userIsProjectMember({ project, user: currentUser });\n  const isProjectAdmin = userIsProjectAdmin({ project, user: currentUser });\n  const isOnlyProjectAdmin = userIsOnlyProjectAdmin({ project, user: currentUser });\n\n  const isUser = user && user.id === currentUser.id;\n  const isCollectionOwner = collection && userOrTeamIsAuthor({ collection, user: currentUser });\n  const isTeamMember = team && userIsOnTeam({ team, user: currentUser });\n  const projectTeam = currentUser.teams.find((t) => project.teamIds.includes(t.id));\n  const isProfileOwner = isUser || isCollectionOwner || isTeamMember;\n  const canAddNote = collection ? isCollectionOwner : isProjectAdmin;\n\n  return pickBy({\n    addProjectToCollection: isLoggedIn && projectOptions.addProjectToCollection,\n    featureProject: !project.private && isProfileOwner && bind(projectOptions.featureProject, project),\n    addPin: isProfileOwner && !isPinned && bind(projectOptions.addPin, project),\n    removePin: isProfileOwner && isPinned && bind(projectOptions.removePin, project),\n    displayNewNote: !project.note && !project.isAddingANewNote && canAddNote && bind(projectOptions.displayNewNote, project),\n    joinTeamProject: !isProjectMember && !!projectTeam && bind(projectOptions.joinTeamProject, project, projectTeam),\n    leaveProject: isProjectMember && !isOnlyProjectAdmin && bind(projectOptions.leaveProject, project),\n    removeProjectFromTeam: isTeamMember && bind(projectOptions.removeProjectFromTeam, project),\n    deleteProject: isProjectAdmin && bind(projectOptions.deleteProject, project),\n    removeProjectFromCollection: isCollectionOwner && bind(projectOptions.removeProjectFromCollection, project),\n  });\n};\n","import React, { useState, useCallback, useContext, createContext } from 'react';\n\nimport useUploader from 'State/uploader';\nimport { useAPI, useAPIHandlers } from 'State/api';\nimport useErrorHandlers from 'State/error-handlers';\nimport * as assets from 'Utils/assets';\nimport { allByKeys, getSingleItem, getAllPages } from 'Shared/api';\n\nexport async function getProjectByDomain(api, domain) {\n  const { project, teams, users } = await allByKeys({\n    project: getSingleItem(api, `v1/projects/by/domain?domain=${domain}`, domain),\n    teams: getAllPages(api, `v1/projects/by/domain/teams?domain=${domain}`),\n    users: getAllPages(api, `v1/projects/by/domain/users?domain=${domain}`),\n  });\n  return { ...project, teams, users };\n}\n\nasync function getMembers(api, projectId, withCacheBust) {\n  const cacheBust = withCacheBust ? `&cacheBust=${Date.now()}` : '';\n  const [users, teams] = await Promise.all([\n    getAllPages(api, `/v1/projects/by/id/users?id=${projectId}${cacheBust}`),\n    getAllPages(api, `/v1/projects/by/id/teams?id=${projectId}${cacheBust}`),\n  ]);\n  return { users, teams };\n}\n\nconst loadingResponse = { status: 'loading' };\n\nfunction loadProjectMembers(api, projectIds, setProjectResponses, withCacheBust) {\n  // set selected projects to 'loading' if they haven't been initialized yet\n  setProjectResponses((prev) => {\n    const next = { ...prev };\n    for (const projectId of projectIds) {\n      if (!next[projectId] || !next[projectId].members) {\n        next[projectId] = { ...next[projectId], members: loadingResponse };\n      }\n    }\n    return next;\n  });\n  // update each project as it loads\n  projectIds.forEach(async (projectId) => {\n    const members = await getMembers(api, projectId, withCacheBust);\n    setProjectResponses((prev) => ({\n      ...prev,\n      [projectId]: {\n        ...prev[projectId],\n        members: { status: 'ready', value: members },\n      },\n    }));\n  });\n}\n\nconst ProjectMemberContext = createContext();\nconst ProjectReloadContext = createContext();\nexport const ProjectContextProvider = ({ children }) => {\n  const [projectResponses, setProjectResponses] = useState({});\n  const api = useAPI();\n\n  const getProjectMembers = useCallback((projectId) => {\n    if (projectResponses[projectId] && projectResponses[projectId].members) {\n      return projectResponses[projectId].members;\n    }\n    loadProjectMembers(api, [projectId], setProjectResponses);\n    return loadingResponse;\n  }, [projectResponses, api]);\n\n  const reloadProjectMembers = useCallback((projectIds) => {\n    loadProjectMembers(api, projectIds, setProjectResponses, true);\n  }, [api]);\n\n  return (\n    <ProjectMemberContext.Provider value={getProjectMembers}>\n      <ProjectReloadContext.Provider value={reloadProjectMembers}>\n        {children}\n      </ProjectReloadContext.Provider>\n    </ProjectMemberContext.Provider>\n  );\n};\n\nexport function useProjectMembers(projectId) {\n  const getProjectMembers = useContext(ProjectMemberContext);\n  return getProjectMembers(projectId);\n}\n\nexport function useProjectReload() {\n  return useContext(ProjectReloadContext);\n}\n\nexport function useProjectEditor(initialProject) {\n  const [project, setProject] = useState({\n    ...initialProject,\n    _avatarCache: Date.now(),\n  });\n  const { uploadAsset } = useUploader();\n  const { handleError, handleErrorForInput } = useErrorHandlers();\n  const { getAvatarImagePolicy } = assets.useAssetPolicy();\n  const { updateItem, deleteItem, updateProjectDomain } = useAPIHandlers();\n\n  async function updateFields(changes) {\n    await updateItem({ project }, changes);\n    setProject((prev) => ({\n      ...prev,\n      ...changes,\n    }));\n  }\n\n  const withErrorHandler = (fn, handler) => (...args) => fn(...args).catch(handler);\n\n  const funcs = {\n    deleteProject: () => deleteItem({ project }).catch(handleError),\n    updateDomain: withErrorHandler(async (domain) => {\n      await updateFields({ domain });\n      // don't await this because the project domain has already changed and I don't want to delay other things updating\n      updateProjectDomain({ project });\n    }, handleErrorForInput),\n    updateDescription: (description) => updateFields({ description }).catch(handleErrorForInput),\n    updatePrivate: (isPrivate) => updateFields({ private: isPrivate }).catch(handleError),\n    uploadAvatar: () =>\n      assets.requestFile(\n        withErrorHandler(async (blob) => {\n          const { data: policy } = await getAvatarImagePolicy({ project });\n          await uploadAsset(blob, policy, '', { cacheControl: 60 });\n          setProject((prev) => ({\n            ...prev,\n            _avatarCache: Date.now(),\n          }));\n        }, handleError),\n      ),\n  };\n  return [project, funcs];\n}\n","/* eslint-disable prefer-default-export */\nimport algoliasearch from 'algoliasearch/lite';\nimport { useEffect, useReducer, useMemo } from 'react';\nimport { mapValues, sumBy, pick } from 'lodash';\n\nimport { allByKeys } from 'Shared/api';\nimport useErrorHandlers from 'State/error-handlers';\n\nimport { useAPI } from './api';\nimport starterKits from '../curated/starter-kits';\n\n// TODO: this is super hacky; this would probably work a lot better with algolia\nconst normalize = (str) =>\n  (str || '')\n    .trim()\n    .replace(/[^\\w\\d\\s]/g, '')\n    .toLowerCase();\n\nfunction findStarterKits(query) {\n  const normalizedQuery = normalize(query);\n  return starterKits.filter((kit) => kit.keywords.includes(normalizedQuery)).map((kit) => ({ type: 'starterKit', ...kit }));\n}\n\n// top results\n\n// byPriority('domain', 'name') -- first try to match domain, then try matching name, then return `null`\nconst byPriority = (...prioritizedKeys) => (items, query) => {\n  const normalizedQuery = normalize(query);\n  for (const key of prioritizedKeys) {\n    const match = items.find((item) => normalize(item[key]) === normalizedQuery);\n    if (match) return match;\n  }\n  return null;\n};\n\nconst findTop = {\n  project: byPriority('domain', 'name'),\n  team: byPriority('url', 'name'),\n  user: byPriority('login', 'name'),\n};\n\nconst getTopResults = (resultsByType, query) =>\n  [findTop.project(resultsByType.project, query), findTop.team(resultsByType.team, query), findTop.user(resultsByType.user, query)].filter(Boolean);\n\nconst filterOutBadData = (payload) => {\n  const filteredData = { ...payload };\n  // sometimes search results are out of sync with db, ensures we don't show teams that don't exist)\n  if (filteredData.team) {\n    filteredData.team = filteredData.team.filter((t) => !!t.url);\n  }\n  return filteredData;\n};\n\n// search provider logic -- shared between algolia & legacy API\nfunction useSearchProvider(provider, query, params, deps) {\n  const { handleError } = useErrorHandlers();\n  const emptyResults = mapValues(provider, () => []);\n  const initialState = {\n    status: 'init',\n    totalHits: 0,\n    topResults: [],\n    ...emptyResults,\n  };\n  const reducer = (state, action) => {\n    switch (action.type) {\n      case 'clearQuery':\n        return initialState;\n      case 'loading':\n        return { ...state, status: 'loading' };\n      case 'ready': {\n        const resultsWithEmpties = { ...emptyResults, ...filterOutBadData(action.payload) };\n        return {\n          status: 'ready',\n          totalHits: sumBy(Object.values(action.payload), (items) => items.length),\n          topResults: getTopResults(resultsWithEmpties, query),\n          ...resultsWithEmpties,\n        };\n      }\n      default:\n        return state;\n    }\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    if (!query && !params.allowEmptyQuery) {\n      dispatch({ type: 'clearQuery' });\n      return;\n    }\n    dispatch({ type: 'loading' });\n    const selectedProviders = pick(provider, params.filterTypes);\n\n    allByKeys(mapValues(selectedProviders, (index) => index(query, params)))\n      .then((res) => {\n        dispatch({ type: 'ready', payload: res });\n      })\n      .catch(handleError);\n  }, [query, ...deps]);\n  return state;\n}\n\n// algolia search\n\nconst formatByType = {\n  user: (user) => ({\n    ...user,\n    id: Number(user.objectID.replace('user-', '')),\n    thanksCount: user.thanks,\n  }),\n  team: (team) => ({\n    isVerified: false,\n    hasAvatarImage: false,\n    ...team,\n    id: Number(team.objectID.replace('team-', '')),\n  }),\n  project: (project) => ({\n    description: '',\n    showAsGlitchTeam: false,\n    ...project,\n    id: project.objectID.replace('project-', ''),\n    users: null,\n    teams: null,\n    permissions: project.members.map((userId) => ({ userId })),\n    teamIds: project.teams,\n    private: project.isPrivate,\n  }),\n  collection: (collection) => ({\n    coverColor: '#eee',\n    color: '#eee',\n    description: '',\n    ...collection,\n    id: Number(collection.objectID.replace('collection-', '')),\n    team: null,\n    user: null,\n    teamId: collection.team,\n    userId: collection.user,\n  }),\n};\n\nconst formatAlgoliaResult = (type) => ({ hits }) =>\n  hits.map((value) => ({\n    type,\n    ...formatByType[type](value),\n  }));\n\nconst defaultParams = { notSafeForKids: false, filterTypes: ['user', 'team', 'project', 'collection'] };\n\nfunction createSearchClient(api) {\n  const clientPromise = api.get('/search/creds').then(({ data }) => algoliasearch(data.id, data.searchKey));\n  return {\n    initIndex: (indexName) => {\n      const indexPromise = clientPromise.then((client) => client.initIndex(indexName));\n\n      return {\n        search: (...args) => indexPromise.then((index) => index.search(...args)),\n      };\n    },\n  };\n}\n\nconst buildCollectionFilters = ({ teamIDs = [], userIDs = [] }) => {\n  if (!teamIDs.length && !userIDs.length) return undefined;\n  return [...teamIDs.map((id) => `team=${id}`), ...userIDs.map((id) => `user=${id}`)].join(' OR ');\n};\n\nfunction createAlgoliaProvider(api) {\n  const searchClient = createSearchClient(api);\n  const searchIndices = {\n    team: searchClient.initIndex('search_teams'),\n    user: searchClient.initIndex('search_users'),\n    project: searchClient.initIndex('search_projects'),\n    collection: searchClient.initIndex('search_collections'),\n  };\n\n  return {\n    ...mapValues(searchIndices, (index, type) => (query) => index.search({ query, hitsPerPage: 100 }).then(formatAlgoliaResult(type))),\n    collection: (query, { teamIDs, userIDs }) =>\n      searchIndices.collection\n        .search({\n          query,\n          hitsPerPage: 100,\n          filters: buildCollectionFilters({ teamIDs, userIDs }),\n        })\n        .then(formatAlgoliaResult('collection')),\n    project: (query, { notSafeForKids }) =>\n      searchIndices.project\n        .search({\n          query,\n          hitsPerPage: 100,\n          facetFilters: [notSafeForKids ? '' : 'notSafeForKids:false'],\n        })\n        .then(formatAlgoliaResult('project')),\n    starterKit: (query) => Promise.resolve(findStarterKits(query)),\n  };\n}\n\nexport function useAlgoliaSearch(query, params = defaultParams, deps = []) {\n  const api = useAPI();\n  const algoliaProvider = useMemo(() => createAlgoliaProvider(api), [api]);\n  return useSearchProvider(algoliaProvider, query, params, deps);\n}\n\nexport default useAlgoliaSearch;\n","/* global analytics */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { isFunction } from 'lodash';\nimport { captureException } from 'Utils/sentry';\n\nconst Context = React.createContext({ properties: {}, context: {} });\n\nconst resolveProperties = (properties, inheritedProperties) => {\n  if (isFunction(properties)) {\n    return properties(inheritedProperties);\n  }\n  return { ...inheritedProperties, ...properties };\n};\n\n// stick this in the tree to add a property value to any tracking calls within it\nexport const AnalyticsContext = ({ children, properties, context }) => {\n  const inherited = React.useContext(Context);\n  return (\n    <Context.Provider\n      value={{\n        properties: resolveProperties(properties, inherited.properties),\n        context: resolveProperties(context, inherited.context),\n      }}\n    >\n      {children}\n    </Context.Provider>\n  );\n};\nAnalyticsContext.propTypes = {\n  children: PropTypes.node.isRequired,\n  properties: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  context: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n};\nAnalyticsContext.defaultProps = {\n  properties: {},\n  context: {},\n};\n\nexport const useTracker = (name, properties, context) => {\n  const inherited = React.useContext(Context);\n  return () => {\n    try {\n      analytics.track(name, resolveProperties(properties, inherited.properties), resolveProperties(context, inherited.context));\n    } catch (error) {\n      /*\n      From Segment: \"We currently return a 200 response for all API requests so debugging should be done in the Segment Debugger.\n      The only exception is if the request is too large / json is invalid it will respond with a 400.\"\n      If it was not a 400, it wasn't our fault so don't track it.\n      */\n      if (error && error.response && error.response.status === 400) {\n        captureException(error);\n      }\n    }\n  };\n};\n\nexport const useTrackedFunc = (func, name, properties, context) => {\n  const track = useTracker(name, properties, context);\n  if (!func) return func;\n  return (...funcArgs) => {\n    track();\n    return func(...funcArgs);\n  };\n};\n\nexport const useTrackedLink = (name, properties) => {\n  const inherited = React.useContext(Context);\n\n  const nameRef = React.useRef(name);\n  const propertiesRef = React.useRef(properties);\n  const inheritedRef = React.useRef(inherited.properties);\n  React.useEffect(() => {\n    nameRef.current = name;\n    propertiesRef.current = properties;\n    inheritedRef.current = inherited.properties;\n  }, [name, properties, inherited.properties]);\n\n  const ref = React.useRef(null);\n  React.useEffect(() => {\n    try {\n      // we only call this on first render, use refs to keep the name/properties up to date\n      analytics.trackLink(ref.current, () => nameRef.current, () => resolveProperties(propertiesRef.current, inheritedRef.current));\n    } catch (error) {\n      captureException(error);\n    }\n  }, []);\n  return ref;\n};\n","import { useState } from 'react';\n\nimport * as assets from 'Utils/assets';\n\nimport { useAPIHandlers } from 'State/api';\nimport { useCurrentUser } from 'State/current-user';\nimport { useNotifications } from 'State/notifications';\nimport useUploader from 'State/uploader';\nimport useErrorHandlers from 'State/error-handlers';\nimport { useProjectReload } from 'State/project';\n\nconst MEMBER_ACCESS_LEVEL = 20;\nconst ADMIN_ACCESS_LEVEL = 30;\n\n// eslint-disable-next-line import/prefer-default-export\nexport function useTeamEditor(initialTeam) {\n  const { currentUser, update: updateCurrentUser } = useCurrentUser();\n  const { uploadAssetSizes } = useUploader();\n  const { createNotification } = useNotifications();\n  const { handleError, handleErrorForInput } = useErrorHandlers();\n  const { getAvatarImagePolicy, getCoverImagePolicy } = assets.useAssetPolicy();\n  const reloadProjectMembers = useProjectReload();\n  const {\n    updateItem,\n    deleteItem,\n    joinTeam,\n    inviteEmailToTeam,\n    inviteUserToTeam,\n    removeUserFromProject,\n    removeUserFromTeam,\n    addProjectToTeam,\n    removeProjectFromTeam,\n    addPinnedProject,\n    removePinnedProject,\n    updateUserAccessLevel,\n    joinTeamProject,\n  } = useAPIHandlers();\n  const [team, setTeam] = useState({ ...initialTeam });\n\n  async function updateFields(changes) {\n    const { data } = await updateItem({ team }, changes);\n    setTeam((prev) => ({ ...prev, ...data }));\n    if (currentUser) {\n      const teamIndex = currentUser.teams.findIndex(({ id }) => id === team.id);\n      if (teamIndex >= 0) {\n        const teams = [...currentUser.teams];\n        teams[teamIndex] = team;\n        updateCurrentUser({ teams });\n      }\n    }\n  }\n\n  function updatePermissions(project, permissions) {\n    setTeam((prev) => ({\n      ...prev,\n      projects: prev.projects.map((p) => {\n        if (p.id !== project.id) return p;\n        return {\n          ...p,\n          permissions,\n        };\n      }),\n    }));\n  }\n\n  function removePermissions(user, projects) {\n    setTeam((prev) => ({\n      ...prev,\n      projects: prev.projects.map((p) => {\n        if (!projects.some((project) => project.id === p.id)) return p;\n        return {\n          ...p,\n          permissions: p.permissions.filter((perm) => perm.userId !== user.id),\n        };\n      }),\n    }));\n  }\n\n  function removeUserAdmin(user) {\n    const index = team.adminIds.indexOf(user.id);\n    if (index !== -1) {\n      setTeam((prev) => ({\n        ...prev,\n        counter: prev.adminIds.splice(index, 1),\n      }));\n    }\n  }\n\n  const withErrorHandler = (fn, handler) => (...args) => fn(...args).catch(handler);\n\n  const funcs = {\n    updateName: (name) => updateFields({ name }).catch(handleErrorForInput),\n    updateUrl: (url) => updateFields({ url }).catch(handleErrorForInput),\n    updateDescription: (description) => updateFields({ description }).catch(handleErrorForInput),\n    joinTeam: withErrorHandler(async () => {\n      await joinTeam({ team });\n      setTeam((prev) => ({\n        ...prev,\n        users: [...prev.users, currentUser],\n      }));\n      if (currentUser) {\n        const { teams } = currentUser;\n        updateCurrentUser({ teams: [...teams, team] });\n      }\n    }, handleError),\n    inviteEmail: (email) => inviteEmailToTeam({ team }, email).catch(handleError),\n    inviteUser: (user) => inviteUserToTeam({ user, team }).catch(handleError),\n    removeUserFromTeam: withErrorHandler(async (user, projects) => {\n      // Kick them out of every project at once, and wait until it's all done\n      await Promise.all(projects.map((project) => removeUserFromProject({ project, user })));\n      // Now remove them from the team. Remove them last so if something goes wrong you can do this over again\n      await removeUserFromTeam({ user, team });\n      removeUserAdmin(user);\n      setTeam((prev) => ({\n        ...prev,\n        users: prev.users.filter((u) => u.id !== user.id),\n      }));\n      if (currentUser && currentUser.id === user.id) {\n        const teams = currentUser.teams.filter(({ id }) => id !== team.id);\n        updateCurrentUser({ teams });\n      }\n      // update projects so that this user no longer appears in member lists\n      reloadProjectMembers(projects.map((project) => project.id));\n      removePermissions(user, projects);\n    }, handleError),\n    uploadAvatar: () =>\n      assets.requestFile(\n        withErrorHandler(async (blob) => {\n          const { data: policy } = await getAvatarImagePolicy({ team });\n          await uploadAssetSizes(blob, policy, assets.AVATAR_SIZES);\n\n          const image = await assets.blobToImage(blob);\n          const color = assets.getDominantColor(image);\n          await updateFields({\n            hasAvatarImage: true,\n            backgroundColor: color,\n          });\n          setTeam((prev) => ({ ...prev, updatedAt: Date.now() }));\n        }, handleError),\n      ),\n    uploadCover: () =>\n      assets.requestFile(\n        withErrorHandler(async (blob) => {\n          const { data: policy } = await getCoverImagePolicy({ team });\n          await uploadAssetSizes(blob, policy, assets.COVER_SIZES);\n\n          const image = await assets.blobToImage(blob);\n          const color = assets.getDominantColor(image);\n          await updateFields({\n            hasCoverImage: true,\n            coverColor: color,\n          });\n          setTeam((prev) => ({ ...prev, updatedAt: Date.now() }));\n        }, handleError),\n      ),\n    clearCover: () => updateFields({ hasCoverImage: false }).catch(handleError),\n    addProject: withErrorHandler(async (project) => {\n      await addProjectToTeam({ project, team });\n      setTeam((prev) => ({\n        ...prev,\n        projects: [project, ...prev.projects],\n      }));\n    }, handleError),\n    removeProject: withErrorHandler(async (project) => {\n      await removeProjectFromTeam({ project, team });\n      setTeam((prev) => ({\n        ...prev,\n        projects: prev.projects.filter((p) => p.id !== project.id),\n      }));\n    }, handleError),\n    deleteProject: withErrorHandler(async (project) => {\n      await deleteItem({ project });\n      setTeam((prev) => ({\n        ...prev,\n        projects: prev.projects.filter((p) => p.id !== project.id),\n      }));\n    }, handleError),\n    addPin: withErrorHandler(async (project) => {\n      await addPinnedProject({ project, team });\n      setTeam((prev) => ({\n        ...prev,\n        teamPins: [...prev.teamPins, { projectId: project.id }],\n      }));\n    }, handleError),\n    removePin: withErrorHandler(async (project) => {\n      await removePinnedProject({ project, team });\n      setTeam((prev) => ({\n        ...prev,\n        teamPins: prev.teamPins.filter((p) => p.projectId !== project.id),\n      }));\n    }, handleError),\n    updateWhitelistedDomain: (whitelistedDomain) => updateFields({ whitelistedDomain }).catch(handleError),\n    updateUserPermissions: withErrorHandler(async (user, accessLevel) => {\n      if (accessLevel === MEMBER_ACCESS_LEVEL && team.adminIds.length <= 1) {\n        createNotification('A team must have at least one admin', { type: 'error' });\n        return false;\n      }\n      await updateUserAccessLevel({ user, team }, accessLevel);\n      if (accessLevel === ADMIN_ACCESS_LEVEL) {\n        setTeam((prev) => ({\n          ...prev,\n          counter: prev.adminIds.push(user.id),\n        }));\n      } else {\n        removeUserAdmin(user);\n      }\n      return null;\n    }, handleError),\n    joinTeamProject: withErrorHandler(async (project) => {\n      const { data: updatedProject } = await joinTeamProject({ team, project });\n      updatePermissions(project, updatedProject.users.map((user) => user.projectPermission));\n      reloadProjectMembers([project.id]);\n    }, handleError),\n    leaveProject: withErrorHandler(async (project) => {\n      await removeUserFromProject({ project, user: currentUser });\n      removePermissions(currentUser, [project]);\n      reloadProjectMembers([project.id]);\n    }, handleError),\n    featureProject: (project) => updateFields({ featured_project_id: project.id }).catch(handleError),\n    unfeatureProject: () => updateFields({ featured_project_id: null }).catch(handleError),\n  };\n  return [team, funcs];\n}\n","import React from 'react';\n\nimport { uploadAsset, uploadAssetSizes } from 'Utils/assets';\nimport { captureException } from 'Utils/sentry';\nimport { useNotifications } from 'State/notifications';\nimport Progress from 'Components/fields/progress';\n\nconst NotifyUploading = ({ progress }) => (\n  <>\n    Uploading asset\n    <Progress value={progress} />\n  </>\n);\nconst NotifyError = ({ error }) => {\n  if (error && error.status_code === 0) {\n    return 'File upload failed. Check your firewall settings and try again?';\n  }\n  return 'File upload failed. Try again in a few minutes?';\n};\n\nasync function uploadWrapper(notifications, upload) {\n  let result = null;\n  let progress = 0;\n  const { updateNotification, removeNotification } = notifications.createNotification(<NotifyUploading progress={progress} />, {\n    persistent: true,\n  });\n  try {\n    result = await upload(({ lengthComputable, loaded, total }) => {\n      if (lengthComputable) {\n        progress = loaded / total;\n      } else {\n        progress = (progress + 1) / 2;\n      }\n      updateNotification(<NotifyUploading progress={progress} />);\n    });\n  } catch (error) {\n    captureException(error);\n    notifications.createNotification(<NotifyError error={error} />, { type: 'error' });\n    removeNotification();\n    return result;\n  }\n\n  removeNotification();\n  notifications.createNotification('Image uploaded!');\n  return result;\n}\n\nconst useUploader = () => {\n  const notifications = useNotifications();\n  return {\n    uploadAsset: (blob, policy, key) => uploadWrapper(notifications, (cb) => uploadAsset(blob, policy, key, cb)),\n    uploadAssetSizes: (blob, policy, sizes) => uploadWrapper(notifications, (cb) => uploadAssetSizes(blob, policy, sizes, cb)),\n  };\n};\n\nexport default useUploader;\n","import useLocalStorage from 'State/local-storage';\n\nconst useUserPref = (name, defaultValue) => {\n  const [prefs, set] = useLocalStorage('community-userPrefs', {});\n  const value = prefs[name] !== undefined ? prefs[name] : defaultValue;\n  const setValue = (newValue) => set({ ...prefs, [name]: newValue });\n  return [value, setValue];\n};\n\nexport default useUserPref;\n","import { useState } from 'react';\n\nimport * as assets from 'Utils/assets';\nimport { useAPI, useAPIHandlers } from 'State/api';\nimport { useCurrentUser } from 'State/current-user';\nimport useUploader from 'State/uploader';\nimport useErrorHandlers from 'State/error-handlers';\nimport { getSingleItem } from 'Shared/api';\n\nfunction useUserPageGetters() {\n  const api = useAPI();\n  return {\n    getDeletedProject: ({ project }) => api.get(`/projects/${project.id}?showDeleted=true`),\n    getProject: ({ project }) => getSingleItem(api, `/v1/projects/by/id?id=${project.id}`, project.id),\n  };\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport function useUserEditor(initialUser) {\n  const [user, setUser] = useState({\n    ...initialUser,\n    _deletedProjects: [],\n  });\n  const { currentUser, update: updateCurrentUser } = useCurrentUser();\n  const { uploadAsset, uploadAssetSizes } = useUploader();\n  const { handleError, handleErrorForInput } = useErrorHandlers();\n  const { getCoverImagePolicy } = assets.useAssetPolicy();\n  const {\n    updateItem,\n    deleteItem,\n    removeUserFromProject,\n    addPinnedProject,\n    removePinnedProject,\n    undeleteProject,\n  } = useAPIHandlers();\n  const { getDeletedProject, getProject } = useUserPageGetters();\n\n  const isCurrentUser = !!currentUser && user.id === currentUser.id;\n\n  async function updateFields(changes) {\n    const { data } = await updateItem({ user }, changes);\n    setUser((prev) => ({ ...prev, ...data }));\n    if (isCurrentUser) {\n      updateCurrentUser(data);\n    }\n  }\n  const withErrorHandler = (fn, handler) => (...args) => fn(...args).catch(handler);\n\n  const funcs = {\n    updateName: (name) => updateFields({ name }).catch(handleErrorForInput),\n    updateLogin: (login) => updateFields({ login }).catch(handleErrorForInput),\n    updateDescription: (description) => updateFields({ description }).catch(handleErrorForInput),\n    uploadAvatar: () =>\n      assets.requestFile(\n        withErrorHandler(async (blob) => {\n          const { data: policy } = await getCoverImagePolicy({ user }); // TODO: why not 'getAvatarImagePolicy' here?\n          const url = await uploadAsset(blob, policy, 'temporary-user-avatar');\n\n          const image = await assets.blobToImage(blob);\n          const color = assets.getDominantColor(image);\n          await updateFields({\n            avatarUrl: url,\n            color,\n          });\n        }, handleError),\n      ),\n    uploadCover: () =>\n      assets.requestFile(\n        withErrorHandler(async (blob) => {\n          const { data: policy } = await getCoverImagePolicy({ user });\n          await uploadAssetSizes(blob, policy, assets.COVER_SIZES);\n\n          const image = await assets.blobToImage(blob);\n          const color = assets.getDominantColor(image);\n          await updateFields({\n            hasCoverImage: true,\n            coverColor: color,\n          });\n          setUser((prev) => ({ ...prev, updatedAt: Date.now() }));\n        }, handleError),\n      ),\n    clearCover: () => updateFields({ hasCoverImage: false }).catch(handleError),\n    addPin: withErrorHandler(async (project) => {\n      await addPinnedProject({ project, user });\n      setUser((prev) => ({\n        ...prev,\n        pins: [...prev.pins, { id: project.id }],\n      }));\n    }, handleError),\n    removePin: withErrorHandler(async (project) => {\n      await removePinnedProject({ project, user });\n      setUser((prev) => ({\n        ...prev,\n        pins: prev.pins.filter((p) => p.id !== project.id),\n      }));\n    }, handleError),\n    leaveProject: withErrorHandler(async (project) => {\n      await removeUserFromProject({ project, user: currentUser });\n      setUser((prev) => ({\n        ...prev,\n        projects: prev.projects.filter((p) => p.id !== project.id),\n      }));\n    }, handleError),\n    deleteProject: withErrorHandler(async (project) => {\n      await deleteItem({ project });\n      const { data } = await getDeletedProject({ project });\n      const permission = project.permissions.find((p) => p.userId === currentUser.id);\n      const deletedProjectWithPermission = { ...data, permission };\n      setUser((prev) => ({\n        ...prev,\n        projects: prev.projects.filter((p) => p.id !== project.id),\n        _deletedProjects: [deletedProjectWithPermission, ...prev._deletedProjects], // eslint-disable-line no-underscore-dangle\n      }));\n    }, handleError),\n    undeleteProject: withErrorHandler(async (project) => {\n      await undeleteProject({ project });\n      const data = await getProject({ project });\n      // temp set undeleted project updatedAt to now, while it's actually updating behind the scenes\n      data.updatedAt = Date.now();\n      setUser((prev) => ({\n        ...prev,\n        projects: [data, ...prev.projects],\n        _deletedProjects: prev._deletedProjects.filter((p) => p.id !== project.id), // eslint-disable-line no-underscore-dangle\n      }));\n    }, handleError),\n    setDeletedProjects: (_deletedProjects) => setUser((prev) => ({ ...prev, _deletedProjects })),\n    featureProject: (project) => updateFields({ featured_project_id: project.id }).catch(handleError),\n    unfeatureProject: () => updateFields({ featured_project_id: null }).catch(handleError),\n  };\n  return [user, funcs];\n}\n","import { getUrlForModel, getDisplayNameForModel } from './models';\nimport { getLink, getDisplayName } from '../models/user';\n\n/* global APP_URL */\n\nexport const getAbuseReportTitle = (model, modelType) => {\n  if (modelType === 'home') {\n    return 'Abuse Report for Glitch Homepage';\n  }\n  const displayNameForModal = getDisplayNameForModel(model, modelType) || `Anonymous user ${model.id}`;\n  return `Abuse Report for ${modelType} ${displayNameForModal}`;\n};\n\nconst capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1);\n\nconst pickEmailForReport = (currentUser, submitterEmail) => {\n  if (submitterEmail) {\n    return submitterEmail;\n  }\n  const emailObj = Array.isArray(currentUser.emails) && currentUser.emails.find((email) => email.primary);\n  return emailObj.email;\n};\n\n/*\n * mega-method to compose the body of an abuse report\n */\n\nexport const getAbuseReportBody = (currentUser, submitterEmail, reportedType, reportedModel, message) => {\n  let thingIdentifiers;\n  if (reportedType === 'home') {\n    thingIdentifiers = `- [Glitch Home Page](${APP_URL})`;\n  } else {\n    const glitchLink = APP_URL + getUrlForModel(reportedModel, reportedType);\n    const capitalizedReportedType = capitalize(reportedType);\n    thingIdentifiers = `\n- ${capitalizedReportedType} Name: [${getDisplayNameForModel(reportedModel, reportedType) || 'Anonymous user'}](${glitchLink})\n\n- ${capitalizedReportedType} Id: ${reportedModel.id}`;\n  }\n\n  return `${thingIdentifiers}\n\n- Submitted by: [${getDisplayName(currentUser)}](${APP_URL}${getLink(currentUser)})\n\n- Contact: ${pickEmailForReport(currentUser, submitterEmail)}\n\n- Message: ${message}`;\n};\n","// 💭 based on frontend/utils/assets in the editor\n\n/* eslint-disable no-param-reassign */\n\nimport { useMemo } from 'react';\nimport quantize from 'quantize';\nimport { useAPI, entityPath } from 'State/api';\nimport S3Uploader from './s3-uploader';\n\nexport const COVER_SIZES = {\n  large: 1000,\n  medium: 700,\n  small: 450,\n};\nexport const AVATAR_SIZES = {\n  large: 300,\n  medium: 150,\n  small: 60,\n};\n\nexport const blobToImage = (file) =>\n  new Promise((resolve, reject) => {\n    const image = new Image();\n    image.onload = () => resolve(image);\n    image.onerror = reject;\n    image.src = URL.createObjectURL(file);\n    return image;\n  });\n\n// Reduces the width/height and draws a new image until it reaches\n// the final size. It loops by waiting for the onload to fire on the updated\n// image and exits as soon as the new width/height are less than or equal to the\n// final size.\nconst drawCanvasThumbnail = (image, type, max) => {\n  let { width, height } = image;\n  const quality = 0.92;\n  let sourceCanvas = document.createElement('canvas');\n  sourceCanvas.width = width;\n  sourceCanvas.height = height;\n  const sourceContext = sourceCanvas.getContext('2d');\n  sourceContext.drawImage(image, 0, 0, width, height);\n  while (width > max && height > max) {\n    width *= 0.75;\n    height *= 0.75;\n    const targetCanvas = document.createElement('canvas');\n    const targetContext = targetCanvas.getContext('2d');\n    targetCanvas.width = width;\n    targetCanvas.height = height;\n    targetContext.drawImage(sourceCanvas, 0, 0, width, height);\n    sourceCanvas = targetCanvas;\n  }\n  return new Promise((resolve) =>\n    sourceCanvas.toBlob(\n      (blob) => {\n        blob.width = width;\n        blob.height = height;\n        return resolve(blob);\n      },\n      type,\n      quality,\n    ),\n  );\n};\n\n// Takes an HTML5 File and returns a promise for an HTML5 Blob that is fulfilled\n// with a thumbnail for the image. If the image is small enough the original\n// blob is returned. Width and height metadata are added to the blob.\nexport function resizeImage(file, max) {\n  return blobToImage(file).then((image) => {\n    file.width = image.width;\n    file.height = image.height;\n    if (image.width < max && image.height < max) {\n      return file;\n    }\n    return drawCanvasThumbnail(image, file.type, max);\n  });\n}\n\n// Takes an image object and returns an approximate average color\n// Used to set background colors as an avatar image fallback\n// Works by sampling the top-left 11x11 pixels and quantizing\n// them into 5 colors and returning the most common color\n// Returns '' if any pixels were transparent\nexport function getDominantColor(image) {\n  const { width, height } = image;\n  const PIXELS_FROM_EDGE = 11;\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  const context = canvas.getContext('2d');\n  context.drawImage(image, 0, 0, width, height);\n  let transparentPixels = false;\n  let colors = [];\n  const outlyingColors = [];\n  const outlyingColorsList = JSON.stringify([[255, 255, 255], [0, 0, 0]]);\n  /*\n  Iterate through edge pixels and get the average color, then conditionally\n  handle edge colors and transparent images\n  */\n  for (let x = 0; x < PIXELS_FROM_EDGE; x += 1) {\n    for (let y = 0; y < PIXELS_FROM_EDGE; y += 1) {\n      const pixelData = context.getImageData(x, y, 1, 1).data;\n      if (pixelData[3] < 255) {\n        // alpha pixels\n        transparentPixels = true;\n        break;\n      }\n      const color = [\n        pixelData[0], // r\n        pixelData[1], // g\n        pixelData[2], // b\n      ];\n      const colorList = JSON.stringify(color);\n      if (outlyingColorsList.includes(colorList)) {\n        outlyingColors.push(color);\n      } else {\n        colors.push(color);\n      }\n    }\n  }\n  if (outlyingColors.length > colors.length) {\n    colors = outlyingColors;\n  }\n  if (transparentPixels) {\n    return '';\n  }\n  const colorMap = quantize(colors, 5);\n  const [r, g, b] = Array.from(colorMap.palette()[0]);\n  return `rgb(${r},${g},${b})`;\n}\n\nexport function requestFile(callback) {\n  const input = document.createElement('input');\n  input.type = 'file';\n  input.accept = 'image/*';\n  input.onchange = (event) => {\n    const file = event.target.files[0];\n    console.log('☔️☔️☔️ input onchange', file);\n    callback(file);\n  };\n  input.click();\n  console.log('input created: ', input);\n}\n\nexport function uploadAsset(blob, policy, key, options = {}) {\n  return S3Uploader(policy).upload({ key, blob, ...options });\n}\n\nexport const useAssetPolicy = () => {\n  const api = useAPI();\n  return useMemo(\n    () => ({\n      getCoverImagePolicy: (args) => api.get(`/${entityPath(args)}/cover/policy`),\n      getAvatarImagePolicy: (args) => api.get(`/${entityPath(args)}/avatar/policy`),\n    }),\n    [api],\n  );\n};\n\nexport function uploadAssetSizes(blob, policy, sizes, progressHandler) {\n  const upload = uploadAsset(blob, policy, 'original');\n  upload.progress(progressHandler);\n\n  const scaledUploads = Object.keys(sizes).map((tag) => resizeImage(blob, sizes[tag]).then((resized) => uploadAsset(resized, policy, tag)));\n\n  return Promise.all([upload, ...scaledUploads]);\n}\n\n/* eslint-enable no-param-reassign */\n","/* eslint-disable no-bitwise */\n/* eslint-disable import/prefer-default-export */\n\n// from https://stackoverflow.com/a/21648508/1720985\nexport const hexToRgbA = (hex) => {\n  if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n    let c = hex.substring(1).split('');\n    if (c.length === 3) {\n      c = [c[0], c[0], c[1], c[1], c[2], c[2]];\n    }\n    c = `0x${c.join('')}`;\n    return `rgba(${[(c >> 16) & 255, (c >> 8) & 255, c & 255].join(',')},0.5)`;\n  }\n  return false;\n};\n","import { getLink as getCollectionLink } from '../models/collection';\nimport { getLink as getProjectLink } from '../models/project';\nimport { getLink as getTeamLink } from '../models/team';\nimport { getLink as getUserLink } from '../models/user';\n\nexport const getUrlForModel = (model, modelType) => {\n  switch (modelType) {\n    case 'project':\n      return getProjectLink(model);\n    case 'collection':\n      return getCollectionLink(model);\n    case 'team':\n      return getTeamLink(model);\n    case 'user':\n      return getUserLink(model);\n    default:\n      return null;\n  }\n};\n\nexport const getDisplayNameForModel = (model, modelType) => {\n  let thingName;\n  switch (modelType) {\n    case 'project':\n      thingName = model.domain;\n      break;\n    case 'user':\n      thingName = model.login;\n      break;\n    case 'collection':\n    case 'team':\n      thingName = model.name;\n      break;\n    default:\n      return null;\n  }\n  return thingName;\n};\n","/* eslint-disable no-extend-native, no-underscore-dangle */\n\n// Extend promises with `finally`\n// From: https://github.com/domenic/promises-unwrapping/issues/18\nif (Promise.prototype.finally == null) {\n  Promise.prototype.finally = function _finally(callback) {\n    // We don’t invoke the callback in here,\n    // because we want then() to handle its exceptions\n    return this.then(\n      // Callback fulfills: pass on predecessor settlement\n      // Callback rejects: pass on rejection (=omit 2nd arg.)\n      (value) => Promise.resolve(callback()).then(() => value),\n      (reason) =>\n        Promise.resolve(callback()).then(() => {\n          throw reason;\n        }),\n    );\n  };\n}\n\nif (Promise.prototype._notify == null) {\n  Promise.prototype._notify = function _notify(event) {\n    return this._progressHandlers.forEach((handler) => {\n      try {\n        handler(event);\n      } catch (error) {\n        // empty\n      }\n    });\n  };\n}\n\nif (Promise.prototype.progress == null) {\n  Promise.prototype.progress = function progress(handler) {\n    if (this._progressHandlers == null) {\n      this._progressHandlers = [];\n    }\n    this._progressHandlers.push(handler);\n\n    return this;\n  };\n}\n\nfunction ProgressPromise(fn) {\n  const p = new Promise((resolve, reject) => {\n    const notify = (event) => {\n      if (p._progressHandlers == null) {\n        return;\n      }\n      p._progressHandlers.forEach((handler) => {\n        try {\n          handler(event);\n        } catch (error) {\n          // empty\n        }\n      });\n    };\n    return fn(resolve, reject, notify);\n  });\n\n  p.then = function then(onFulfilled, onRejected) {\n    const result = Promise.prototype.then.call(p, onFulfilled, onRejected);\n    // Pass progress through\n    p.progress(result._notify.bind(result));\n\n    return result;\n  };\n\n  return p;\n}\n\nexport default ProgressPromise;\n","import ProgressPromise from './progress-promise';\n\n/* eslint-disable */\n\n/*\nS3 Uploader\n===========\n\nUpload data directly to S3 from the client.\n\nUsage\n-----\n\n>     uploader = S3.uploader(JSON.parse(localStorage.S3Policy))\n>     uploader.upload\n>       key: \"myfile.text\"\n>       blob: new Blob [\"radical\"]\n>       cacheControl: 60 # default 0\n\n\nThe uploader automatically prefixes the key with the namespace specified in the\npolicy.\n\nA promise is returned that is fulfilled with the url of the uploaded resource.\n\n>     .then (url) -> # \"https://s3.amazonaws.com/trinket/18894/myfile.txt\"\n\nThe promise is rejected with an error if the upload fails.\n\nA progress event is fired with the percentage of the upload that has completed.\n\nThe policy is a JSON object with the following keys:\n\n- `accessKey`\n- `policy`\n- `signature`\n\nSince these are all needed to create and sign the policy we keep them all\ntogether.\n\nGiving this object to the uploader method creates an uploader capable of\nasynchronously uploading files to the bucket specified in the policy.\n\nNotes\n-----\n\nThe policy must specify a `Cache-Control` header because we always try to set it.\n\nLicense\n-------\n\nThe MIT License (MIT)\n\nCopyright (c) 2014\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n*/\n\nexport default function(credentials) {\n  const { policy, signature, accessKeyId } = credentials;\n  const { acl, bucket, namespace } = extractPolicyData(policy);\n\n  const bucketUrl = `https://s3.amazonaws.com/${bucket}`;\n\n  const urlFor = function(key) {\n    const namespacedKey = `${namespace}${key}`;\n\n    return `${bucketUrl}/${namespacedKey}`;\n  };\n\n  return {\n    urlFor,\n\n    upload({ key, blob, cacheControl }) {\n      console.log('upload called', key); // 2, based on user id\n      console.log('using namespace', namespace); // user-cover/2, not sure what it's based on\n      const namespacedKey = `${namespace}${key}`;\n      const url = urlFor(key);\n\n      return sendForm(\n        bucketUrl,\n        objectToForm({\n          key: namespacedKey,\n          'Content-Type': blob.type || 'binary/octet-stream',\n          'Cache-Control': `max-age=${cacheControl || 31536000}`,\n          AWSAccessKeyId: accessKeyId,\n          'x-amz-security-token': credentials.sessionToken,\n          acl,\n          policy,\n          signature,\n          file: blob,\n        }),\n      ).then(() => `${bucketUrl}/${encodeURIComponent(namespacedKey)}`);\n    },\n  };\n}\n\nconst getKey = function(conditions, key) {\n  const results = conditions\n    .filter((condition) => typeof condition === 'object')\n    .map((object) => object[key])\n    .filter((value) => value);\n\n  return results[0];\n};\n\nconst getNamespaceFromPolicyConditions = (conditions) =>\n  conditions.filter(function(condition) {\n    if (Array.isArray(condition)) {\n      const [a, b, c] = Array.from(condition);\n      return b === '$key' && (a === 'starts-with' || a === 'eq');\n    }\n  })[0][2];\nvar extractPolicyData = function(policy) {\n  const policyObject = JSON.parse(atob(policy));\n\n  const { conditions } = policyObject;\n\n  return {\n    acl: getKey(conditions, 'acl'),\n    bucket: getKey(conditions, 'bucket'),\n    namespace: getNamespaceFromPolicyConditions(conditions),\n  };\n};\n\nconst isSuccess = (request) => request.status.toString()[0] === '2';\n\nvar sendForm = (url, formData) =>\n  new ProgressPromise(function(resolve, reject, notify) {\n    const request = new XMLHttpRequest();\n\n    request.open('POST', url, true);\n\n    if (request.upload != null) {\n      request.upload.onprogress = notify;\n    }\n\n    request.onreadystatechange = function(e) {\n      if (request.readyState === 4) {\n        if (isSuccess(request)) {\n          return resolve(request);\n        }\n        return reject(request);\n      }\n    };\n\n    return request.send(formData);\n  });\nvar objectToForm = function(data) {\n  let formData;\n  return (formData = Object.keys(data).reduce(function(formData, key) {\n    const value = data[key];\n\n    if (value) {\n      formData.append(key, value);\n    }\n\n    return formData;\n  }, new FormData()));\n};\n","/* globals BUILD_TIMESTAMP, ENVIRONMENT, PROJECT_DOMAIN, _env */\n\n//\n// This utility wraps the Sentry library so that we can guarantee\n// Sentry is initialized before its called.\n//\n// Only this file should import from '@sentry/browser',\n// all other users of Sentry should import this file instead.\n//\n\nimport * as Sentry from '@sentry/browser';\n\nexport * from '@sentry/browser';\nconst SentryHelpers = require('../../shared/sentryHelpers');\n\nlet beforeSendFailed = false;\nlet beforeBreadcrumbFailed = false;\n\ntry {\n  Sentry.init({\n    dsn: 'https://4f1a68242b6944738df12eecc34d377c@sentry.io/1246508',\n    environment: ENVIRONMENT,\n    release: `community@${BUILD_TIMESTAMP}`,\n    ignoreErrors: SentryHelpers.ignoreErrors,\n    whitelistUrls: ['/glitch.com/'],\n    beforeSend(event) {\n      // do not send errors to sentry when user uses UC Browser\n      const ucBrowser = window.navigator.userAgent.match(/^Mozilla\\/5\\.0 .+ Gecko\\/$/);\n      if (ucBrowser) {\n        return null;\n      }\n      try {\n        return SentryHelpers.beforeSend(PROJECT_DOMAIN, _env, event);\n      } catch (error) {\n        console.error(error);\n        if (!beforeSendFailed) {\n          // It'll probably fail next time too, so only log it once\n          // Also let this capture finish before starting another one\n          window.setTimeout(() => Sentry.captureException(error), 1);\n          beforeSendFailed = true;\n        }\n        return event;\n      }\n    },\n    beforeBreadcrumb(breadcrumb) {\n      try {\n        return SentryHelpers.beforeBreadcrumb(breadcrumb);\n      } catch (error) {\n        if (!beforeBreadcrumbFailed) {\n          // the console creates breadcrumbs, don't get into a loop\n          console.error(error);\n          window.setTimeout(() => Sentry.captureException(error), 1);\n          beforeBreadcrumbFailed = true;\n        }\n        return breadcrumb;\n      }\n    },\n  });\n\n  Sentry.configureScope((scope) => {\n    scope.setTag('PROJECT_DOMAIN', PROJECT_DOMAIN);\n  });\n\n  // Expose for use on the developer console:\n  window.Sentry = Sentry;\n} catch (error) {\n  console.warn('Error initializing Sentry', error);\n}\n"],"mappings":";;;;;;;;;AAAA;AAIA;AA0CA;AACA;;;;;;;;;;;AC/CA;;;;;;;;;;;ACAA;AA4BA;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAaA;AAGA;AAIA;AACA;AACA;AACA;AAUA;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAcA;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaA;;;;;;;;;;;ACbA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA;AAOA;;;;;;;;;;;ACvsBA;AAGA;AAkCA;;;;;;;;;;;;AC3DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAkCA;AA+BA;AAAA;;;;;;;;;;;AClEA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AAIA;;;;;;;;;;;ACvBA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA;;;;;;;;;;;AChBA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBA;;;;;;;;;;;ACxBA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6BA;;;;;;;;;;;AC7BA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;;;;;;;;;;;ACfkBA;;;;;;;;;;;AClBA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAkBA;AAqEA;;;;;;;;;;;;AC3FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAwBA;AAAA;AAKA;AAGA;AAYA;AAGA;AAeA;;;;;;;;;;;;AC/DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;ACDA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiFA;AACA;AAIA;AARA;;;;;;;;;;;AC9EA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;;;;;;;;;;;ACfA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA6DA;;;;;;;;;;;AC7DA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;AAiBA;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6BA;;;;;;;;;;;AC7BA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;;;;;;;;;;;AChBA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmDA;;;;;;;;;;;ACnDA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAEA;AAGA;AAEA;AAEA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AA2BA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC5CA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4CA;;;;;;;;;;;AC5CA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAqBA;AAgHA;;;;;;;;;;;;ACrIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAMA;AAiCA;;;;;;;;;;;ACpDA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBA;AACA;AACA;AACA;;;;;;;;;;;AC1BA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAGA;AAiBA;AAWA;AACA;;;;;;;;;;;AC3CA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;ACDA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BA;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BA;;;;;;;;;;;AC3BA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4EA;AAmDA;AAqDA;;;;;;;;;;;ACpLA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8GA;;;;;;;;;;;AC9GA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0QA;;;;;;;;;;;AC1QA;AACA;;;;;;;;;;;ACDA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuCA;AAqBA;AAIA;AAoBA;;;;;;;;;;;ACpFA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAkBA;AAOA;AAiBA;AAWA;AAuBA;;;;;;;;;;;;AC/EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AACA;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuHA;;;;;;;;;;;;ACvHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBA;AAKA;AAiEA;AA8CA;;;;;;;;;;;AC5IA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyEA;AAqDA;AA+EA;;;;;;;;;;;;AC7MA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYA;;;;;;;;;;;ACZA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA8BA;AAcA;;;;;;;;;;;AC5CA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA;;;;;;;;;;;ACPA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBA;AA2BA;AAEA;AAQA;AAEA;;;;;;;;;;;AC3DA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AAeA;AAoCA;AAqBA;AAkFA;;;;;;;;;;;AC/KA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiFA;AAzCA;AAKA;AALA;AAAA;;;;;;;;;;;;AC3CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqDA;;;;;;;;;;;;ACrDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAaA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBA;;;;;;;;;;;ACxBA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBA;AACA;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AAkDA;AACA;;;;;;;;;;;;AC9EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8FA;;;;;;;;;;;AC9FA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAIA;AAGA;AACA;AACA;;;;;;;;;;;ACtBA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAaA;;;;;;;;;;;ACbA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmDA;;;;;;;;;;;;ACnDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqGA;AAAA;;;;;;;;;;;ACrGA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4FA;;;;;;;;;;;AC5FA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;;;;;;;;;;;ACHA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+BA;;;;;;;;;;;;;;;;;;;;;AAgDA;AACA;AACA;AACA;AAyBA;AA+BA;AAIA;AAMA;AAQA;AAQA;AAWA;;;;;;;;;;;;AC/KA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgIA;AACA;AAsBA;AAuCA;AAaA;;;;;;;;;;;;AC3MA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AAmEA;AAqFA;AAAA;AAaA;AAHA;AAMA;AACA;AAPA;AAiBA;AAUA;AAYA;AAOA;AAYA;;;;;;;;;;;;ACzOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;ACpyEA;;;;;;;;;;;;ACjHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAaA;AACA;AAqBA;AAOA;AAgDA;;;;;;;;;;;;ACtGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;;;;AAkCA;AAgCA;;;;;;;;;;;;ACnFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AA2GA;;;;;;;;;;;;AC1HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AA0FA;AAUA;AACA;;;;;;;;;;;;ACvHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA2BA;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AA4BA;AACA;AACA;AACA;AAgCA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;;;AAgBA;AAKA;AAKA;AACA;;;;;;;;;;;;AC9GA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAGA;AACA;AAEA;AACA;AAgBA;AA2BA;AASA;;;;;;;;;;;;AC/DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2EA;AAiBA;AACA;;;;;;;;;;;;AC7FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAiBA;AAUA;AACA;AAYA;AAcA;;;;A","sourceRoot":""}